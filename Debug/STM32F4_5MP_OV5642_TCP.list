
STM32F4_5MP_OV5642_TCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000deec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ef0  0800e07c  0800e07c  0001e07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff6c  0800ff6c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff6c  0800ff6c  0001ff6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff74  0800ff74  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff74  0800ff74  0001ff74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff78  0800ff78  0001ff78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800ff7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c674  20000074  0800fff0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  2000c6e8  0800fff0  0002c6e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ac3c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005010  00000000  00000000  0004ace0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  0004fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011c0  00000000  00000000  00050fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b3a8  00000000  00000000  000521a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cc4f  00000000  00000000  0007d548  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d8ffb  00000000  00000000  0009a197  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173192  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005280  00000000  00000000  00173210  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         0000009c  00000000  00000000  00178490  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  0017852c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e064 	.word	0x0800e064

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800e064 	.word	0x0800e064

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <MX_GPIO_Init+0x84>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <MX_GPIO_Init+0x84>)
 80005a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <MX_GPIO_Init+0x84>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	4b17      	ldr	r3, [pc, #92]	; (8000614 <MX_GPIO_Init+0x84>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	4a16      	ldr	r2, [pc, #88]	; (8000614 <MX_GPIO_Init+0x84>)
 80005bc:	f043 0304 	orr.w	r3, r3, #4
 80005c0:	6313      	str	r3, [r2, #48]	; 0x30
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_GPIO_Init+0x84>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	f003 0304 	and.w	r3, r3, #4
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <MX_GPIO_Init+0x84>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a0f      	ldr	r2, [pc, #60]	; (8000614 <MX_GPIO_Init+0x84>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <MX_GPIO_Init+0x84>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_GPIO_Init+0x84>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a08      	ldr	r2, [pc, #32]	; (8000614 <MX_GPIO_Init+0x84>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_GPIO_Init+0x84>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C1_Init+0x50>)
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_I2C1_Init+0x54>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C1_Init+0x50>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_I2C1_Init+0x58>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_I2C1_Init+0x50>)
 8000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_I2C1_Init+0x50>)
 8000656:	f001 fdff 	bl	8002258 <HAL_I2C_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 f8ce 	bl	8000800 <Error_Handler>
  }

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000020c 	.word	0x2000020c
 800066c:	40005400 	.word	0x40005400
 8000670:	000186a0 	.word	0x000186a0

08000674 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	; 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <HAL_I2C_MspInit+0x84>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d12b      	bne.n	80006ee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_I2C_MspInit+0x88>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a17      	ldr	r2, [pc, #92]	; (80006fc <HAL_I2C_MspInit+0x88>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b15      	ldr	r3, [pc, #84]	; (80006fc <HAL_I2C_MspInit+0x88>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006b2:	23c0      	movs	r3, #192	; 0xc0
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b6:	2312      	movs	r3, #18
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006c2:	2304      	movs	r3, #4
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <HAL_I2C_MspInit+0x8c>)
 80006ce:	f001 fc29 	bl	8001f24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_I2C_MspInit+0x88>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	4a08      	ldr	r2, [pc, #32]	; (80006fc <HAL_I2C_MspInit+0x88>)
 80006dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e0:	6413      	str	r3, [r2, #64]	; 0x40
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_I2C_MspInit+0x88>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40005400 	.word	0x40005400
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020400 	.word	0x40020400

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000708:	f000 f96c 	bl	80009e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070c:	f000 f80e 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000710:	f7ff ff3e 	bl	8000590 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000714:	f7ff ff80 	bl	8000618 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000718:	f000 f87a 	bl	8000810 <MX_SPI3_Init>
  MX_LWIP_Init();
 800071c:	f002 fb86 	bl	8002e2c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_server_init();
 8000720:	f003 f84c 	bl	80037bc <tcp_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000724:	f002 fcb4 	bl	8003090 <MX_LWIP_Process>
 8000728:	e7fc      	b.n	8000724 <main+0x20>
	...

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	; 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	; 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f00c fd52 	bl	800d1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a27      	ldr	r2, [pc, #156]	; (80007f8 <SystemClock_Config+0xcc>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b22      	ldr	r3, [pc, #136]	; (80007fc <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a21      	ldr	r2, [pc, #132]	; (80007fc <SystemClock_Config+0xd0>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000788:	2302      	movs	r3, #2
 800078a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000790:	2310      	movs	r3, #16
 8000792:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	2302      	movs	r3, #2
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800079c:	2308      	movs	r3, #8
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007a0:	23a8      	movs	r3, #168	; 0xa8
 80007a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 0320 	add.w	r3, r7, #32
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fe89 	bl	80024c8 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007bc:	f000 f820 	bl	8000800 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2302      	movs	r3, #2
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2105      	movs	r1, #5
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 f8e2 	bl	80029a8 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ea:	f000 f809 	bl	8000800 <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3750      	adds	r7, #80	; 0x50
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
	...

08000810 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_SPI3_Init+0x64>)
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <MX_SPI3_Init+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800081a:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_SPI3_Init+0x64>)
 800081c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000820:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_SPI3_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_SPI3_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_SPI3_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_SPI3_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <MX_SPI3_Init+0x64>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <MX_SPI3_Init+0x64>)
 8000844:	2210      	movs	r2, #16
 8000846:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <MX_SPI3_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_SPI3_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	; (8000874 <MX_SPI3_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_SPI3_Init+0x64>)
 800085c:	220a      	movs	r2, #10
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	; (8000874 <MX_SPI3_Init+0x64>)
 8000862:	f002 fa7f 	bl	8002d64 <HAL_SPI_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800086c:	f7ff ffc8 	bl	8000800 <Error_Handler>
  }

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000264 	.word	0x20000264
 8000878:	40003c00 	.word	0x40003c00

0800087c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <HAL_SPI_MspInit+0x84>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d12c      	bne.n	80008f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_SPI_MspInit+0x88>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a17      	ldr	r2, [pc, #92]	; (8000904 <HAL_SPI_MspInit+0x88>)
 80008a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_SPI_MspInit+0x88>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_SPI_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <HAL_SPI_MspInit+0x88>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_SPI_MspInit+0x88>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80008d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e8:	2306      	movs	r3, #6
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <HAL_SPI_MspInit+0x8c>)
 80008f4:	f001 fb16 	bl	8001f24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40003c00 	.word	0x40003c00
 8000904:	40023800 	.word	0x40023800
 8000908:	40020800 	.word	0x40020800

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <HAL_MspInit+0x4c>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x4c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f86a 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <SystemInit+0x28>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <SystemInit+0x28>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SystemInit+0x28>)
 80009ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d2:	609a      	str	r2, [r3, #8]
#endif
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <HAL_Init+0x40>)
 80009ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <HAL_Init+0x40>)
 80009fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_Init+0x40>)
 8000a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f92f 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f000 f808 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff ff78 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023c00 	.word	0x40023c00

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x54>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f939 	bl	8000cbe <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00e      	b.n	8000a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d80a      	bhi.n	8000a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f000 f90f 	bl	8000c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <HAL_InitTick+0x5c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000004 	.word	0x20000004

08000a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x24>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a04      	ldr	r2, [pc, #16]	; (8000aac <HAL_IncTick+0x24>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	200002bc 	.word	0x200002bc

08000ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200002bc 	.word	0x200002bc

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff ffee 	bl	8000ab0 <HAL_GetTick>
 8000ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_Delay+0x40>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aee:	bf00      	nop
 8000af0:	f7ff ffde 	bl	8000ab0 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000008 	.word	0x20000008

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f7ff ff8e 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff47 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff5c 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff8e 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5d 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffb0 	bl	8000c2c <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000ce8:	4baa      	ldr	r3, [pc, #680]	; (8000f94 <HAL_ETH_Init+0x2bc>)
 8000cea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e185      	b.n	800100a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d106      	bne.n	8000d18 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f002 f9c8 	bl	80030a8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	4b9e      	ldr	r3, [pc, #632]	; (8000f98 <HAL_ETH_Init+0x2c0>)
 8000d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d20:	4a9d      	ldr	r2, [pc, #628]	; (8000f98 <HAL_ETH_Init+0x2c0>)
 8000d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d26:	6453      	str	r3, [r2, #68]	; 0x44
 8000d28:	4b9b      	ldr	r3, [pc, #620]	; (8000f98 <HAL_ETH_Init+0x2c0>)
 8000d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000d34:	4b99      	ldr	r3, [pc, #612]	; (8000f9c <HAL_ETH_Init+0x2c4>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	4a98      	ldr	r2, [pc, #608]	; (8000f9c <HAL_ETH_Init+0x2c4>)
 8000d3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000d3e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000d40:	4b96      	ldr	r3, [pc, #600]	; (8000f9c <HAL_ETH_Init+0x2c4>)
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a1b      	ldr	r3, [r3, #32]
 8000d48:	4994      	ldr	r1, [pc, #592]	; (8000f9c <HAL_ETH_Init+0x2c4>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f042 0201 	orr.w	r2, r2, #1
 8000d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d64:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000d66:	f7ff fea3 	bl	8000ab0 <HAL_GetTick>
 8000d6a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d6c:	e011      	b.n	8000d92 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000d6e:	f7ff fe9f 	bl	8000ab0 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d7c:	d909      	bls.n	8000d92 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2203      	movs	r2, #3
 8000d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e13b      	b.n	800100a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d1e4      	bne.n	8000d6e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f023 031c 	bic.w	r3, r3, #28
 8000db2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000db4:	f001 ffb6 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8000db8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	4a78      	ldr	r2, [pc, #480]	; (8000fa0 <HAL_ETH_Init+0x2c8>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d908      	bls.n	8000dd4 <HAL_ETH_Init+0xfc>
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	4a77      	ldr	r2, [pc, #476]	; (8000fa4 <HAL_ETH_Init+0x2cc>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d804      	bhi.n	8000dd4 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	e027      	b.n	8000e24 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	4a73      	ldr	r2, [pc, #460]	; (8000fa4 <HAL_ETH_Init+0x2cc>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d908      	bls.n	8000dee <HAL_ETH_Init+0x116>
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	4a72      	ldr	r2, [pc, #456]	; (8000fa8 <HAL_ETH_Init+0x2d0>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d804      	bhi.n	8000dee <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f043 030c 	orr.w	r3, r3, #12
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	e01a      	b.n	8000e24 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	4a6d      	ldr	r2, [pc, #436]	; (8000fa8 <HAL_ETH_Init+0x2d0>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d903      	bls.n	8000dfe <HAL_ETH_Init+0x126>
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	4a6c      	ldr	r2, [pc, #432]	; (8000fac <HAL_ETH_Init+0x2d4>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d911      	bls.n	8000e22 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	4a6a      	ldr	r2, [pc, #424]	; (8000fac <HAL_ETH_Init+0x2d4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d908      	bls.n	8000e18 <HAL_ETH_Init+0x140>
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4a69      	ldr	r2, [pc, #420]	; (8000fb0 <HAL_ETH_Init+0x2d8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d804      	bhi.n	8000e18 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	e005      	b.n	8000e24 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f043 0310 	orr.w	r3, r3, #16
 8000e1e:	61fb      	str	r3, [r7, #28]
 8000e20:	e000      	b.n	8000e24 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000e22:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	69fa      	ldr	r2, [r7, #28]
 8000e2a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000e2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e30:	2100      	movs	r1, #0
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 fb9a 	bl	800156c <HAL_ETH_WritePHYRegister>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00b      	beq.n	8000e56 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000e42:	6939      	ldr	r1, [r7, #16]
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 fd4f 	bl	80018e8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e0d9      	b.n	800100a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000e56:	20ff      	movs	r0, #255	; 0xff
 8000e58:	f7ff fe36 	bl	8000ac8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 80a7 	beq.w	8000fb4 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000e66:	f7ff fe23 	bl	8000ab0 <HAL_GetTick>
 8000e6a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	461a      	mov	r2, r3
 8000e72:	2101      	movs	r1, #1
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f000 fb11 	bl	800149c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000e7a:	f7ff fe19 	bl	8000ab0 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d90f      	bls.n	8000eac <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000e90:	6939      	ldr	r1, [r7, #16]
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 fd28 	bl	80018e8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e0ae      	b.n	800100a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0da      	beq.n	8000e6c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000eb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eba:	2100      	movs	r1, #0
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 fb55 	bl	800156c <HAL_ETH_WritePHYRegister>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00b      	beq.n	8000ee0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000ecc:	6939      	ldr	r1, [r7, #16]
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 fd0a 	bl	80018e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000edc:	2301      	movs	r3, #1
 8000ede:	e094      	b.n	800100a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ee0:	f7ff fde6 	bl	8000ab0 <HAL_GetTick>
 8000ee4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	461a      	mov	r2, r3
 8000eec:	2101      	movs	r1, #1
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 fad4 	bl	800149c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000ef4:	f7ff fddc 	bl	8000ab0 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d90f      	bls.n	8000f26 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f0a:	6939      	ldr	r1, [r7, #16]
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 fceb 	bl	80018e8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e071      	b.n	800100a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f003 0320 	and.w	r3, r3, #32
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0da      	beq.n	8000ee6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	461a      	mov	r2, r3
 8000f36:	211f      	movs	r1, #31
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f000 faaf 	bl	800149c <HAL_ETH_ReadPHYRegister>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d00b      	beq.n	8000f5c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f48:	6939      	ldr	r1, [r7, #16]
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f000 fccc 	bl	80018e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e056      	b.n	800100a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0310 	and.w	r3, r3, #16
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d004      	beq.n	8000f70 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	e002      	b.n	8000f76 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	e037      	b.n	8000ff8 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	e032      	b.n	8000ff8 <HAL_ETH_Init+0x320>
 8000f92:	bf00      	nop
 8000f94:	03938700 	.word	0x03938700
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	01312cff 	.word	0x01312cff
 8000fa4:	02160ebf 	.word	0x02160ebf
 8000fa8:	039386ff 	.word	0x039386ff
 8000fac:	05f5e0ff 	.word	0x05f5e0ff
 8000fb0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	08db      	lsrs	r3, r3, #3
 8000fba:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	085b      	lsrs	r3, r3, #1
 8000fc2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	2100      	movs	r1, #0
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 facd 	bl	800156c <HAL_ETH_WritePHYRegister>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00b      	beq.n	8000ff0 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000fdc:	6939      	ldr	r1, [r7, #16]
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 fc82 	bl	80018e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e00c      	b.n	800100a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000ff0:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000ff4:	f7ff fd68 	bl	8000ac8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000ff8:	6939      	ldr	r1, [r7, #16]
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 fc74 	bl	80018e8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2201      	movs	r2, #1
 8001004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3720      	adds	r7, #32
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop

08001014 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <HAL_ETH_DMATxDescListInit+0x20>
 8001030:	2302      	movs	r3, #2
 8001032:	e052      	b.n	80010da <HAL_ETH_DMATxDescListInit+0xc6>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2201      	movs	r2, #1
 8001038:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2202      	movs	r2, #2
 8001040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e030      	b.n	80010b2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	015b      	lsls	r3, r3, #5
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	4413      	add	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001060:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001068:	fb02 f303 	mul.w	r3, r2, r3
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4413      	add	r3, r2
 8001070:	461a      	mov	r2, r3
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d105      	bne.n	800108a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3b01      	subs	r3, #1
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	429a      	cmp	r2, r3
 8001092:	d208      	bcs.n	80010a6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	015b      	lsls	r3, r3, #5
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	4413      	add	r3, r2
 800109e:	461a      	mov	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	e002      	b.n	80010ac <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3ca      	bcc.n	8001050 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c4:	3310      	adds	r3, #16
 80010c6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2201      	movs	r2, #1
 80010cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b087      	sub	sp, #28
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	60f8      	str	r0, [r7, #12]
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d101      	bne.n	8001106 <HAL_ETH_DMARxDescListInit+0x20>
 8001102:	2302      	movs	r3, #2
 8001104:	e056      	b.n	80011b4 <HAL_ETH_DMARxDescListInit+0xce>
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2202      	movs	r2, #2
 8001112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e034      	b.n	800118c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	015b      	lsls	r3, r3, #5
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	4413      	add	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001132:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800113a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001142:	fb02 f303 	mul.w	r3, r2, r3
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	461a      	mov	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d105      	bne.n	8001164 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	3b01      	subs	r3, #1
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	429a      	cmp	r2, r3
 800116c:	d208      	bcs.n	8001180 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	015b      	lsls	r3, r3, #5
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	4413      	add	r3, r2
 8001178:	461a      	mov	r2, r3
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	e002      	b.n	8001186 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d3c6      	bcc.n	8001122 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119e:	330c      	adds	r3, #12
 80011a0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	371c      	adds	r7, #28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_ETH_TransmitFrame+0x24>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e0cd      	b.n	8001380 <HAL_ETH_TransmitFrame+0x1c0>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2202      	movs	r2, #2
 80011f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800120a:	2301      	movs	r3, #1
 800120c:	e0b8      	b.n	8001380 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	da09      	bge.n	800122c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2212      	movs	r2, #18
 800121c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0a9      	b.n	8001380 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001232:	4293      	cmp	r3, r2
 8001234:	d915      	bls.n	8001262 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	4a54      	ldr	r2, [pc, #336]	; (800138c <HAL_ETH_TransmitFrame+0x1cc>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0a9b      	lsrs	r3, r3, #10
 8001240:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	4b51      	ldr	r3, [pc, #324]	; (800138c <HAL_ETH_TransmitFrame+0x1cc>)
 8001246:	fba3 1302 	umull	r1, r3, r3, r2
 800124a:	0a9b      	lsrs	r3, r3, #10
 800124c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001250:	fb01 f303 	mul.w	r3, r1, r3
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d005      	beq.n	8001266 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	3301      	adds	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	e001      	b.n	8001266 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001262:	2301      	movs	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d11c      	bne.n	80012a6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800127a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001286:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001292:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001296:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	461a      	mov	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80012a4:	e04b      	b.n	800133e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	e044      	b.n	8001336 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012ba:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d107      	bne.n	80012d2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012d0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012da:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3b01      	subs	r3, #1
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d116      	bne.n	8001314 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80012f4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	4a25      	ldr	r2, [pc, #148]	; (8001390 <HAL_ETH_TransmitFrame+0x1d0>)
 80012fa:	fb02 f203 	mul.w	r2, r2, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	4413      	add	r3, r2
 8001302:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001306:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001312:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800131e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001322:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	461a      	mov	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	3301      	adds	r3, #1
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	429a      	cmp	r2, r3
 800133c:	d3b6      	bcc.n	80012ac <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001346:	3314      	adds	r3, #20
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00d      	beq.n	800136e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800135a:	3314      	adds	r3, #20
 800135c:	2204      	movs	r2, #4
 800135e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001368:	3304      	adds	r3, #4
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	ac02b00b 	.word	0xac02b00b
 8001390:	fffffa0c 	.word	0xfffffa0c

08001394 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d101      	bne.n	80013ae <HAL_ETH_GetReceivedFrame+0x1a>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e070      	b.n	8001490 <HAL_ETH_GetReceivedFrame+0xfc>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2202      	movs	r2, #2
 80013ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	db5a      	blt.n	800147e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d030      	beq.n	8001438 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d103      	bne.n	80013f0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	0c1b      	lsrs	r3, r3, #16
 8001400:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001404:	3b04      	subs	r3, #4
 8001406:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	461a      	mov	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	e02b      	b.n	8001490 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001442:	2b00      	cmp	r3, #0
 8001444:	d010      	beq.n	8001468 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	461a      	mov	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	629a      	str	r2, [r3, #40]	; 0x28
 8001466:	e00a      	b.n	800147e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	461a      	mov	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	460b      	mov	r3, r1
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b82      	cmp	r3, #130	; 0x82
 80014bc:	d101      	bne.n	80014c2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80014be:	2302      	movs	r3, #2
 80014c0:	e050      	b.n	8001564 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2282      	movs	r2, #130	; 0x82
 80014c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 031c 	and.w	r3, r3, #28
 80014d8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8a1b      	ldrh	r3, [r3, #16]
 80014de:	02db      	lsls	r3, r3, #11
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80014e8:	897b      	ldrh	r3, [r7, #10]
 80014ea:	019b      	lsls	r3, r3, #6
 80014ec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f023 0302 	bic.w	r3, r3, #2
 80014fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800150e:	f7ff facf 	bl	8000ab0 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001514:	e015      	b.n	8001542 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001516:	f7ff facb 	bl	8000ab0 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001524:	d309      	bcc.n	800153a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e014      	b.n	8001564 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1e4      	bne.n	8001516 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	b29b      	uxth	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	460b      	mov	r3, r1
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b42      	cmp	r3, #66	; 0x42
 800158c:	d101      	bne.n	8001592 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800158e:	2302      	movs	r3, #2
 8001590:	e04e      	b.n	8001630 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2242      	movs	r2, #66	; 0x42
 8001596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f003 031c 	and.w	r3, r3, #28
 80015a8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8a1b      	ldrh	r3, [r3, #16]
 80015ae:	02db      	lsls	r3, r3, #11
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80015b8:	897b      	ldrh	r3, [r7, #10]
 80015ba:	019b      	lsls	r3, r3, #6
 80015bc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015e8:	f7ff fa62 	bl	8000ab0 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015ee:	e015      	b.n	800161c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80015f0:	f7ff fa5e 	bl	8000ab0 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fe:	d309      	bcc.n	8001614 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e00d      	b.n	8001630 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1e4      	bne.n	80015f0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <HAL_ETH_Start+0x16>
 800164a:	2302      	movs	r3, #2
 800164c:	e01f      	b.n	800168e <HAL_ETH_Start+0x56>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2202      	movs	r2, #2
 800165a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fb44 	bl	8001cec <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fb7b 	bl	8001d60 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fc12 	bl	8001e94 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fbaf 	bl	8001dd4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fbdc 	bl	8001e34 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_ETH_Stop+0x16>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e01f      	b.n	80016ec <HAL_ETH_Stop+0x56>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fba1 	bl	8001e04 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fbce 	bl	8001e64 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 fb66 	bl	8001d9a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 fbe0 	bl	8001e94 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 fb26 	bl	8001d26 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001708:	2b01      	cmp	r3, #1
 800170a:	d101      	bne.n	8001710 <HAL_ETH_ConfigMAC+0x1c>
 800170c:	2302      	movs	r3, #2
 800170e:	e0e4      	b.n	80018da <HAL_ETH_ConfigMAC+0x1e6>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 80b1 	beq.w	800188a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001740:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001746:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800174c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001752:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001758:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800175e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001764:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800176a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001770:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001776:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800177c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001782:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800179a:	2001      	movs	r0, #1
 800179c:	f7ff f994 	bl	8000ac8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017b0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80017b6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80017bc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80017c2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80017c8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80017ce:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80017da:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80017dc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7ff f96e 	bl	8000ac8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017fc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001806:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001816:	4013      	ands	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001824:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800182a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001830:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001836:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800183c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001854:	2001      	movs	r0, #1
 8001856:	f7ff f937 	bl	8000ac8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800187a:	2001      	movs	r0, #1
 800187c:	f7ff f924 	bl	8000ac8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	61da      	str	r2, [r3, #28]
 8001888:	e01e      	b.n	80018c8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001898:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018ba:	2001      	movs	r0, #1
 80018bc:	f7ff f904 	bl	8000ac8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	ff20810f 	.word	0xff20810f

080018e8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0b0      	sub	sp, #192	; 0xc0
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001904:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800190c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001916:	2300      	movs	r3, #0
 8001918:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d103      	bne.n	8001936 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800192e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001932:	663b      	str	r3, [r7, #96]	; 0x60
 8001934:	e001      	b.n	800193a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800193a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800193e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001944:	2300      	movs	r3, #0
 8001946:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800194c:	2300      	movs	r3, #0
 800194e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001954:	2340      	movs	r3, #64	; 0x40
 8001956:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80019bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019c0:	4bac      	ldr	r3, [pc, #688]	; (8001c74 <ETH_MACDMAConfig+0x38c>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80019c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80019ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80019cc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80019ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80019d0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80019d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80019d4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80019da:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80019dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80019de:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80019e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80019e2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80019e8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80019ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80019ec:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80019ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80019f0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80019f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80019f4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80019f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80019f8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80019fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80019fc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80019fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a02:	4313      	orrs	r3, r2
 8001a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a10:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff f853 	bl	8000ac8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a2a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a2c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a30:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001a32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001a34:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001a36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001a3a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001a40:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001a42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001a46:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001a4c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001a50:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001a58:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001a5a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f7ff f82e 	bl	8000ac8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a74:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a7e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001a88:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a98:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aa6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001aa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001aac:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001aae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ab2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001ab4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001ab8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001abe:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ac0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ac4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ac6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aca:	4313      	orrs	r3, r2
 8001acc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ad8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7fe ffef 	bl	8000ac8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001af2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001af4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001af8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f7fe ffda 	bl	8000ac8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b1c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b26:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001b2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b30:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001b42:	2304      	movs	r3, #4
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b50:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b72:	3318      	adds	r3, #24
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	; (8001c78 <ETH_MACDMAConfig+0x390>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b86:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001b88:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001b8a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001b8c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001b8e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001b90:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001b92:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001b94:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001b96:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001b98:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001b9a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001b9e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001ba2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001ba6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001ba8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bac:	4313      	orrs	r3, r2
 8001bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	3318      	adds	r3, #24
 8001bbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bc0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bca:	3318      	adds	r3, #24
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f7fe ff78 	bl	8000ac8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be0:	3318      	adds	r3, #24
 8001be2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001be6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001bec:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001bf0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001bf4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001bf8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bfc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001bfe:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001c02:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c10:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c20:	2001      	movs	r0, #1
 8001c22:	f7fe ff51 	bl	8000ac8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c32:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d10f      	bne.n	8001c5c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c44:	331c      	adds	r3, #28
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c58:	331c      	adds	r3, #28
 8001c5a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	461a      	mov	r2, r3
 8001c62:	2100      	movs	r1, #0
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f809 	bl	8001c7c <ETH_MACAddressConfig>
}
 8001c6a:	bf00      	nop
 8001c6c:	37c0      	adds	r7, #192	; 0xc0
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	ff20810f 	.word	0xff20810f
 8001c78:	f8de3f23 	.word	0xf8de3f23

08001c7c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3305      	adds	r3, #5
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	3204      	adds	r2, #4
 8001c94:	7812      	ldrb	r2, [r2, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <ETH_MACAddressConfig+0x68>)
 8001c9e:	4413      	add	r3, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3303      	adds	r3, #3
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	061a      	lsls	r2, r3, #24
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	041b      	lsls	r3, r3, #16
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <ETH_MACAddressConfig+0x6c>)
 8001cce:	4413      	add	r3, r2
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	6013      	str	r3, [r2, #0]
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40028040 	.word	0x40028040
 8001ce8:	40028044 	.word	0x40028044

08001cec <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0208 	orr.w	r2, r2, #8
 8001d06:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f000 f8e9 	bl	8001ee8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	601a      	str	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0208 	bic.w	r2, r2, #8
 8001d40:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f000 f8cc 	bl	8001ee8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	601a      	str	r2, [r3, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0204 	orr.w	r2, r2, #4
 8001d7a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d84:	2001      	movs	r0, #1
 8001d86:	f000 f8af 	bl	8001ee8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0204 	bic.w	r2, r2, #4
 8001db4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f000 f892 	bl	8001ee8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	601a      	str	r2, [r3, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de4:	3318      	adds	r3, #24
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df4:	3318      	adds	r3, #24
 8001df6:	601a      	str	r2, [r3, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e14:	3318      	adds	r3, #24
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e24:	3318      	adds	r3, #24
 8001e26:	601a      	str	r2, [r3, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e44:	3318      	adds	r3, #24
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0202 	orr.w	r2, r2, #2
 8001e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e54:	3318      	adds	r3, #24
 8001e56:	601a      	str	r2, [r3, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e74:	3318      	adds	r3, #24
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0202 	bic.w	r2, r2, #2
 8001e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e84:	3318      	adds	r3, #24
 8001e86:	601a      	str	r2, [r3, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea8:	3318      	adds	r3, #24
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb8:	3318      	adds	r3, #24
 8001eba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec4:	3318      	adds	r3, #24
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f000 f80c 	bl	8001ee8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eda:	3318      	adds	r3, #24
 8001edc:	601a      	str	r2, [r3, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ef0:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <ETH_Delay+0x34>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <ETH_Delay+0x38>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0a5b      	lsrs	r3, r3, #9
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	fb02 f303 	mul.w	r3, r2, r3
 8001f02:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001f04:	bf00      	nop
  } 
  while (Delay --);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1e5a      	subs	r2, r3, #1
 8001f0a:	60fa      	str	r2, [r7, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f9      	bne.n	8001f04 <ETH_Delay+0x1c>
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	10624dd3 	.word	0x10624dd3

08001f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	e16b      	b.n	8002218 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f40:	2201      	movs	r2, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	f040 815a 	bne.w	8002212 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d00b      	beq.n	8001f7e <HAL_GPIO_Init+0x5a>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d007      	beq.n	8001f7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f72:	2b11      	cmp	r3, #17
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d130      	bne.n	8001fe0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2203      	movs	r2, #3
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 0201 	and.w	r2, r3, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0xfc>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b12      	cmp	r3, #18
 800201e:	d123      	bne.n	8002068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	08da      	lsrs	r2, r3, #3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3208      	adds	r2, #8
 8002028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f003 0307 	and.w	r3, r3, #7
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	220f      	movs	r2, #15
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	69b9      	ldr	r1, [r7, #24]
 8002064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	2203      	movs	r2, #3
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0203 	and.w	r2, r3, #3
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 80b4 	beq.w	8002212 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b5f      	ldr	r3, [pc, #380]	; (800222c <HAL_GPIO_Init+0x308>)
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	4a5e      	ldr	r2, [pc, #376]	; (800222c <HAL_GPIO_Init+0x308>)
 80020b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ba:	4b5c      	ldr	r3, [pc, #368]	; (800222c <HAL_GPIO_Init+0x308>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c6:	4a5a      	ldr	r2, [pc, #360]	; (8002230 <HAL_GPIO_Init+0x30c>)
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3302      	adds	r3, #2
 80020ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	220f      	movs	r2, #15
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a51      	ldr	r2, [pc, #324]	; (8002234 <HAL_GPIO_Init+0x310>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d02b      	beq.n	800214a <HAL_GPIO_Init+0x226>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a50      	ldr	r2, [pc, #320]	; (8002238 <HAL_GPIO_Init+0x314>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d025      	beq.n	8002146 <HAL_GPIO_Init+0x222>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4f      	ldr	r2, [pc, #316]	; (800223c <HAL_GPIO_Init+0x318>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d01f      	beq.n	8002142 <HAL_GPIO_Init+0x21e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4e      	ldr	r2, [pc, #312]	; (8002240 <HAL_GPIO_Init+0x31c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d019      	beq.n	800213e <HAL_GPIO_Init+0x21a>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a4d      	ldr	r2, [pc, #308]	; (8002244 <HAL_GPIO_Init+0x320>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d013      	beq.n	800213a <HAL_GPIO_Init+0x216>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4c      	ldr	r2, [pc, #304]	; (8002248 <HAL_GPIO_Init+0x324>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00d      	beq.n	8002136 <HAL_GPIO_Init+0x212>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4b      	ldr	r2, [pc, #300]	; (800224c <HAL_GPIO_Init+0x328>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d007      	beq.n	8002132 <HAL_GPIO_Init+0x20e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4a      	ldr	r2, [pc, #296]	; (8002250 <HAL_GPIO_Init+0x32c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d101      	bne.n	800212e <HAL_GPIO_Init+0x20a>
 800212a:	2307      	movs	r3, #7
 800212c:	e00e      	b.n	800214c <HAL_GPIO_Init+0x228>
 800212e:	2308      	movs	r3, #8
 8002130:	e00c      	b.n	800214c <HAL_GPIO_Init+0x228>
 8002132:	2306      	movs	r3, #6
 8002134:	e00a      	b.n	800214c <HAL_GPIO_Init+0x228>
 8002136:	2305      	movs	r3, #5
 8002138:	e008      	b.n	800214c <HAL_GPIO_Init+0x228>
 800213a:	2304      	movs	r3, #4
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x228>
 800213e:	2303      	movs	r3, #3
 8002140:	e004      	b.n	800214c <HAL_GPIO_Init+0x228>
 8002142:	2302      	movs	r3, #2
 8002144:	e002      	b.n	800214c <HAL_GPIO_Init+0x228>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x228>
 800214a:	2300      	movs	r3, #0
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	f002 0203 	and.w	r2, r2, #3
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	4093      	lsls	r3, r2
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800215c:	4934      	ldr	r1, [pc, #208]	; (8002230 <HAL_GPIO_Init+0x30c>)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800216a:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_GPIO_Init+0x330>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800218e:	4a31      	ldr	r2, [pc, #196]	; (8002254 <HAL_GPIO_Init+0x330>)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002194:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <HAL_GPIO_Init+0x330>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021b8:	4a26      	ldr	r2, [pc, #152]	; (8002254 <HAL_GPIO_Init+0x330>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021be:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_GPIO_Init+0x330>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <HAL_GPIO_Init+0x330>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_GPIO_Init+0x330>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800220c:	4a11      	ldr	r2, [pc, #68]	; (8002254 <HAL_GPIO_Init+0x330>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b0f      	cmp	r3, #15
 800221c:	f67f ae90 	bls.w	8001f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002220:	bf00      	nop
 8002222:	3724      	adds	r7, #36	; 0x24
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40023800 	.word	0x40023800
 8002230:	40013800 	.word	0x40013800
 8002234:	40020000 	.word	0x40020000
 8002238:	40020400 	.word	0x40020400
 800223c:	40020800 	.word	0x40020800
 8002240:	40020c00 	.word	0x40020c00
 8002244:	40021000 	.word	0x40021000
 8002248:	40021400 	.word	0x40021400
 800224c:	40021800 	.word	0x40021800
 8002250:	40021c00 	.word	0x40021c00
 8002254:	40013c00 	.word	0x40013c00

08002258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e11f      	b.n	80024aa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fe f9f8 	bl	8000674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	; 0x24
 8002288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022bc:	f000 fd3e 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 80022c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4a7b      	ldr	r2, [pc, #492]	; (80024b4 <HAL_I2C_Init+0x25c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d807      	bhi.n	80022dc <HAL_I2C_Init+0x84>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a7a      	ldr	r2, [pc, #488]	; (80024b8 <HAL_I2C_Init+0x260>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	bf94      	ite	ls
 80022d4:	2301      	movls	r3, #1
 80022d6:	2300      	movhi	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	e006      	b.n	80022ea <HAL_I2C_Init+0x92>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4a77      	ldr	r2, [pc, #476]	; (80024bc <HAL_I2C_Init+0x264>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	bf94      	ite	ls
 80022e4:	2301      	movls	r3, #1
 80022e6:	2300      	movhi	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0db      	b.n	80024aa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a72      	ldr	r2, [pc, #456]	; (80024c0 <HAL_I2C_Init+0x268>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0c9b      	lsrs	r3, r3, #18
 80022fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	430a      	orrs	r2, r1
 8002310:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a64      	ldr	r2, [pc, #400]	; (80024b4 <HAL_I2C_Init+0x25c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d802      	bhi.n	800232c <HAL_I2C_Init+0xd4>
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3301      	adds	r3, #1
 800232a:	e009      	b.n	8002340 <HAL_I2C_Init+0xe8>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	4a63      	ldr	r2, [pc, #396]	; (80024c4 <HAL_I2C_Init+0x26c>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	099b      	lsrs	r3, r3, #6
 800233e:	3301      	adds	r3, #1
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	430b      	orrs	r3, r1
 8002346:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002352:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4956      	ldr	r1, [pc, #344]	; (80024b4 <HAL_I2C_Init+0x25c>)
 800235c:	428b      	cmp	r3, r1
 800235e:	d80d      	bhi.n	800237c <HAL_I2C_Init+0x124>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e59      	subs	r1, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fbb1 f3f3 	udiv	r3, r1, r3
 800236e:	3301      	adds	r3, #1
 8002370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002374:	2b04      	cmp	r3, #4
 8002376:	bf38      	it	cc
 8002378:	2304      	movcc	r3, #4
 800237a:	e04f      	b.n	800241c <HAL_I2C_Init+0x1c4>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d111      	bne.n	80023a8 <HAL_I2C_Init+0x150>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	440b      	add	r3, r1
 8002392:	fbb0 f3f3 	udiv	r3, r0, r3
 8002396:	3301      	adds	r3, #1
 8002398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf0c      	ite	eq
 80023a0:	2301      	moveq	r3, #1
 80023a2:	2300      	movne	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	e012      	b.n	80023ce <HAL_I2C_Init+0x176>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e58      	subs	r0, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	0099      	lsls	r1, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	3301      	adds	r3, #1
 80023c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_I2C_Init+0x17e>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e022      	b.n	800241c <HAL_I2C_Init+0x1c4>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10e      	bne.n	80023fc <HAL_I2C_Init+0x1a4>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1e58      	subs	r0, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023fa:	e00f      	b.n	800241c <HAL_I2C_Init+0x1c4>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e58      	subs	r0, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	0099      	lsls	r1, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002412:	3301      	adds	r3, #1
 8002414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	6809      	ldr	r1, [r1, #0]
 8002420:	4313      	orrs	r3, r2
 8002422:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800244a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6911      	ldr	r1, [r2, #16]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	4311      	orrs	r1, r2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	430b      	orrs	r3, r1
 800245e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	000186a0 	.word	0x000186a0
 80024b8:	001e847f 	.word	0x001e847f
 80024bc:	003d08ff 	.word	0x003d08ff
 80024c0:	431bde83 	.word	0x431bde83
 80024c4:	10624dd3 	.word	0x10624dd3

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e25b      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d075      	beq.n	80025d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e6:	4ba3      	ldr	r3, [pc, #652]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d00c      	beq.n	800250c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024f2:	4ba0      	ldr	r3, [pc, #640]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d112      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fe:	4b9d      	ldr	r3, [pc, #628]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800250a:	d10b      	bne.n	8002524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	4b99      	ldr	r3, [pc, #612]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d05b      	beq.n	80025d0 <HAL_RCC_OscConfig+0x108>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d157      	bne.n	80025d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e236      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252c:	d106      	bne.n	800253c <HAL_RCC_OscConfig+0x74>
 800252e:	4b91      	ldr	r3, [pc, #580]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a90      	ldr	r2, [pc, #576]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e01d      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x98>
 8002546:	4b8b      	ldr	r3, [pc, #556]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a8a      	ldr	r2, [pc, #552]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b88      	ldr	r3, [pc, #544]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a87      	ldr	r2, [pc, #540]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e00b      	b.n	8002578 <HAL_RCC_OscConfig+0xb0>
 8002560:	4b84      	ldr	r3, [pc, #528]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a83      	ldr	r2, [pc, #524]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b81      	ldr	r3, [pc, #516]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a80      	ldr	r2, [pc, #512]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fa96 	bl	8000ab0 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7fe fa92 	bl	8000ab0 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1fb      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	4b76      	ldr	r3, [pc, #472]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0xc0>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fa82 	bl	8000ab0 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025b0:	f7fe fa7e 	bl	8000ab0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e1e7      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	4b6c      	ldr	r3, [pc, #432]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0xe8>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d063      	beq.n	80026a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025de:	4b65      	ldr	r3, [pc, #404]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ea:	4b62      	ldr	r3, [pc, #392]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d11c      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f6:	4b5f      	ldr	r3, [pc, #380]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d116      	bne.n	8002630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002602:	4b5c      	ldr	r3, [pc, #368]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d001      	beq.n	800261a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e1bb      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261a:	4b56      	ldr	r3, [pc, #344]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4952      	ldr	r1, [pc, #328]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262e:	e03a      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002638:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <HAL_RCC_OscConfig+0x2b0>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe fa37 	bl	8000ab0 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002646:	f7fe fa33 	bl	8000ab0 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e19c      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	4b46      	ldr	r3, [pc, #280]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002664:	4b43      	ldr	r3, [pc, #268]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4940      	ldr	r1, [pc, #256]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]
 8002678:	e015      	b.n	80026a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267a:	4b3f      	ldr	r3, [pc, #252]	; (8002778 <HAL_RCC_OscConfig+0x2b0>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fa16 	bl	8000ab0 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002688:	f7fe fa12 	bl	8000ab0 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e17b      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	4b36      	ldr	r3, [pc, #216]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d030      	beq.n	8002714 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <HAL_RCC_OscConfig+0x2b4>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe f9f6 	bl	8000ab0 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c8:	f7fe f9f2 	bl	8000ab0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e15b      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	4b26      	ldr	r3, [pc, #152]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x200>
 80026e6:	e015      	b.n	8002714 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e8:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_RCC_OscConfig+0x2b4>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7fe f9df 	bl	8000ab0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f6:	f7fe f9db 	bl	8000ab0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e144      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 800270a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f0      	bne.n	80026f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80a0 	beq.w	8002862 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10f      	bne.n	8002752 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274e:	2301      	movs	r3, #1
 8002750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x2b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d121      	bne.n	80027a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275e:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_RCC_OscConfig+0x2b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a07      	ldr	r2, [pc, #28]	; (8002780 <HAL_RCC_OscConfig+0x2b8>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276a:	f7fe f9a1 	bl	8000ab0 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002770:	e011      	b.n	8002796 <HAL_RCC_OscConfig+0x2ce>
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800
 8002778:	42470000 	.word	0x42470000
 800277c:	42470e80 	.word	0x42470e80
 8002780:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002784:	f7fe f994 	bl	8000ab0 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e0fd      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002796:	4b81      	ldr	r3, [pc, #516]	; (800299c <HAL_RCC_OscConfig+0x4d4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d106      	bne.n	80027b8 <HAL_RCC_OscConfig+0x2f0>
 80027aa:	4b7d      	ldr	r3, [pc, #500]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a7c      	ldr	r2, [pc, #496]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	e01c      	b.n	80027f2 <HAL_RCC_OscConfig+0x32a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x312>
 80027c0:	4b77      	ldr	r3, [pc, #476]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80027c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c4:	4a76      	ldr	r2, [pc, #472]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80027c6:	f043 0304 	orr.w	r3, r3, #4
 80027ca:	6713      	str	r3, [r2, #112]	; 0x70
 80027cc:	4b74      	ldr	r3, [pc, #464]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a73      	ldr	r2, [pc, #460]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
 80027d8:	e00b      	b.n	80027f2 <HAL_RCC_OscConfig+0x32a>
 80027da:	4b71      	ldr	r3, [pc, #452]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	4a70      	ldr	r2, [pc, #448]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6713      	str	r3, [r2, #112]	; 0x70
 80027e6:	4b6e      	ldr	r3, [pc, #440]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a6d      	ldr	r2, [pc, #436]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d015      	beq.n	8002826 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe f959 	bl	8000ab0 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002800:	e00a      	b.n	8002818 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7fe f955 	bl	8000ab0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002810:	4293      	cmp	r3, r2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e0bc      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002818:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0ee      	beq.n	8002802 <HAL_RCC_OscConfig+0x33a>
 8002824:	e014      	b.n	8002850 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002826:	f7fe f943 	bl	8000ab0 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fe f93f 	bl	8000ab0 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e0a6      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ee      	bne.n	800282e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d105      	bne.n	8002862 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002856:	4b52      	ldr	r3, [pc, #328]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a51      	ldr	r2, [pc, #324]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 800285c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8092 	beq.w	8002990 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800286c:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b08      	cmp	r3, #8
 8002876:	d05c      	beq.n	8002932 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d141      	bne.n	8002904 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002880:	4b48      	ldr	r3, [pc, #288]	; (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002886:	f7fe f913 	bl	8000ab0 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288e:	f7fe f90f 	bl	8000ab0 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e078      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a0:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	019b      	lsls	r3, r3, #6
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	3b01      	subs	r3, #1
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	061b      	lsls	r3, r3, #24
 80028d0:	4933      	ldr	r1, [pc, #204]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d6:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7fe f8e8 	bl	8000ab0 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe f8e4 	bl	8000ab0 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e04d      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x41c>
 8002902:	e045      	b.n	8002990 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002904:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <HAL_RCC_OscConfig+0x4dc>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe f8d1 	bl	8000ab0 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe f8cd 	bl	8000ab0 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e036      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002924:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d1f0      	bne.n	8002912 <HAL_RCC_OscConfig+0x44a>
 8002930:	e02e      	b.n	8002990 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e029      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_RCC_OscConfig+0x4d8>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	429a      	cmp	r2, r3
 8002950:	d11c      	bne.n	800298c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d115      	bne.n	800298c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002966:	4013      	ands	r3, r2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800296c:	4293      	cmp	r3, r2
 800296e:	d10d      	bne.n	800298c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d106      	bne.n	800298c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40007000 	.word	0x40007000
 80029a0:	40023800 	.word	0x40023800
 80029a4:	42470060 	.word	0x42470060

080029a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0cc      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b68      	ldr	r3, [pc, #416]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d90c      	bls.n	80029e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b65      	ldr	r3, [pc, #404]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b63      	ldr	r3, [pc, #396]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e0b8      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029fc:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a58      	ldr	r2, [pc, #352]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a14:	4b53      	ldr	r3, [pc, #332]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a52      	ldr	r2, [pc, #328]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a20:	4b50      	ldr	r3, [pc, #320]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	494d      	ldr	r1, [pc, #308]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d044      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a46:	4b47      	ldr	r3, [pc, #284]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d119      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d003      	beq.n	8002a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a66:	4b3f      	ldr	r3, [pc, #252]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e06f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a76:	4b3b      	ldr	r3, [pc, #236]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e067      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4934      	ldr	r1, [pc, #208]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a98:	f7fe f80a 	bl	8000ab0 <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fe f806 	bl	8000ab0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e04f      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b2b      	ldr	r3, [pc, #172]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 030f 	and.w	r3, r3, #15
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d20c      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d001      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e032      	b.n	8002b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002afc:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4916      	ldr	r1, [pc, #88]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d009      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b1a:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	490e      	ldr	r1, [pc, #56]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b2e:	f000 f821 	bl	8002b74 <HAL_RCC_GetSysClockFreq>
 8002b32:	4601      	mov	r1, r0
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	5cd3      	ldrb	r3, [r2, r3]
 8002b42:	fa21 f303 	lsr.w	r3, r1, r3
 8002b46:	4a09      	ldr	r2, [pc, #36]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd ff6a 	bl	8000a28 <HAL_InitTick>

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023c00 	.word	0x40023c00
 8002b64:	40023800 	.word	0x40023800
 8002b68:	0800fdd8 	.word	0x0800fdd8
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000004 	.word	0x20000004

08002b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	2300      	movs	r3, #0
 8002b84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b8a:	4b63      	ldr	r3, [pc, #396]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d007      	beq.n	8002ba6 <HAL_RCC_GetSysClockFreq+0x32>
 8002b96:	2b08      	cmp	r3, #8
 8002b98:	d008      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x38>
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 80b4 	bne.w	8002d08 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ba0:	4b5e      	ldr	r3, [pc, #376]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ba2:	60bb      	str	r3, [r7, #8]
       break;
 8002ba4:	e0b3      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ba6:	4b5e      	ldr	r3, [pc, #376]	; (8002d20 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ba8:	60bb      	str	r3, [r7, #8]
      break;
 8002baa:	e0b0      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bac:	4b5a      	ldr	r3, [pc, #360]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bb6:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d04a      	beq.n	8002c58 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc2:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	099b      	lsrs	r3, r3, #6
 8002bc8:	f04f 0400 	mov.w	r4, #0
 8002bcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	ea03 0501 	and.w	r5, r3, r1
 8002bd8:	ea04 0602 	and.w	r6, r4, r2
 8002bdc:	4629      	mov	r1, r5
 8002bde:	4632      	mov	r2, r6
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	f04f 0400 	mov.w	r4, #0
 8002be8:	0154      	lsls	r4, r2, #5
 8002bea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bee:	014b      	lsls	r3, r1, #5
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	1b49      	subs	r1, r1, r5
 8002bf6:	eb62 0206 	sbc.w	r2, r2, r6
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	f04f 0400 	mov.w	r4, #0
 8002c02:	0194      	lsls	r4, r2, #6
 8002c04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c08:	018b      	lsls	r3, r1, #6
 8002c0a:	1a5b      	subs	r3, r3, r1
 8002c0c:	eb64 0402 	sbc.w	r4, r4, r2
 8002c10:	f04f 0100 	mov.w	r1, #0
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	00e2      	lsls	r2, r4, #3
 8002c1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c1e:	00d9      	lsls	r1, r3, #3
 8002c20:	460b      	mov	r3, r1
 8002c22:	4614      	mov	r4, r2
 8002c24:	195b      	adds	r3, r3, r5
 8002c26:	eb44 0406 	adc.w	r4, r4, r6
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	0262      	lsls	r2, r4, #9
 8002c34:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c38:	0259      	lsls	r1, r3, #9
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	4621      	mov	r1, r4
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f04f 0400 	mov.w	r4, #0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4623      	mov	r3, r4
 8002c4c:	f7fd fb20 	bl	8000290 <__aeabi_uldivmod>
 8002c50:	4603      	mov	r3, r0
 8002c52:	460c      	mov	r4, r1
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e049      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c58:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	f04f 0400 	mov.w	r4, #0
 8002c62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	ea03 0501 	and.w	r5, r3, r1
 8002c6e:	ea04 0602 	and.w	r6, r4, r2
 8002c72:	4629      	mov	r1, r5
 8002c74:	4632      	mov	r2, r6
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	f04f 0400 	mov.w	r4, #0
 8002c7e:	0154      	lsls	r4, r2, #5
 8002c80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c84:	014b      	lsls	r3, r1, #5
 8002c86:	4619      	mov	r1, r3
 8002c88:	4622      	mov	r2, r4
 8002c8a:	1b49      	subs	r1, r1, r5
 8002c8c:	eb62 0206 	sbc.w	r2, r2, r6
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	f04f 0400 	mov.w	r4, #0
 8002c98:	0194      	lsls	r4, r2, #6
 8002c9a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c9e:	018b      	lsls	r3, r1, #6
 8002ca0:	1a5b      	subs	r3, r3, r1
 8002ca2:	eb64 0402 	sbc.w	r4, r4, r2
 8002ca6:	f04f 0100 	mov.w	r1, #0
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	00e2      	lsls	r2, r4, #3
 8002cb0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cb4:	00d9      	lsls	r1, r3, #3
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4614      	mov	r4, r2
 8002cba:	195b      	adds	r3, r3, r5
 8002cbc:	eb44 0406 	adc.w	r4, r4, r6
 8002cc0:	f04f 0100 	mov.w	r1, #0
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	02a2      	lsls	r2, r4, #10
 8002cca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cce:	0299      	lsls	r1, r3, #10
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4614      	mov	r4, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	4621      	mov	r1, r4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f04f 0400 	mov.w	r4, #0
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4623      	mov	r3, r4
 8002ce2:	f7fd fad5 	bl	8000290 <__aeabi_uldivmod>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	460c      	mov	r4, r1
 8002cea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	60bb      	str	r3, [r7, #8]
      break;
 8002d06:	e002      	b.n	8002d0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d0a:	60bb      	str	r3, [r7, #8]
      break;
 8002d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	00f42400 	.word	0x00f42400
 8002d20:	007a1200 	.word	0x007a1200

08002d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000000 	.word	0x20000000

08002d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d40:	f7ff fff0 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d44:	4601      	mov	r1, r0
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	0a9b      	lsrs	r3, r3, #10
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	4a03      	ldr	r2, [pc, #12]	; (8002d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d52:	5cd3      	ldrb	r3, [r2, r3]
 8002d54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	0800fde8 	.word	0x0800fde8

08002d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e056      	b.n	8002e24 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d106      	bne.n	8002d96 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fd fd73 	bl	800087c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	ea42 0103 	orr.w	r1, r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	0c1b      	lsrs	r3, r3, #16
 8002df4:	f003 0104 	and.w	r1, r3, #4
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8002e32:	4b8d      	ldr	r3, [pc, #564]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002e34:	22c0      	movs	r2, #192	; 0xc0
 8002e36:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8002e38:	4b8b      	ldr	r3, [pc, #556]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002e3a:	22a8      	movs	r2, #168	; 0xa8
 8002e3c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8002e3e:	4b8a      	ldr	r3, [pc, #552]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8002e44:	4b88      	ldr	r3, [pc, #544]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002e46:	226f      	movs	r2, #111	; 0x6f
 8002e48:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8002e4a:	4b88      	ldr	r3, [pc, #544]	; (800306c <MX_LWIP_Init+0x240>)
 8002e4c:	22ff      	movs	r2, #255	; 0xff
 8002e4e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8002e50:	4b86      	ldr	r3, [pc, #536]	; (800306c <MX_LWIP_Init+0x240>)
 8002e52:	22ff      	movs	r2, #255	; 0xff
 8002e54:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8002e56:	4b85      	ldr	r3, [pc, #532]	; (800306c <MX_LWIP_Init+0x240>)
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8002e5c:	4b83      	ldr	r3, [pc, #524]	; (800306c <MX_LWIP_Init+0x240>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8002e62:	4b83      	ldr	r3, [pc, #524]	; (8003070 <MX_LWIP_Init+0x244>)
 8002e64:	22c0      	movs	r2, #192	; 0xc0
 8002e66:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8002e68:	4b81      	ldr	r3, [pc, #516]	; (8003070 <MX_LWIP_Init+0x244>)
 8002e6a:	22a8      	movs	r2, #168	; 0xa8
 8002e6c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8002e6e:	4b80      	ldr	r3, [pc, #512]	; (8003070 <MX_LWIP_Init+0x244>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002e74:	4b7e      	ldr	r3, [pc, #504]	; (8003070 <MX_LWIP_Init+0x244>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002e7a:	f000 fef9 	bl	8003c70 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002e7e:	4b7a      	ldr	r3, [pc, #488]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	061a      	lsls	r2, r3, #24
 8002e84:	4b78      	ldr	r3, [pc, #480]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002e86:	785b      	ldrb	r3, [r3, #1]
 8002e88:	041b      	lsls	r3, r3, #16
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	4b76      	ldr	r3, [pc, #472]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002e8e:	789b      	ldrb	r3, [r3, #2]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	4313      	orrs	r3, r2
 8002e94:	4a74      	ldr	r2, [pc, #464]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002e96:	78d2      	ldrb	r2, [r2, #3]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	061a      	lsls	r2, r3, #24
 8002e9c:	4b72      	ldr	r3, [pc, #456]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	0619      	lsls	r1, r3, #24
 8002ea2:	4b71      	ldr	r3, [pc, #452]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002ea4:	785b      	ldrb	r3, [r3, #1]
 8002ea6:	041b      	lsls	r3, r3, #16
 8002ea8:	4319      	orrs	r1, r3
 8002eaa:	4b6f      	ldr	r3, [pc, #444]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002eac:	789b      	ldrb	r3, [r3, #2]
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	496d      	ldr	r1, [pc, #436]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002eb4:	78c9      	ldrb	r1, [r1, #3]
 8002eb6:	430b      	orrs	r3, r1
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	4b69      	ldr	r3, [pc, #420]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	0619      	lsls	r1, r3, #24
 8002ec6:	4b68      	ldr	r3, [pc, #416]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	041b      	lsls	r3, r3, #16
 8002ecc:	4319      	orrs	r1, r3
 8002ece:	4b66      	ldr	r3, [pc, #408]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002ed0:	789b      	ldrb	r3, [r3, #2]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	4964      	ldr	r1, [pc, #400]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002ed8:	78c9      	ldrb	r1, [r1, #3]
 8002eda:	430b      	orrs	r3, r1
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	4b60      	ldr	r3, [pc, #384]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	0619      	lsls	r1, r3, #24
 8002eea:	4b5f      	ldr	r3, [pc, #380]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002eec:	785b      	ldrb	r3, [r3, #1]
 8002eee:	041b      	lsls	r3, r3, #16
 8002ef0:	4319      	orrs	r1, r3
 8002ef2:	4b5d      	ldr	r3, [pc, #372]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002ef4:	789b      	ldrb	r3, [r3, #2]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	495b      	ldr	r1, [pc, #364]	; (8003068 <MX_LWIP_Init+0x23c>)
 8002efc:	78c9      	ldrb	r1, [r1, #3]
 8002efe:	430b      	orrs	r3, r1
 8002f00:	0e1b      	lsrs	r3, r3, #24
 8002f02:	4313      	orrs	r3, r2
 8002f04:	4a5b      	ldr	r2, [pc, #364]	; (8003074 <MX_LWIP_Init+0x248>)
 8002f06:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002f08:	4b58      	ldr	r3, [pc, #352]	; (800306c <MX_LWIP_Init+0x240>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	061a      	lsls	r2, r3, #24
 8002f0e:	4b57      	ldr	r3, [pc, #348]	; (800306c <MX_LWIP_Init+0x240>)
 8002f10:	785b      	ldrb	r3, [r3, #1]
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	431a      	orrs	r2, r3
 8002f16:	4b55      	ldr	r3, [pc, #340]	; (800306c <MX_LWIP_Init+0x240>)
 8002f18:	789b      	ldrb	r3, [r3, #2]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	4a53      	ldr	r2, [pc, #332]	; (800306c <MX_LWIP_Init+0x240>)
 8002f20:	78d2      	ldrb	r2, [r2, #3]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	061a      	lsls	r2, r3, #24
 8002f26:	4b51      	ldr	r3, [pc, #324]	; (800306c <MX_LWIP_Init+0x240>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	0619      	lsls	r1, r3, #24
 8002f2c:	4b4f      	ldr	r3, [pc, #316]	; (800306c <MX_LWIP_Init+0x240>)
 8002f2e:	785b      	ldrb	r3, [r3, #1]
 8002f30:	041b      	lsls	r3, r3, #16
 8002f32:	4319      	orrs	r1, r3
 8002f34:	4b4d      	ldr	r3, [pc, #308]	; (800306c <MX_LWIP_Init+0x240>)
 8002f36:	789b      	ldrb	r3, [r3, #2]
 8002f38:	021b      	lsls	r3, r3, #8
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	494b      	ldr	r1, [pc, #300]	; (800306c <MX_LWIP_Init+0x240>)
 8002f3e:	78c9      	ldrb	r1, [r1, #3]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	4b48      	ldr	r3, [pc, #288]	; (800306c <MX_LWIP_Init+0x240>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	0619      	lsls	r1, r3, #24
 8002f50:	4b46      	ldr	r3, [pc, #280]	; (800306c <MX_LWIP_Init+0x240>)
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	041b      	lsls	r3, r3, #16
 8002f56:	4319      	orrs	r1, r3
 8002f58:	4b44      	ldr	r3, [pc, #272]	; (800306c <MX_LWIP_Init+0x240>)
 8002f5a:	789b      	ldrb	r3, [r3, #2]
 8002f5c:	021b      	lsls	r3, r3, #8
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	4942      	ldr	r1, [pc, #264]	; (800306c <MX_LWIP_Init+0x240>)
 8002f62:	78c9      	ldrb	r1, [r1, #3]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	4b3f      	ldr	r3, [pc, #252]	; (800306c <MX_LWIP_Init+0x240>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	0619      	lsls	r1, r3, #24
 8002f74:	4b3d      	ldr	r3, [pc, #244]	; (800306c <MX_LWIP_Init+0x240>)
 8002f76:	785b      	ldrb	r3, [r3, #1]
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	4319      	orrs	r1, r3
 8002f7c:	4b3b      	ldr	r3, [pc, #236]	; (800306c <MX_LWIP_Init+0x240>)
 8002f7e:	789b      	ldrb	r3, [r3, #2]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	430b      	orrs	r3, r1
 8002f84:	4939      	ldr	r1, [pc, #228]	; (800306c <MX_LWIP_Init+0x240>)
 8002f86:	78c9      	ldrb	r1, [r1, #3]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	0e1b      	lsrs	r3, r3, #24
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	4a3a      	ldr	r2, [pc, #232]	; (8003078 <MX_LWIP_Init+0x24c>)
 8002f90:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002f92:	4b37      	ldr	r3, [pc, #220]	; (8003070 <MX_LWIP_Init+0x244>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	061a      	lsls	r2, r3, #24
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <MX_LWIP_Init+0x244>)
 8002f9a:	785b      	ldrb	r3, [r3, #1]
 8002f9c:	041b      	lsls	r3, r3, #16
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	4b33      	ldr	r3, [pc, #204]	; (8003070 <MX_LWIP_Init+0x244>)
 8002fa2:	789b      	ldrb	r3, [r3, #2]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	4a31      	ldr	r2, [pc, #196]	; (8003070 <MX_LWIP_Init+0x244>)
 8002faa:	78d2      	ldrb	r2, [r2, #3]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	061a      	lsls	r2, r3, #24
 8002fb0:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <MX_LWIP_Init+0x244>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	0619      	lsls	r1, r3, #24
 8002fb6:	4b2e      	ldr	r3, [pc, #184]	; (8003070 <MX_LWIP_Init+0x244>)
 8002fb8:	785b      	ldrb	r3, [r3, #1]
 8002fba:	041b      	lsls	r3, r3, #16
 8002fbc:	4319      	orrs	r1, r3
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <MX_LWIP_Init+0x244>)
 8002fc0:	789b      	ldrb	r3, [r3, #2]
 8002fc2:	021b      	lsls	r3, r3, #8
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	492a      	ldr	r1, [pc, #168]	; (8003070 <MX_LWIP_Init+0x244>)
 8002fc8:	78c9      	ldrb	r1, [r1, #3]
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	4b26      	ldr	r3, [pc, #152]	; (8003070 <MX_LWIP_Init+0x244>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	0619      	lsls	r1, r3, #24
 8002fda:	4b25      	ldr	r3, [pc, #148]	; (8003070 <MX_LWIP_Init+0x244>)
 8002fdc:	785b      	ldrb	r3, [r3, #1]
 8002fde:	041b      	lsls	r3, r3, #16
 8002fe0:	4319      	orrs	r1, r3
 8002fe2:	4b23      	ldr	r3, [pc, #140]	; (8003070 <MX_LWIP_Init+0x244>)
 8002fe4:	789b      	ldrb	r3, [r3, #2]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	4921      	ldr	r1, [pc, #132]	; (8003070 <MX_LWIP_Init+0x244>)
 8002fec:	78c9      	ldrb	r1, [r1, #3]
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <MX_LWIP_Init+0x244>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	0619      	lsls	r1, r3, #24
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <MX_LWIP_Init+0x244>)
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	041b      	lsls	r3, r3, #16
 8003004:	4319      	orrs	r1, r3
 8003006:	4b1a      	ldr	r3, [pc, #104]	; (8003070 <MX_LWIP_Init+0x244>)
 8003008:	789b      	ldrb	r3, [r3, #2]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	430b      	orrs	r3, r1
 800300e:	4918      	ldr	r1, [pc, #96]	; (8003070 <MX_LWIP_Init+0x244>)
 8003010:	78c9      	ldrb	r1, [r1, #3]
 8003012:	430b      	orrs	r3, r1
 8003014:	0e1b      	lsrs	r3, r3, #24
 8003016:	4313      	orrs	r3, r2
 8003018:	4a18      	ldr	r2, [pc, #96]	; (800307c <MX_LWIP_Init+0x250>)
 800301a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800301c:	4b18      	ldr	r3, [pc, #96]	; (8003080 <MX_LWIP_Init+0x254>)
 800301e:	9302      	str	r3, [sp, #8]
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <MX_LWIP_Init+0x258>)
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	2300      	movs	r3, #0
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	4b14      	ldr	r3, [pc, #80]	; (800307c <MX_LWIP_Init+0x250>)
 800302a:	4a13      	ldr	r2, [pc, #76]	; (8003078 <MX_LWIP_Init+0x24c>)
 800302c:	4911      	ldr	r1, [pc, #68]	; (8003074 <MX_LWIP_Init+0x248>)
 800302e:	4816      	ldr	r0, [pc, #88]	; (8003088 <MX_LWIP_Init+0x25c>)
 8003030:	f001 fa2a 	bl	8004488 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003034:	4814      	ldr	r0, [pc, #80]	; (8003088 <MX_LWIP_Init+0x25c>)
 8003036:	f001 fb15 	bl	8004664 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <MX_LWIP_Init+0x25c>)
 800303c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003040:	089b      	lsrs	r3, r3, #2
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800304c:	480e      	ldr	r0, [pc, #56]	; (8003088 <MX_LWIP_Init+0x25c>)
 800304e:	f001 fb19 	bl	8004684 <netif_set_up>
 8003052:	e002      	b.n	800305a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003054:	480c      	ldr	r0, [pc, #48]	; (8003088 <MX_LWIP_Init+0x25c>)
 8003056:	f001 fb61 	bl	800471c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800305a:	490c      	ldr	r1, [pc, #48]	; (800308c <MX_LWIP_Init+0x260>)
 800305c:	480a      	ldr	r0, [pc, #40]	; (8003088 <MX_LWIP_Init+0x25c>)
 800305e:	f001 fb87 	bl	8004770 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	20000304 	.word	0x20000304
 800306c:	20000300 	.word	0x20000300
 8003070:	200002c0 	.word	0x200002c0
 8003074:	200002fc 	.word	0x200002fc
 8003078:	20000308 	.word	0x20000308
 800307c:	2000030c 	.word	0x2000030c
 8003080:	0800cf5d 	.word	0x0800cf5d
 8003084:	08003645 	.word	0x08003645
 8003088:	200002c4 	.word	0x200002c4
 800308c:	080036b1 	.word	0x080036b1

08003090 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003094:	4803      	ldr	r0, [pc, #12]	; (80030a4 <MX_LWIP_Process+0x14>)
 8003096:	f000 fab5 	bl	8003604 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 800309a:	f007 fc87 	bl	800a9ac <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	200002c4 	.word	0x200002c4

080030a8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08e      	sub	sp, #56	; 0x38
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a46      	ldr	r2, [pc, #280]	; (80031e0 <HAL_ETH_MspInit+0x138>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	f040 8085 	bne.w	80031d6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80030cc:	2300      	movs	r3, #0
 80030ce:	623b      	str	r3, [r7, #32]
 80030d0:	4b44      	ldr	r3, [pc, #272]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	4a43      	ldr	r2, [pc, #268]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 80030d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030da:	6313      	str	r3, [r2, #48]	; 0x30
 80030dc:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e4:	623b      	str	r3, [r7, #32]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2300      	movs	r3, #0
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	4b3d      	ldr	r3, [pc, #244]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	4a3c      	ldr	r2, [pc, #240]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 80030f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030f6:	6313      	str	r3, [r2, #48]	; 0x30
 80030f8:	4b3a      	ldr	r3, [pc, #232]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 80030fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2300      	movs	r3, #0
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	4a35      	ldr	r2, [pc, #212]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 800310e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003112:	6313      	str	r3, [r2, #48]	; 0x30
 8003114:	4b33      	ldr	r3, [pc, #204]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	4b2f      	ldr	r3, [pc, #188]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	4a2e      	ldr	r2, [pc, #184]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	6313      	str	r3, [r2, #48]	; 0x30
 8003130:	4b2c      	ldr	r3, [pc, #176]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	4b28      	ldr	r3, [pc, #160]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003144:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6313      	str	r3, [r2, #48]	; 0x30
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	4a20      	ldr	r2, [pc, #128]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 8003162:	f043 0302 	orr.w	r3, r3, #2
 8003166:	6313      	str	r3, [r2, #48]	; 0x30
 8003168:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <HAL_ETH_MspInit+0x13c>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003174:	2332      	movs	r3, #50	; 0x32
 8003176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003180:	2303      	movs	r3, #3
 8003182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003184:	230b      	movs	r3, #11
 8003186:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800318c:	4619      	mov	r1, r3
 800318e:	4816      	ldr	r0, [pc, #88]	; (80031e8 <HAL_ETH_MspInit+0x140>)
 8003190:	f7fe fec8 	bl	8001f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003194:	2386      	movs	r3, #134	; 0x86
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003198:	2302      	movs	r3, #2
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a0:	2303      	movs	r3, #3
 80031a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031a4:	230b      	movs	r3, #11
 80031a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ac:	4619      	mov	r1, r3
 80031ae:	480f      	ldr	r0, [pc, #60]	; (80031ec <HAL_ETH_MspInit+0x144>)
 80031b0:	f7fe feb8 	bl	8001f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80031b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c2:	2303      	movs	r3, #3
 80031c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80031c6:	230b      	movs	r3, #11
 80031c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ce:	4619      	mov	r1, r3
 80031d0:	4807      	ldr	r0, [pc, #28]	; (80031f0 <HAL_ETH_MspInit+0x148>)
 80031d2:	f7fe fea7 	bl	8001f24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80031d6:	bf00      	nop
 80031d8:	3738      	adds	r7, #56	; 0x38
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40028000 	.word	0x40028000
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40020800 	.word	0x40020800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400

080031f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003200:	4b52      	ldr	r3, [pc, #328]	; (800334c <low_level_init+0x158>)
 8003202:	4a53      	ldr	r2, [pc, #332]	; (8003350 <low_level_init+0x15c>)
 8003204:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 8003206:	4b51      	ldr	r3, [pc, #324]	; (800334c <low_level_init+0x158>)
 8003208:	2200      	movs	r2, #0
 800320a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800320c:	4b4f      	ldr	r3, [pc, #316]	; (800334c <low_level_init+0x158>)
 800320e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003212:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003214:	4b4d      	ldr	r3, [pc, #308]	; (800334c <low_level_init+0x158>)
 8003216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800321a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800321c:	4b4b      	ldr	r3, [pc, #300]	; (800334c <low_level_init+0x158>)
 800321e:	2201      	movs	r2, #1
 8003220:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0xD8;
 8003222:	23d8      	movs	r3, #216	; 0xd8
 8003224:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0xFC;
 8003226:	23fc      	movs	r3, #252	; 0xfc
 8003228:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x93;
 800322a:	2393      	movs	r3, #147	; 0x93
 800322c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xE4;
 800322e:	23e4      	movs	r3, #228	; 0xe4
 8003230:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0xF9;
 8003232:	23f9      	movs	r3, #249	; 0xf9
 8003234:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0xB7;
 8003236:	23b7      	movs	r3, #183	; 0xb7
 8003238:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800323a:	4a44      	ldr	r2, [pc, #272]	; (800334c <low_level_init+0x158>)
 800323c:	f107 0308 	add.w	r3, r7, #8
 8003240:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003242:	4b42      	ldr	r3, [pc, #264]	; (800334c <low_level_init+0x158>)
 8003244:	2200      	movs	r2, #0
 8003246:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003248:	4b40      	ldr	r3, [pc, #256]	; (800334c <low_level_init+0x158>)
 800324a:	2200      	movs	r2, #0
 800324c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800324e:	4b3f      	ldr	r3, [pc, #252]	; (800334c <low_level_init+0x158>)
 8003250:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003254:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003256:	483d      	ldr	r0, [pc, #244]	; (800334c <low_level_init+0x158>)
 8003258:	f7fd fd3e 	bl	8000cd8 <HAL_ETH_Init>
 800325c:	4603      	mov	r3, r0
 800325e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d108      	bne.n	8003278 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800326c:	f043 0304 	orr.w	r3, r3, #4
 8003270:	b2da      	uxtb	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003278:	2304      	movs	r3, #4
 800327a:	4a36      	ldr	r2, [pc, #216]	; (8003354 <low_level_init+0x160>)
 800327c:	4936      	ldr	r1, [pc, #216]	; (8003358 <low_level_init+0x164>)
 800327e:	4833      	ldr	r0, [pc, #204]	; (800334c <low_level_init+0x158>)
 8003280:	f7fd fec8 	bl	8001014 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003284:	2304      	movs	r3, #4
 8003286:	4a35      	ldr	r2, [pc, #212]	; (800335c <low_level_init+0x168>)
 8003288:	4935      	ldr	r1, [pc, #212]	; (8003360 <low_level_init+0x16c>)
 800328a:	4830      	ldr	r0, [pc, #192]	; (800334c <low_level_init+0x158>)
 800328c:	f7fd ff2b 	bl	80010e6 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2206      	movs	r2, #6
 8003294:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003298:	4b2c      	ldr	r3, [pc, #176]	; (800334c <low_level_init+0x158>)
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	781a      	ldrb	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80032a4:	4b29      	ldr	r3, [pc, #164]	; (800334c <low_level_init+0x158>)
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	785a      	ldrb	r2, [r3, #1]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80032b0:	4b26      	ldr	r3, [pc, #152]	; (800334c <low_level_init+0x158>)
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	789a      	ldrb	r2, [r3, #2]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80032bc:	4b23      	ldr	r3, [pc, #140]	; (800334c <low_level_init+0x158>)
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	78da      	ldrb	r2, [r3, #3]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80032c8:	4b20      	ldr	r3, [pc, #128]	; (800334c <low_level_init+0x158>)
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	791a      	ldrb	r2, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80032d4:	4b1d      	ldr	r3, [pc, #116]	; (800334c <low_level_init+0x158>)
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	795a      	ldrb	r2, [r3, #5]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80032e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80032ee:	f043 030a 	orr.w	r3, r3, #10
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80032fa:	4814      	ldr	r0, [pc, #80]	; (800334c <low_level_init+0x158>)
 80032fc:	f7fe f99c 	bl	8001638 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  
  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8003300:	f107 0310 	add.w	r3, r7, #16
 8003304:	461a      	mov	r2, r3
 8003306:	2111      	movs	r1, #17
 8003308:	4810      	ldr	r0, [pc, #64]	; (800334c <low_level_init+0x158>)
 800330a:	f7fe f8c7 	bl	800149c <HAL_ETH_ReadPHYRegister>
  
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f043 0303 	orr.w	r3, r3, #3
 8003314:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	461a      	mov	r2, r3
 800331a:	2111      	movs	r1, #17
 800331c:	480b      	ldr	r0, [pc, #44]	; (800334c <low_level_init+0x158>)
 800331e:	f7fe f925 	bl	800156c <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8003322:	f107 0310 	add.w	r3, r7, #16
 8003326:	461a      	mov	r2, r3
 8003328:	2112      	movs	r1, #18
 800332a:	4808      	ldr	r0, [pc, #32]	; (800334c <low_level_init+0x158>)
 800332c:	f7fe f8b6 	bl	800149c <HAL_ETH_ReadPHYRegister>
  
  regvalue |= PHY_MISR_LINK_INT_EN;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f043 0320 	orr.w	r3, r3, #32
 8003336:	613b      	str	r3, [r7, #16]
    
  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	461a      	mov	r2, r3
 800333c:	2112      	movs	r1, #18
 800333e:	4803      	ldr	r0, [pc, #12]	; (800334c <low_level_init+0x158>)
 8003340:	f7fe f914 	bl	800156c <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8003344:	bf00      	nop
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	20001be0 	.word	0x20001be0
 8003350:	40028000 	.word	0x40028000
 8003354:	20001c28 	.word	0x20001c28
 8003358:	20000310 	.word	0x20000310
 800335c:	20000390 	.word	0x20000390
 8003360:	20001b60 	.word	0x20001b60

08003364 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08a      	sub	sp, #40	; 0x28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800336e:	4b4b      	ldr	r3, [pc, #300]	; (800349c <low_level_output+0x138>)
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003386:	4b45      	ldr	r3, [pc, #276]	; (800349c <low_level_output+0x138>)
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	623b      	str	r3, [r7, #32]
 8003394:	e05a      	b.n	800344c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	da03      	bge.n	80033a6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800339e:	23f8      	movs	r3, #248	; 0xf8
 80033a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80033a4:	e05c      	b.n	8003460 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	895b      	ldrh	r3, [r3, #10]
 80033aa:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80033b0:	e02f      	b.n	8003412 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	18d0      	adds	r0, r2, r3
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	18d1      	adds	r1, r2, r3
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80033c6:	3304      	adds	r3, #4
 80033c8:	461a      	mov	r2, r3
 80033ca:	f009 ff00 	bl	800d1ce <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	da03      	bge.n	80033e4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80033dc:	23f8      	movs	r3, #248	; 0xf8
 80033de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80033e2:	e03d      	b.n	8003460 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80033f4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003400:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800340c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800341c:	4293      	cmp	r3, r2
 800341e:	d8c8      	bhi.n	80033b2 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	18d0      	adds	r0, r2, r3
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4413      	add	r3, r2
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	4619      	mov	r1, r3
 8003432:	f009 fecc 	bl	800d1ce <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	623b      	str	r3, [r7, #32]
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1a1      	bne.n	8003396 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003452:	6979      	ldr	r1, [r7, #20]
 8003454:	4811      	ldr	r0, [pc, #68]	; (800349c <low_level_output+0x138>)
 8003456:	f7fd feb3 	bl	80011c0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003460:	4b0e      	ldr	r3, [pc, #56]	; (800349c <low_level_output+0x138>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003468:	3314      	adds	r3, #20
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <low_level_output+0x138>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800347c:	3314      	adds	r3, #20
 800347e:	2220      	movs	r2, #32
 8003480:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <low_level_output+0x138>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800348a:	3304      	adds	r3, #4
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003490:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003494:	4618      	mov	r0, r3
 8003496:	3728      	adds	r7, #40	; 0x28
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20001be0 	.word	0x20001be0

080034a0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08c      	sub	sp, #48	; 0x30
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80034c4:	484e      	ldr	r0, [pc, #312]	; (8003600 <low_level_input+0x160>)
 80034c6:	f7fd ff65 	bl	8001394 <HAL_ETH_GetReceivedFrame>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <low_level_input+0x34>
    return NULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	e091      	b.n	80035f8 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80034d4:	4b4a      	ldr	r3, [pc, #296]	; (8003600 <low_level_input+0x160>)
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80034da:	4b49      	ldr	r3, [pc, #292]	; (8003600 <low_level_input+0x160>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80034e0:	89fb      	ldrh	r3, [r7, #14]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d006      	beq.n	80034f4 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80034e6:	89fb      	ldrh	r3, [r7, #14]
 80034e8:	2203      	movs	r2, #3
 80034ea:	4619      	mov	r1, r3
 80034ec:	2004      	movs	r0, #4
 80034ee:	f001 f981 	bl	80047f4 <pbuf_alloc>
 80034f2:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d04b      	beq.n	8003592 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80034fa:	4b41      	ldr	r3, [pc, #260]	; (8003600 <low_level_input+0x160>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
 8003508:	e040      	b.n	800358c <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	895b      	ldrh	r3, [r3, #10]
 800350e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003514:	e021      	b.n	800355a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	18d0      	adds	r0, r2, r3
 800351e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	18d1      	adds	r1, r2, r3
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800352a:	3304      	adds	r3, #4
 800352c:	461a      	mov	r2, r3
 800352e:	f009 fe4e 	bl	800d1ce <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	4413      	add	r3, r2
 8003544:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003548:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003554:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003564:	4293      	cmp	r3, r2
 8003566:	d8d6      	bhi.n	8003516 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	18d0      	adds	r0, r2, r3
 8003570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	4413      	add	r3, r2
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4619      	mov	r1, r3
 800357a:	f009 fe28 	bl	800d1ce <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	4413      	add	r3, r2
 8003584:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	62bb      	str	r3, [r7, #40]	; 0x28
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1bb      	bne.n	800350a <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <low_level_input+0x160>)
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	e00b      	b.n	80035b6 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	3301      	adds	r3, #1
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <low_level_input+0x160>)
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d3ee      	bcc.n	800359e <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <low_level_input+0x160>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80035c6:	4b0e      	ldr	r3, [pc, #56]	; (8003600 <low_level_input+0x160>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035ce:	3314      	adds	r3, #20
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00d      	beq.n	80035f6 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80035da:	4b09      	ldr	r3, [pc, #36]	; (8003600 <low_level_input+0x160>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035e2:	3314      	adds	r3, #20
 80035e4:	2280      	movs	r2, #128	; 0x80
 80035e6:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <low_level_input+0x160>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f0:	3308      	adds	r3, #8
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
  }
  return p;
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3730      	adds	r7, #48	; 0x30
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20001be0 	.word	0x20001be0

08003604 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f7ff ff47 	bl	80034a0 <low_level_input>
 8003612:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d010      	beq.n	800363c <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	4798      	blx	r3
 8003624:	4603      	mov	r3, r0
 8003626:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8003628:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d006      	beq.n	800363e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f001 fc53 	bl	8004edc <pbuf_free>
    p = NULL;    
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e000      	b.n	800363e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800363c:	bf00      	nop
  }
}
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <ethernetif_init+0x1c>
 8003652:	4b0e      	ldr	r3, [pc, #56]	; (800368c <ethernetif_init+0x48>)
 8003654:	f240 220e 	movw	r2, #526	; 0x20e
 8003658:	490d      	ldr	r1, [pc, #52]	; (8003690 <ethernetif_init+0x4c>)
 800365a:	480e      	ldr	r0, [pc, #56]	; (8003694 <ethernetif_init+0x50>)
 800365c:	f009 fdca 	bl	800d1f4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2273      	movs	r2, #115	; 0x73
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->name[1] = IFNAME1;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2274      	movs	r2, #116	; 0x74
 800366c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a09      	ldr	r2, [pc, #36]	; (8003698 <ethernetif_init+0x54>)
 8003674:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a08      	ldr	r2, [pc, #32]	; (800369c <ethernetif_init+0x58>)
 800367a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fdb9 	bl	80031f4 <low_level_init>

  return ERR_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	0800e07c 	.word	0x0800e07c
 8003690:	0800e098 	.word	0x0800e098
 8003694:	0800e0a8 	.word	0x0800e0a8
 8003698:	0800b541 	.word	0x0800b541
 800369c:	08003365 	.word	0x08003365

080036a0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80036a4:	f7fd fa04 	bl	8000ab0 <HAL_GetTick>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	60bb      	str	r3, [r7, #8]
  
  if(netif_is_link_up(netif))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80036c6:	089b      	lsrs	r3, r3, #2
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d05d      	beq.n	800378e <ethernetif_update_config+0xde>
  { 
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80036d2:	4b34      	ldr	r3, [pc, #208]	; (80037a4 <ethernetif_update_config+0xf4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d03f      	beq.n	800375a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80036da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036de:	2100      	movs	r1, #0
 80036e0:	4830      	ldr	r0, [pc, #192]	; (80037a4 <ethernetif_update_config+0xf4>)
 80036e2:	f7fd ff43 	bl	800156c <HAL_ETH_WritePHYRegister>
      
      /* Get tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fd f9e3 	bl	8000ab0 <HAL_GetTick>
 80036ea:	4603      	mov	r3, r0
 80036ec:	60fb      	str	r3, [r7, #12]
      
      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	461a      	mov	r2, r3
 80036f4:	2101      	movs	r1, #1
 80036f6:	482b      	ldr	r0, [pc, #172]	; (80037a4 <ethernetif_update_config+0xf4>)
 80036f8:	f7fd fed0 	bl	800149c <HAL_ETH_ReadPHYRegister>
        
        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80036fc:	f7fd f9d8 	bl	8000ab0 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800370a:	d828      	bhi.n	800375e <ethernetif_update_config+0xae>
        {     
          /* In case of timeout */ 
          goto error;
        }   
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0eb      	beq.n	80036ee <ethernetif_update_config+0x3e>
      
      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003716:	f107 0308 	add.w	r3, r7, #8
 800371a:	461a      	mov	r2, r3
 800371c:	211f      	movs	r1, #31
 800371e:	4821      	ldr	r0, [pc, #132]	; (80037a4 <ethernetif_update_config+0xf4>)
 8003720:	f7fd febc 	bl	800149c <HAL_ETH_ReadPHYRegister>
      
      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;  
 800372e:	4b1d      	ldr	r3, [pc, #116]	; (80037a4 <ethernetif_update_config+0xf4>)
 8003730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	e002      	b.n	800373e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003738:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <ethernetif_update_config+0xf4>)
 800373a:	2200      	movs	r2, #0
 800373c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <ethernetif_update_config+0xa0>
      {  
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M; 
 8003748:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <ethernetif_update_config+0xf4>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
 800374e:	e016      	b.n	800377e <ethernetif_update_config+0xce>
      }
      else
      {   
        /* Set Ethernet speed to 100M following the auto-negotiation */ 
        heth.Init.Speed = ETH_SPEED_100M;
 8003750:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <ethernetif_update_config+0xf4>)
 8003752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	e011      	b.n	800377e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <ethernetif_update_config+0xb0>
          goto error;
 800375e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
      
      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003760:	4b10      	ldr	r3, [pc, #64]	; (80037a4 <ethernetif_update_config+0xf4>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	08db      	lsrs	r3, r3, #3
 8003766:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1))); 
 8003768:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <ethernetif_update_config+0xf4>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003770:	4313      	orrs	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	2100      	movs	r1, #0
 8003778:	480a      	ldr	r0, [pc, #40]	; (80037a4 <ethernetif_update_config+0xf4>)
 800377a:	f7fd fef7 	bl	800156c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800377e:	2100      	movs	r1, #0
 8003780:	4808      	ldr	r0, [pc, #32]	; (80037a4 <ethernetif_update_config+0xf4>)
 8003782:	f7fd ffb7 	bl	80016f4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);   
 8003786:	4807      	ldr	r0, [pc, #28]	; (80037a4 <ethernetif_update_config+0xf4>)
 8003788:	f7fd ff56 	bl	8001638 <HAL_ETH_Start>
 800378c:	e002      	b.n	8003794 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800378e:	4805      	ldr	r0, [pc, #20]	; (80037a4 <ethernetif_update_config+0xf4>)
 8003790:	f7fd ff81 	bl	8001696 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f807 	bl	80037a8 <ethernetif_notify_conn_changed>
}
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20001be0 	.word	0x20001be0

080037a8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */

}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <tcp_server_init>:
 */

#include "tcp_server.h"

void tcp_server_init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0

	tcp_server_pcb = tcp_new();
 80037c2:	f003 f81b 	bl	80067fc <tcp_new>
 80037c6:	4602      	mov	r2, r0
 80037c8:	4b16      	ldr	r3, [pc, #88]	; (8003824 <tcp_server_init+0x68>)
 80037ca:	601a      	str	r2, [r3, #0]

	if (tcp_server_pcb != NULL)
 80037cc:	4b15      	ldr	r3, [pc, #84]	; (8003824 <tcp_server_init+0x68>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d023      	beq.n	800381c <tcp_server_init+0x60>
	{
		err_t err;
		err = tcp_bind(tcp_server_pcb, IP_ADDR_ANY, 1460);
 80037d4:	4b13      	ldr	r3, [pc, #76]	; (8003824 <tcp_server_init+0x68>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f240 52b4 	movw	r2, #1460	; 0x5b4
 80037dc:	4912      	ldr	r1, [pc, #72]	; (8003828 <tcp_server_init+0x6c>)
 80037de:	4618      	mov	r0, r3
 80037e0:	f002 f88c 	bl	80058fc <tcp_bind>
 80037e4:	4603      	mov	r3, r0
 80037e6:	71fb      	strb	r3, [r7, #7]

		if (err == ERR_OK)
 80037e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d10f      	bne.n	8003810 <tcp_server_init+0x54>
		{
			/* TCP Listening */
			tcp_server_pcb = tcp_listen(tcp_server_pcb);
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <tcp_server_init+0x68>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	21ff      	movs	r1, #255	; 0xff
 80037f6:	4618      	mov	r0, r3
 80037f8:	f002 f922 	bl	8005a40 <tcp_listen_with_backlog>
 80037fc:	4602      	mov	r2, r0
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <tcp_server_init+0x68>)
 8003800:	601a      	str	r2, [r3, #0]
			/* Define Callback Function if a client is Connected */
			tcp_accept(tcp_server_pcb, tcp_server_accept);
 8003802:	4b08      	ldr	r3, [pc, #32]	; (8003824 <tcp_server_init+0x68>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4909      	ldr	r1, [pc, #36]	; (800382c <tcp_server_init+0x70>)
 8003808:	4618      	mov	r0, r3
 800380a:	f003 f875 	bl	80068f8 <tcp_accept>
		{
			/* deallocate the pcb */
			memp_free(MEMP_TCP_PCB, tcp_server_pcb);
		}
	}
}
 800380e:	e005      	b.n	800381c <tcp_server_init+0x60>
			memp_free(MEMP_TCP_PCB, tcp_server_pcb);
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <tcp_server_init+0x68>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4619      	mov	r1, r3
 8003816:	2001      	movs	r0, #1
 8003818:	f000 fe04 	bl	8004424 <memp_free>
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000260 	.word	0x20000260
 8003828:	0800fec0 	.word	0x0800fec0
 800382c:	08003831 	.word	0x08003831

08003830 <tcp_server_accept>:

static err_t tcp_server_accept(void *arg, struct tcp_pcb *accept_pcb, err_t err)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	71fb      	strb	r3, [r7, #7]

	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(err);

	/* set priority for the newly accepted tcp connection accept_pcb */
	tcp_setprio(accept_pcb, TCP_PRIO_MIN);
 800383e:	2101      	movs	r1, #1
 8003840:	68b8      	ldr	r0, [r7, #8]
 8003842:	f002 fe4f 	bl	80064e4 <tcp_setprio>

	/* allocate structure es to maintain tcp connection informations */
	es = (struct tcp_server_struct *) mem_malloc(
 8003846:	200c      	movs	r0, #12
 8003848:	f000 fc40 	bl	80040cc <mem_malloc>
 800384c:	6178      	str	r0, [r7, #20]
			sizeof(struct tcp_server_struct));

	if (es != NULL)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d02a      	beq.n	80038aa <tcp_server_accept+0x7a>
	{
		es->state = ES_RECEIVED;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2202      	movs	r2, #2
 8003858:	701a      	strb	r2, [r3, #0]
		es->pcb = accept_pcb;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	605a      	str	r2, [r3, #4]
		es->p = NULL;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]

		/* pass newly allocated es structure as argument to accept_pcb */
		tcp_nagle_disable(accept_pcb);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	7e9b      	ldrb	r3, [r3, #26]
 800386a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800386e:	b2da      	uxtb	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	769a      	strb	r2, [r3, #26]
		tcp_arg(accept_pcb, es);
 8003874:	6979      	ldr	r1, [r7, #20]
 8003876:	68b8      	ldr	r0, [r7, #8]
 8003878:	f002 ffc8 	bl	800680c <tcp_arg>

		tcp_sent(accept_pcb, tcp_server_sent);
 800387c:	490d      	ldr	r1, [pc, #52]	; (80038b4 <tcp_server_accept+0x84>)
 800387e:	68b8      	ldr	r0, [r7, #8]
 8003880:	f002 fff8 	bl	8006874 <tcp_sent>

		tcp_recv(accept_pcb, tcp_server_recv);
 8003884:	490c      	ldr	r1, [pc, #48]	; (80038b8 <tcp_server_accept+0x88>)
 8003886:	68b8      	ldr	r0, [r7, #8]
 8003888:	f002 ffd2 	bl	8006830 <tcp_recv>

		/* initialize lwip tcp_err callback function for accept_pcb  */
		tcp_err(accept_pcb, tcp_server_error);
 800388c:	490b      	ldr	r1, [pc, #44]	; (80038bc <tcp_server_accept+0x8c>)
 800388e:	68b8      	ldr	r0, [r7, #8]
 8003890:	f003 f810 	bl	80068b4 <tcp_err>

		tcp_poll(accept_pcb, tcp_server_poll, 1);
 8003894:	2201      	movs	r2, #1
 8003896:	490a      	ldr	r1, [pc, #40]	; (80038c0 <tcp_server_accept+0x90>)
 8003898:	68b8      	ldr	r0, [r7, #8]
 800389a:	f003 f845 	bl	8006928 <tcp_poll>

		/* send data */
		tcp_server_send(accept_pcb, es);
 800389e:	6979      	ldr	r1, [r7, #20]
 80038a0:	68b8      	ldr	r0, [r7, #8]
 80038a2:	f000 f8ef 	bl	8003a84 <tcp_server_send>

		ret_err = ERR_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	74fb      	strb	r3, [r7, #19]
	}
}
 80038aa:	bf00      	nop
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	08003b21 	.word	0x08003b21
 80038b8:	080038c5 	.word	0x080038c5
 80038bc:	08003bff 	.word	0x08003bff
 80038c0:	08003b5f 	.word	0x08003b5f

080038c4 <tcp_server_recv>:

static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p,
		err_t err)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b096      	sub	sp, #88	; 0x58
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	70fb      	strb	r3, [r7, #3]

	struct tcp_server_struct *es;

	err_t ret_err;
	char cp[50];
	char *recv_buf = '\0';
 80038d2:	2300      	movs	r3, #0
 80038d4:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t len;

	LWIP_ASSERT("arg != NULL", arg != NULL);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d105      	bne.n	80038e8 <tcp_server_recv+0x24>
 80038dc:	4b5f      	ldr	r3, [pc, #380]	; (8003a5c <tcp_server_recv+0x198>)
 80038de:	225a      	movs	r2, #90	; 0x5a
 80038e0:	495f      	ldr	r1, [pc, #380]	; (8003a60 <tcp_server_recv+0x19c>)
 80038e2:	4860      	ldr	r0, [pc, #384]	; (8003a64 <tcp_server_recv+0x1a0>)
 80038e4:	f009 fc86 	bl	800d1f4 <iprintf>

	es = (struct tcp_server_struct *) arg;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* if we receive an empty tcp frame from client => close connection */
	if (p == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d117      	bne.n	8003922 <tcp_server_recv+0x5e>
	{
		/* remote host closed connection */
		es->state = ES_CLOSING;
 80038f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f4:	2203      	movs	r2, #3
 80038f6:	701a      	strb	r2, [r3, #0]
		if (es->p == NULL)
 80038f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d104      	bne.n	800390a <tcp_server_recv+0x46>
		{
			/* we're done sending, close connection */
			tcp_server_connection_close(tpcb, es);
 8003900:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003902:	68b8      	ldr	r0, [r7, #8]
 8003904:	f000 f954 	bl	8003bb0 <tcp_server_connection_close>
 8003908:	e007      	b.n	800391a <tcp_server_recv+0x56>
		}
		else
		{
			/* we're not done yet */
			/* acknowledge received packet */
			tcp_sent(tpcb, tcp_server_sent);
 800390a:	4957      	ldr	r1, [pc, #348]	; (8003a68 <tcp_server_recv+0x1a4>)
 800390c:	68b8      	ldr	r0, [r7, #8]
 800390e:	f002 ffb1 	bl	8006874 <tcp_sent>

			/* send remaining data*/
			tcp_server_send(tpcb, es);
 8003912:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003914:	68b8      	ldr	r0, [r7, #8]
 8003916:	f000 f8b5 	bl	8003a84 <tcp_server_send>
		}
		ret_err = ERR_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003920:	e095      	b.n	8003a4e <tcp_server_recv+0x18a>
	}

	/* else : a non empty frame was received from client but for some reason err != ERR_OK */
	else if (err != ERR_OK)
 8003922:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00c      	beq.n	8003944 <tcp_server_recv+0x80>
	{
		/* free received pbuf*/
		if (p != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <tcp_server_recv+0x78>
		{
			es->p = NULL;
 8003930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
			pbuf_free(p);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f001 fad0 	bl	8004edc <pbuf_free>
		}
		ret_err = err;
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003942:	e084      	b.n	8003a4e <tcp_server_recv+0x18a>
	}
	else if (es->state == ES_ACCEPTED)
 8003944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d10a      	bne.n	8003962 <tcp_server_recv+0x9e>
	{
		es->state = ES_RECEIVED;
 800394c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800394e:	2202      	movs	r2, #2
 8003950:	701a      	strb	r2, [r3, #0]
		/* store reference to incoming pbuf (chain) */
		es->p = p;
 8003952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	609a      	str	r2, [r3, #8]

		/* initialize LwIP tcp_sent callback function */
		tcp_sent(tpcb, tcp_server_sent);
 8003958:	4943      	ldr	r1, [pc, #268]	; (8003a68 <tcp_server_recv+0x1a4>)
 800395a:	68b8      	ldr	r0, [r7, #8]
 800395c:	f002 ff8a 	bl	8006874 <tcp_sent>
 8003960:	e075      	b.n	8003a4e <tcp_server_recv+0x18a>

	}

	else if (es->state == ES_RECEIVED)
 8003962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b02      	cmp	r3, #2
 8003968:	d162      	bne.n	8003a30 <tcp_server_recv+0x16c>
	{
		/* more data received from client and previous data has been already sent*/
		if (es->p == NULL)
 800396a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d153      	bne.n	8003a1a <tcp_server_recv+0x156>
		{
			recv_buf = p->payload;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	653b      	str	r3, [r7, #80]	; 0x50
			len = p->len;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	895b      	ldrh	r3, [r3, #10]
 800397c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			strncpy(cp, recv_buf, p->len);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	895b      	ldrh	r3, [r3, #10]
 8003984:	461a      	mov	r2, r3
 8003986:	f107 0314 	add.w	r3, r7, #20
 800398a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800398c:	4618      	mov	r0, r3
 800398e:	f009 fc49 	bl	800d224 <strncpy>
			cp[len] ='\0';
 8003992:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003996:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800399a:	4413      	add	r3, r2
 800399c:	2200      	movs	r2, #0
 800399e:	f803 2c44 	strb.w	r2, [r3, #-68]

			if (strcmp(cp, "command01") == 0)
 80039a2:	f107 0314 	add.w	r3, r7, #20
 80039a6:	4931      	ldr	r1, [pc, #196]	; (8003a6c <tcp_server_recv+0x1a8>)
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fc fc11 	bl	80001d0 <strcmp>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <tcp_server_recv+0xfe>
			{
				tcp_write(tpcb, "recv command01", sizeof("recv command01"),
 80039b4:	2301      	movs	r3, #1
 80039b6:	220f      	movs	r2, #15
 80039b8:	492d      	ldr	r1, [pc, #180]	; (8003a70 <tcp_server_recv+0x1ac>)
 80039ba:	68b8      	ldr	r0, [r7, #8]
 80039bc:	f005 fd68 	bl	8009490 <tcp_write>
 80039c0:	e027      	b.n	8003a12 <tcp_server_recv+0x14e>
						TCP_WRITE_FLAG_COPY);
			}
			else if (strcmp(cp, "command02") == 0)
 80039c2:	f107 0314 	add.w	r3, r7, #20
 80039c6:	492b      	ldr	r1, [pc, #172]	; (8003a74 <tcp_server_recv+0x1b0>)
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fc fc01 	bl	80001d0 <strcmp>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <tcp_server_recv+0x11e>
			{
				tcp_write(tpcb, "recv command02", sizeof("recv command02"),
 80039d4:	2301      	movs	r3, #1
 80039d6:	220f      	movs	r2, #15
 80039d8:	4927      	ldr	r1, [pc, #156]	; (8003a78 <tcp_server_recv+0x1b4>)
 80039da:	68b8      	ldr	r0, [r7, #8]
 80039dc:	f005 fd58 	bl	8009490 <tcp_write>
 80039e0:	e017      	b.n	8003a12 <tcp_server_recv+0x14e>
						TCP_WRITE_FLAG_COPY);
			}

			else if (strcmp(cp, "command03") == 0)
 80039e2:	f107 0314 	add.w	r3, r7, #20
 80039e6:	4925      	ldr	r1, [pc, #148]	; (8003a7c <tcp_server_recv+0x1b8>)
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fc fbf1 	bl	80001d0 <strcmp>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d106      	bne.n	8003a02 <tcp_server_recv+0x13e>
			{
				tcp_write(tpcb, "recv command03", sizeof("recv command03"),
 80039f4:	2301      	movs	r3, #1
 80039f6:	220f      	movs	r2, #15
 80039f8:	4921      	ldr	r1, [pc, #132]	; (8003a80 <tcp_server_recv+0x1bc>)
 80039fa:	68b8      	ldr	r0, [r7, #8]
 80039fc:	f005 fd48 	bl	8009490 <tcp_write>
 8003a00:	e007      	b.n	8003a12 <tcp_server_recv+0x14e>
						TCP_WRITE_FLAG_COPY);
			}

			else
			{
				tcp_write(tpcb, p->payload, p->len, 1);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	895a      	ldrh	r2, [r3, #10]
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	68b8      	ldr	r0, [r7, #8]
 8003a0e:	f005 fd3f 	bl	8009490 <tcp_write>
			}

			pbuf_free(p);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f001 fa62 	bl	8004edc <pbuf_free>
 8003a18:	e006      	b.n	8003a28 <tcp_server_recv+0x164>
		else
		{

			struct pbuf *ptr;
			/* chain pbufs to the end of what we recv'ed previously  */
			ptr = es->p;
 8003a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	64bb      	str	r3, [r7, #72]	; 0x48
			pbuf_chain(ptr, p);
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003a24:	f001 fb7e 	bl	8005124 <pbuf_chain>
		}
		ret_err = ERR_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8003a2e:	e00e      	b.n	8003a4e <tcp_server_recv+0x18a>

	/* data received when connection already closed */
	else
	{
		/* Acknowledge data reception */
		tcp_recved(tpcb, p->tot_len);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	891b      	ldrh	r3, [r3, #8]
 8003a34:	4619      	mov	r1, r3
 8003a36:	68b8      	ldr	r0, [r7, #8]
 8003a38:	f002 f8fa 	bl	8005c30 <tcp_recved>

		/* free pbuf and do nothing */
		es->p = NULL;
 8003a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
		pbuf_free(p);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f001 fa4a 	bl	8004edc <pbuf_free>
		ret_err = ERR_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	return ret_err;
 8003a4e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3758      	adds	r7, #88	; 0x58
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	0800e0d0 	.word	0x0800e0d0
 8003a60:	0800e0ec 	.word	0x0800e0ec
 8003a64:	0800e0f8 	.word	0x0800e0f8
 8003a68:	08003b21 	.word	0x08003b21
 8003a6c:	0800e120 	.word	0x0800e120
 8003a70:	0800e12c 	.word	0x0800e12c
 8003a74:	0800e13c 	.word	0x0800e13c
 8003a78:	0800e148 	.word	0x0800e148
 8003a7c:	0800e158 	.word	0x0800e158
 8003a80:	0800e164 	.word	0x0800e164

08003a84 <tcp_server_send>:

static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]

	struct pbuf *ptr;
	err_t wr_err = ERR_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	75fb      	strb	r3, [r7, #23]

	while ((wr_err == ERR_OK) && (es->p != NULL)
 8003a92:	e031      	b.n	8003af8 <tcp_server_send+0x74>
			&& (es->p->len <= tcp_sndbuf(tpcb)))
	{

		/* get pointer on pbuf from es structure */
		ptr = es->p;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	613b      	str	r3, [r7, #16]

		/* enqueue data for transmission */

		wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	6859      	ldr	r1, [r3, #4]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	895a      	ldrh	r2, [r3, #10]
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f005 fcf3 	bl	8009490 <tcp_write>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	75fb      	strb	r3, [r7, #23]

		if (wr_err == ERR_OK)
 8003aae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d118      	bne.n	8003ae8 <tcp_server_send+0x64>
		{
			u16_t plen;

			plen = ptr->len;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	895b      	ldrh	r3, [r3, #10]
 8003aba:	81fb      	strh	r3, [r7, #14]

			/* continue with next pbuf in chain (if any) */

			es->p = ptr->next;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	609a      	str	r2, [r3, #8]

			if (es->p != NULL)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d004      	beq.n	8003ad6 <tcp_server_send+0x52>
			{
				/* increment reference count for es->p */
				pbuf_ref(es->p);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f001 faaf 	bl	8005034 <pbuf_ref>
			}

			/* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
			pbuf_free(ptr);
 8003ad6:	6938      	ldr	r0, [r7, #16]
 8003ad8:	f001 fa00 	bl	8004edc <pbuf_free>

			/* Update tcp window size to be advertized : should be called when received
			 data (with the amount plen) has been processed by the application layer */
			tcp_recved(tpcb, plen);
 8003adc:	89fb      	ldrh	r3, [r7, #14]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f002 f8a5 	bl	8005c30 <tcp_recved>
 8003ae6:	e007      	b.n	8003af8 <tcp_server_send+0x74>

		}
		else if (wr_err == ERR_MEM)
 8003ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d102      	bne.n	8003af8 <tcp_server_send+0x74>
		{
			/* we are low on memory, try later / harder, defer to poll */
			es->p = ptr;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	609a      	str	r2, [r3, #8]
	while ((wr_err == ERR_OK) && (es->p != NULL)
 8003af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <tcp_server_send+0x94>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <tcp_server_send+0x94>
			&& (es->p->len <= tcp_sndbuf(tpcb)))
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	895a      	ldrh	r2, [r3, #10]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d9bd      	bls.n	8003a94 <tcp_server_send+0x10>
		else
		{
			/* other problem ?? */
		}
	}
}
 8003b18:	bf00      	nop
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <tcp_server_sent>:

static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]

	struct tcp_server_struct *es;

	LWIP_UNUSED_ARG(len);

	es = (struct tcp_server_struct *) arg;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	617b      	str	r3, [r7, #20]

	if (es->p != NULL)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <tcp_server_sent+0x24>
	{
		/* still got pbufs to send */
		tcp_server_send(tpcb, es);
 8003b3a:	6979      	ldr	r1, [r7, #20]
 8003b3c:	68b8      	ldr	r0, [r7, #8]
 8003b3e:	f7ff ffa1 	bl	8003a84 <tcp_server_send>
 8003b42:	e007      	b.n	8003b54 <tcp_server_sent+0x34>
	else
	{
		//FPGA_data(tpcb);

		/* if no more data to send and client closed connection*/
		if (es->state == ES_CLOSING)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b03      	cmp	r3, #3
 8003b4a:	d103      	bne.n	8003b54 <tcp_server_sent+0x34>
			tcp_server_connection_close(tpcb, es);
 8003b4c:	6979      	ldr	r1, [r7, #20]
 8003b4e:	68b8      	ldr	r0, [r7, #8]
 8003b50:	f000 f82e 	bl	8003bb0 <tcp_server_connection_close>
	}
	return ERR_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <tcp_server_poll>:

static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
	err_t ret_err;
	struct tcp_server_struct *es;

	es = (struct tcp_server_struct *) arg;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60bb      	str	r3, [r7, #8]

	if (es != NULL)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d013      	beq.n	8003b9a <tcp_server_poll+0x3c>
	{

		if (es->p != NULL)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <tcp_server_poll+0x26>
		{
			/* there is a remaining pbuf (chain) , try to send data */
			tcp_server_send(tpcb, es);
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	6838      	ldr	r0, [r7, #0]
 8003b7e:	f7ff ff81 	bl	8003a84 <tcp_server_send>
 8003b82:	e007      	b.n	8003b94 <tcp_server_poll+0x36>
		}
		else
		{

			/* no remaining pbuf (chain)  */
			if (es->state == ES_CLOSING)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d103      	bne.n	8003b94 <tcp_server_poll+0x36>
			{
				/*  close tcp connection */
				tcp_server_connection_close(tpcb, es);
 8003b8c:	68b9      	ldr	r1, [r7, #8]
 8003b8e:	6838      	ldr	r0, [r7, #0]
 8003b90:	f000 f80e 	bl	8003bb0 <tcp_server_connection_close>
			}
		}
		ret_err = ERR_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	e004      	b.n	8003ba4 <tcp_server_poll+0x46>
	}

	else
	{
		/* nothing to be done */
		tcp_abort(tpcb);
 8003b9a:	6838      	ldr	r0, [r7, #0]
 8003b9c:	f001 fea2 	bl	80058e4 <tcp_abort>
		ret_err = ERR_ABRT;
 8003ba0:	23f3      	movs	r3, #243	; 0xf3
 8003ba2:	73fb      	strb	r3, [r7, #15]
	}
	return ret_err;
 8003ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <tcp_server_connection_close>:
 * param  	es		: pointer on echo_state structure
 * retval 	None
 */
static void tcp_server_connection_close(struct tcp_pcb *tpcb,
		struct tcp_server_struct *es)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]

	/* remove all callbacks */
	tcp_arg(tpcb, NULL);
 8003bba:	2100      	movs	r1, #0
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f002 fe25 	bl	800680c <tcp_arg>
	tcp_sent(tpcb, NULL);
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f002 fe55 	bl	8006874 <tcp_sent>
	tcp_recv(tpcb, NULL);
 8003bca:	2100      	movs	r1, #0
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f002 fe2f 	bl	8006830 <tcp_recv>
	tcp_err(tpcb, NULL);
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f002 fe6d 	bl	80068b4 <tcp_err>
	tcp_poll(tpcb, NULL, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2100      	movs	r1, #0
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f002 fea2 	bl	8006928 <tcp_poll>

	/* delete es structure */
	if (es != NULL)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <tcp_server_connection_close+0x40>
	{
		mem_free(es);
 8003bea:	6838      	ldr	r0, [r7, #0]
 8003bec:	f000 f92e 	bl	8003e4c <mem_free>
	}

	/* close tcp connection */
	tcp_close(tpcb);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f001 fdad 	bl	8005750 <tcp_close>
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <tcp_server_error>:
 * param  	err	: not used
 * retval 	None
 */

static void tcp_server_error(void *arg, err_t err)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	460b      	mov	r3, r1
 8003c08:	70fb      	strb	r3, [r7, #3]
	struct tcp_server_struct *es;

	LWIP_UNUSED_ARG(err);

	es = (struct tcp_server_struct *) arg;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
	if (es != NULL)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <tcp_server_error+0x1c>
	{
		/*  free es structure */
		mem_free(es);
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f919 	bl	8003e4c <mem_free>
	}
}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	4603      	mov	r3, r0
 8003c2a:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	ba5b      	rev16	r3, r3
 8003c30:	b29b      	uxth	r3, r3
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	061a      	lsls	r2, r3, #24
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	0e1b      	lsrs	r3, r3, #24
 8003c62:	4313      	orrs	r3, r2
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003c7a:	f000 f8a9 	bl	8003dd0 <mem_init>
  memp_init();
 8003c7e:	f000 fb41 	bl	8004304 <memp_init>
  pbuf_init();
  netif_init();
 8003c82:	f000 fbf9 	bl	8004478 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003c86:	f006 fee3 	bl	800aa50 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003c8a:	f001 fba1 	bl	80053d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8003c8e:	f006 fdc1 	bl	800a814 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003ca4:	4b41      	ldr	r3, [pc, #260]	; (8003dac <plug_holes+0x110>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d206      	bcs.n	8003cbc <plug_holes+0x20>
 8003cae:	4b40      	ldr	r3, [pc, #256]	; (8003db0 <plug_holes+0x114>)
 8003cb0:	f240 125d 	movw	r2, #349	; 0x15d
 8003cb4:	493f      	ldr	r1, [pc, #252]	; (8003db4 <plug_holes+0x118>)
 8003cb6:	4840      	ldr	r0, [pc, #256]	; (8003db8 <plug_holes+0x11c>)
 8003cb8:	f009 fa9c 	bl	800d1f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003cbc:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <plug_holes+0x120>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d306      	bcc.n	8003cd4 <plug_holes+0x38>
 8003cc6:	4b3a      	ldr	r3, [pc, #232]	; (8003db0 <plug_holes+0x114>)
 8003cc8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003ccc:	493c      	ldr	r1, [pc, #240]	; (8003dc0 <plug_holes+0x124>)
 8003cce:	483a      	ldr	r0, [pc, #232]	; (8003db8 <plug_holes+0x11c>)
 8003cd0:	f009 fa90 	bl	800d1f4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	791b      	ldrb	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d006      	beq.n	8003cea <plug_holes+0x4e>
 8003cdc:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <plug_holes+0x114>)
 8003cde:	f240 125f 	movw	r2, #351	; 0x15f
 8003ce2:	4938      	ldr	r1, [pc, #224]	; (8003dc4 <plug_holes+0x128>)
 8003ce4:	4834      	ldr	r0, [pc, #208]	; (8003db8 <plug_holes+0x11c>)
 8003ce6:	f009 fa85 	bl	800d1f4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d906      	bls.n	8003d04 <plug_holes+0x68>
 8003cf6:	4b2e      	ldr	r3, [pc, #184]	; (8003db0 <plug_holes+0x114>)
 8003cf8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8003cfc:	4932      	ldr	r1, [pc, #200]	; (8003dc8 <plug_holes+0x12c>)
 8003cfe:	482e      	ldr	r0, [pc, #184]	; (8003db8 <plug_holes+0x11c>)
 8003d00:	f009 fa78 	bl	800d1f4 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8003d04:	4b29      	ldr	r3, [pc, #164]	; (8003dac <plug_holes+0x110>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	8812      	ldrh	r2, [r2, #0]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d01f      	beq.n	8003d58 <plug_holes+0xbc>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	791b      	ldrb	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d11b      	bne.n	8003d58 <plug_holes+0xbc>
 8003d20:	4b26      	ldr	r3, [pc, #152]	; (8003dbc <plug_holes+0x120>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d016      	beq.n	8003d58 <plug_holes+0xbc>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003d2a:	4b28      	ldr	r3, [pc, #160]	; (8003dcc <plug_holes+0x130>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d102      	bne.n	8003d3a <plug_holes+0x9e>
      lfree = mem;
 8003d34:	4a25      	ldr	r2, [pc, #148]	; (8003dcc <plug_holes+0x130>)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	881a      	ldrh	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a19      	ldr	r2, [pc, #100]	; (8003dac <plug_holes+0x110>)
 8003d46:	6812      	ldr	r2, [r2, #0]
 8003d48:	1a99      	subs	r1, r3, r2
 8003d4a:	4b18      	ldr	r3, [pc, #96]	; (8003dac <plug_holes+0x110>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	8812      	ldrh	r2, [r2, #0]
 8003d52:	4413      	add	r3, r2
 8003d54:	b28a      	uxth	r2, r1
 8003d56:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8003d58:	4b14      	ldr	r3, [pc, #80]	; (8003dac <plug_holes+0x110>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	8852      	ldrh	r2, [r2, #2]
 8003d60:	4413      	add	r3, r2
 8003d62:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d01a      	beq.n	8003da2 <plug_holes+0x106>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	791b      	ldrb	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d116      	bne.n	8003da2 <plug_holes+0x106>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003d74:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <plug_holes+0x130>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d102      	bne.n	8003d84 <plug_holes+0xe8>
      lfree = pmem;
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <plug_holes+0x130>)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	881a      	ldrh	r2, [r3, #0]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4a07      	ldr	r2, [pc, #28]	; (8003dac <plug_holes+0x110>)
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	1a99      	subs	r1, r3, r2
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <plug_holes+0x110>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	8812      	ldrh	r2, [r2, #0]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	b28a      	uxth	r2, r1
 8003da0:	805a      	strh	r2, [r3, #2]
  }
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	20000090 	.word	0x20000090
 8003db0:	0800e174 	.word	0x0800e174
 8003db4:	0800e1a4 	.word	0x0800e1a4
 8003db8:	0800e1bc 	.word	0x0800e1bc
 8003dbc:	20000094 	.word	0x20000094
 8003dc0:	0800e1e4 	.word	0x0800e1e4
 8003dc4:	0800e200 	.word	0x0800e200
 8003dc8:	0800e21c 	.word	0x0800e21c
 8003dcc:	20000098 	.word	0x20000098

08003dd0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003dd6:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <mem_init+0x6c>)
 8003dd8:	3303      	adds	r3, #3
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	461a      	mov	r2, r3
 8003de0:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <mem_init+0x70>)
 8003de2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003de4:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <mem_init+0x70>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8003df0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <mem_init+0x70>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f503 5336 	add.w	r3, r3, #11648	; 0x2d80
 8003e06:	3320      	adds	r3, #32
 8003e08:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <mem_init+0x74>)
 8003e0a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <mem_init+0x74>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2201      	movs	r2, #1
 8003e12:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003e14:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <mem_init+0x74>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8003e1c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003e1e:	4b09      	ldr	r3, [pc, #36]	; (8003e44 <mem_init+0x74>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8003e26:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <mem_init+0x70>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a06      	ldr	r2, [pc, #24]	; (8003e48 <mem_init+0x78>)
 8003e2e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	20003410 	.word	0x20003410
 8003e40:	20000090 	.word	0x20000090
 8003e44:	20000094 	.word	0x20000094
 8003e48:	20000098 	.word	0x20000098

08003e4c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d043      	beq.n	8003ee2 <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f003 0303 	and.w	r3, r3, #3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d006      	beq.n	8003e72 <mem_free+0x26>
 8003e64:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <mem_free+0xa4>)
 8003e66:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8003e6a:	4922      	ldr	r1, [pc, #136]	; (8003ef4 <mem_free+0xa8>)
 8003e6c:	4822      	ldr	r0, [pc, #136]	; (8003ef8 <mem_free+0xac>)
 8003e6e:	f009 f9c1 	bl	800d1f4 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003e72:	4b22      	ldr	r3, [pc, #136]	; (8003efc <mem_free+0xb0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d304      	bcc.n	8003e86 <mem_free+0x3a>
 8003e7c:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <mem_free+0xb4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d306      	bcc.n	8003e94 <mem_free+0x48>
 8003e86:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <mem_free+0xa4>)
 8003e88:	f240 12af 	movw	r2, #431	; 0x1af
 8003e8c:	491d      	ldr	r1, [pc, #116]	; (8003f04 <mem_free+0xb8>)
 8003e8e:	481a      	ldr	r0, [pc, #104]	; (8003ef8 <mem_free+0xac>)
 8003e90:	f009 f9b0 	bl	800d1f4 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003e94:	4b19      	ldr	r3, [pc, #100]	; (8003efc <mem_free+0xb0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d323      	bcc.n	8003ee6 <mem_free+0x9a>
 8003e9e:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <mem_free+0xb4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d21e      	bcs.n	8003ee6 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3b08      	subs	r3, #8
 8003eac:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	791b      	ldrb	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <mem_free+0x78>
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <mem_free+0xa4>)
 8003eb8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003ebc:	4912      	ldr	r1, [pc, #72]	; (8003f08 <mem_free+0xbc>)
 8003ebe:	480e      	ldr	r0, [pc, #56]	; (8003ef8 <mem_free+0xac>)
 8003ec0:	f009 f998 	bl	800d1f4 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003eca:	4b10      	ldr	r3, [pc, #64]	; (8003f0c <mem_free+0xc0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d202      	bcs.n	8003eda <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003ed4:	4a0d      	ldr	r2, [pc, #52]	; (8003f0c <mem_free+0xc0>)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff fede 	bl	8003c9c <plug_holes>
 8003ee0:	e002      	b.n	8003ee8 <mem_free+0x9c>
    return;
 8003ee2:	bf00      	nop
 8003ee4:	e000      	b.n	8003ee8 <mem_free+0x9c>
    return;
 8003ee6:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	0800e174 	.word	0x0800e174
 8003ef4:	0800e248 	.word	0x0800e248
 8003ef8:	0800e1bc 	.word	0x0800e1bc
 8003efc:	20000090 	.word	0x20000090
 8003f00:	20000094 	.word	0x20000094
 8003f04:	0800e26c 	.word	0x0800e26c
 8003f08:	0800e284 	.word	0x0800e284
 8003f0c:	20000098 	.word	0x20000098

08003f10 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8003f1c:	887b      	ldrh	r3, [r7, #2]
 8003f1e:	3303      	adds	r3, #3
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f023 0303 	bic.w	r3, r3, #3
 8003f26:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8003f28:	887b      	ldrh	r3, [r7, #2]
 8003f2a:	2b0b      	cmp	r3, #11
 8003f2c:	d801      	bhi.n	8003f32 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003f2e:	230c      	movs	r3, #12
 8003f30:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8003f32:	887b      	ldrh	r3, [r7, #2]
 8003f34:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d901      	bls.n	8003f40 <mem_trim+0x30>
    return NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e0b3      	b.n	80040a8 <mem_trim+0x198>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003f40:	4b5b      	ldr	r3, [pc, #364]	; (80040b0 <mem_trim+0x1a0>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d304      	bcc.n	8003f54 <mem_trim+0x44>
 8003f4a:	4b5a      	ldr	r3, [pc, #360]	; (80040b4 <mem_trim+0x1a4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d306      	bcc.n	8003f62 <mem_trim+0x52>
 8003f54:	4b58      	ldr	r3, [pc, #352]	; (80040b8 <mem_trim+0x1a8>)
 8003f56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f5a:	4958      	ldr	r1, [pc, #352]	; (80040bc <mem_trim+0x1ac>)
 8003f5c:	4858      	ldr	r0, [pc, #352]	; (80040c0 <mem_trim+0x1b0>)
 8003f5e:	f009 f949 	bl	800d1f4 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003f62:	4b53      	ldr	r3, [pc, #332]	; (80040b0 <mem_trim+0x1a0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d304      	bcc.n	8003f76 <mem_trim+0x66>
 8003f6c:	4b51      	ldr	r3, [pc, #324]	; (80040b4 <mem_trim+0x1a4>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d301      	bcc.n	8003f7a <mem_trim+0x6a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	e096      	b.n	80040a8 <mem_trim+0x198>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3b08      	subs	r3, #8
 8003f7e:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	4a4b      	ldr	r2, [pc, #300]	; (80040b0 <mem_trim+0x1a0>)
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	881a      	ldrh	r2, [r3, #0]
 8003f8e:	8a7b      	ldrh	r3, [r7, #18]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b08      	subs	r3, #8
 8003f96:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003f98:	887a      	ldrh	r2, [r7, #2]
 8003f9a:	8a3b      	ldrh	r3, [r7, #16]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d906      	bls.n	8003fae <mem_trim+0x9e>
 8003fa0:	4b45      	ldr	r3, [pc, #276]	; (80040b8 <mem_trim+0x1a8>)
 8003fa2:	f240 2206 	movw	r2, #518	; 0x206
 8003fa6:	4947      	ldr	r1, [pc, #284]	; (80040c4 <mem_trim+0x1b4>)
 8003fa8:	4845      	ldr	r0, [pc, #276]	; (80040c0 <mem_trim+0x1b0>)
 8003faa:	f009 f923 	bl	800d1f4 <iprintf>
  if (newsize > size) {
 8003fae:	887a      	ldrh	r2, [r7, #2]
 8003fb0:	8a3b      	ldrh	r3, [r7, #16]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d901      	bls.n	8003fba <mem_trim+0xaa>
    /* not supported */
    return NULL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e076      	b.n	80040a8 <mem_trim+0x198>
  }
  if (newsize == size) {
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	8a3b      	ldrh	r3, [r7, #16]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d101      	bne.n	8003fc6 <mem_trim+0xb6>
    /* No change in size, simply return */
    return rmem;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	e070      	b.n	80040a8 <mem_trim+0x198>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8003fc6:	4b3a      	ldr	r3, [pc, #232]	; (80040b0 <mem_trim+0x1a0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	8812      	ldrh	r2, [r2, #0]
 8003fce:	4413      	add	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	791b      	ldrb	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d132      	bne.n	8004040 <mem_trim+0x130>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003fe0:	8a7a      	ldrh	r2, [r7, #18]
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3308      	adds	r3, #8
 8003fea:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8003fec:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <mem_trim+0x1b8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d105      	bne.n	8004002 <mem_trim+0xf2>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8003ff6:	4b2e      	ldr	r3, [pc, #184]	; (80040b0 <mem_trim+0x1a0>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	897b      	ldrh	r3, [r7, #10]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	4a32      	ldr	r2, [pc, #200]	; (80040c8 <mem_trim+0x1b8>)
 8004000:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004002:	4b2b      	ldr	r3, [pc, #172]	; (80040b0 <mem_trim+0x1a0>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	897b      	ldrh	r3, [r7, #10]
 8004008:	4413      	add	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	893a      	ldrh	r2, [r7, #8]
 8004016:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8a7a      	ldrh	r2, [r7, #18]
 800401c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	897a      	ldrh	r2, [r7, #10]
 8004022:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800402c:	4293      	cmp	r3, r2
 800402e:	d03a      	beq.n	80040a6 <mem_trim+0x196>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004030:	4b1f      	ldr	r3, [pc, #124]	; (80040b0 <mem_trim+0x1a0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	8812      	ldrh	r2, [r2, #0]
 8004038:	4413      	add	r3, r2
 800403a:	897a      	ldrh	r2, [r7, #10]
 800403c:	805a      	strh	r2, [r3, #2]
 800403e:	e032      	b.n	80040a6 <mem_trim+0x196>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004040:	887b      	ldrh	r3, [r7, #2]
 8004042:	f103 0214 	add.w	r2, r3, #20
 8004046:	8a3b      	ldrh	r3, [r7, #16]
 8004048:	429a      	cmp	r2, r3
 800404a:	d82c      	bhi.n	80040a6 <mem_trim+0x196>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800404c:	8a7a      	ldrh	r2, [r7, #18]
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	4413      	add	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	3308      	adds	r3, #8
 8004056:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8004058:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <mem_trim+0x1a0>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	897b      	ldrh	r3, [r7, #10]
 800405e:	4413      	add	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8004062:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <mem_trim+0x1b8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	429a      	cmp	r2, r3
 800406a:	d202      	bcs.n	8004072 <mem_trim+0x162>
      lfree = mem2;
 800406c:	4a16      	ldr	r2, [pc, #88]	; (80040c8 <mem_trim+0x1b8>)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	881a      	ldrh	r2, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8a7a      	ldrh	r2, [r7, #18]
 8004084:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	897a      	ldrh	r2, [r7, #10]
 800408a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8004094:	4293      	cmp	r3, r2
 8004096:	d006      	beq.n	80040a6 <mem_trim+0x196>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <mem_trim+0x1a0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	8812      	ldrh	r2, [r2, #0]
 80040a0:	4413      	add	r3, r2
 80040a2:	897a      	ldrh	r2, [r7, #10]
 80040a4:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80040a6:	687b      	ldr	r3, [r7, #4]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000090 	.word	0x20000090
 80040b4:	20000094 	.word	0x20000094
 80040b8:	0800e174 	.word	0x0800e174
 80040bc:	0800e298 	.word	0x0800e298
 80040c0:	0800e1bc 	.word	0x0800e1bc
 80040c4:	0800e2b0 	.word	0x0800e2b0
 80040c8:	20000098 	.word	0x20000098

080040cc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80040d6:	88fb      	ldrh	r3, [r7, #6]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <mem_malloc+0x14>
    return NULL;
 80040dc:	2300      	movs	r3, #0
 80040de:	e0cb      	b.n	8004278 <mem_malloc+0x1ac>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	3303      	adds	r3, #3
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	f023 0303 	bic.w	r3, r3, #3
 80040ea:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	2b0b      	cmp	r3, #11
 80040f0:	d801      	bhi.n	80040f6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80040f2:	230c      	movs	r3, #12
 80040f4:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	f642 52a0 	movw	r2, #11680	; 0x2da0
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d901      	bls.n	8004104 <mem_malloc+0x38>
    return NULL;
 8004100:	2300      	movs	r3, #0
 8004102:	e0b9      	b.n	8004278 <mem_malloc+0x1ac>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004104:	4b5e      	ldr	r3, [pc, #376]	; (8004280 <mem_malloc+0x1b4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	4b5e      	ldr	r3, [pc, #376]	; (8004284 <mem_malloc+0x1b8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	83fb      	strh	r3, [r7, #30]
 8004112:	e0a8      	b.n	8004266 <mem_malloc+0x19a>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8004114:	4b5b      	ldr	r3, [pc, #364]	; (8004284 <mem_malloc+0x1b8>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	8bfb      	ldrh	r3, [r7, #30]
 800411a:	4413      	add	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	791b      	ldrb	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 8099 	bne.w	800425a <mem_malloc+0x18e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	8bfb      	ldrh	r3, [r7, #30]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f1a3 0208 	sub.w	r2, r3, #8
 8004136:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8004138:	429a      	cmp	r2, r3
 800413a:	f0c0 808e 	bcc.w	800425a <mem_malloc+0x18e>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	8bfb      	ldrh	r3, [r7, #30]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	f1a3 0208 	sub.w	r2, r3, #8
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	3314      	adds	r3, #20
 8004150:	429a      	cmp	r2, r3
 8004152:	d328      	bcc.n	80041a6 <mem_malloc+0xda>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8004154:	8bfa      	ldrh	r2, [r7, #30]
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	4413      	add	r3, r2
 800415a:	b29b      	uxth	r3, r3
 800415c:	3308      	adds	r3, #8
 800415e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8004160:	4b48      	ldr	r3, [pc, #288]	; (8004284 <mem_malloc+0x1b8>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	8a7b      	ldrh	r3, [r7, #18]
 8004166:	4413      	add	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	881a      	ldrh	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8bfa      	ldrh	r2, [r7, #30]
 800417c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	8a7a      	ldrh	r2, [r7, #18]
 8004182:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2201      	movs	r2, #1
 8004188:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8004192:	4293      	cmp	r3, r2
 8004194:	d00a      	beq.n	80041ac <mem_malloc+0xe0>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <mem_malloc+0x1b8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	8812      	ldrh	r2, [r2, #0]
 800419e:	4413      	add	r3, r2
 80041a0:	8a7a      	ldrh	r2, [r7, #18]
 80041a2:	805a      	strh	r2, [r3, #2]
 80041a4:	e002      	b.n	80041ac <mem_malloc+0xe0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2201      	movs	r2, #1
 80041aa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80041ac:	4b34      	ldr	r3, [pc, #208]	; (8004280 <mem_malloc+0x1b4>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d127      	bne.n	8004206 <mem_malloc+0x13a>
          struct mem *cur = lfree;
 80041b6:	4b32      	ldr	r3, [pc, #200]	; (8004280 <mem_malloc+0x1b4>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80041bc:	e005      	b.n	80041ca <mem_malloc+0xfe>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80041be:	4b31      	ldr	r3, [pc, #196]	; (8004284 <mem_malloc+0x1b8>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	8812      	ldrh	r2, [r2, #0]
 80041c6:	4413      	add	r3, r2
 80041c8:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	791b      	ldrb	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d004      	beq.n	80041dc <mem_malloc+0x110>
 80041d2:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <mem_malloc+0x1bc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d1f0      	bne.n	80041be <mem_malloc+0xf2>
          }
          lfree = cur;
 80041dc:	4a28      	ldr	r2, [pc, #160]	; (8004280 <mem_malloc+0x1b4>)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80041e2:	4b27      	ldr	r3, [pc, #156]	; (8004280 <mem_malloc+0x1b4>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4b28      	ldr	r3, [pc, #160]	; (8004288 <mem_malloc+0x1bc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d00b      	beq.n	8004206 <mem_malloc+0x13a>
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <mem_malloc+0x1b4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	791b      	ldrb	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d006      	beq.n	8004206 <mem_malloc+0x13a>
 80041f8:	4b24      	ldr	r3, [pc, #144]	; (800428c <mem_malloc+0x1c0>)
 80041fa:	f240 22cf 	movw	r2, #719	; 0x2cf
 80041fe:	4924      	ldr	r1, [pc, #144]	; (8004290 <mem_malloc+0x1c4>)
 8004200:	4824      	ldr	r0, [pc, #144]	; (8004294 <mem_malloc+0x1c8>)
 8004202:	f008 fff7 	bl	800d1f4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004206:	88fa      	ldrh	r2, [r7, #6]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	4413      	add	r3, r2
 800420c:	3308      	adds	r3, #8
 800420e:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <mem_malloc+0x1bc>)
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	4293      	cmp	r3, r2
 8004214:	d906      	bls.n	8004224 <mem_malloc+0x158>
 8004216:	4b1d      	ldr	r3, [pc, #116]	; (800428c <mem_malloc+0x1c0>)
 8004218:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800421c:	491e      	ldr	r1, [pc, #120]	; (8004298 <mem_malloc+0x1cc>)
 800421e:	481d      	ldr	r0, [pc, #116]	; (8004294 <mem_malloc+0x1c8>)
 8004220:	f008 ffe8 	bl	800d1f4 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <mem_malloc+0x170>
 800422e:	4b17      	ldr	r3, [pc, #92]	; (800428c <mem_malloc+0x1c0>)
 8004230:	f240 22d6 	movw	r2, #726	; 0x2d6
 8004234:	4919      	ldr	r1, [pc, #100]	; (800429c <mem_malloc+0x1d0>)
 8004236:	4817      	ldr	r0, [pc, #92]	; (8004294 <mem_malloc+0x1c8>)
 8004238:	f008 ffdc 	bl	800d1f4 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d006      	beq.n	8004254 <mem_malloc+0x188>
 8004246:	4b11      	ldr	r3, [pc, #68]	; (800428c <mem_malloc+0x1c0>)
 8004248:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800424c:	4914      	ldr	r1, [pc, #80]	; (80042a0 <mem_malloc+0x1d4>)
 800424e:	4811      	ldr	r0, [pc, #68]	; (8004294 <mem_malloc+0x1c8>)
 8004250:	f008 ffd0 	bl	800d1f4 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	3308      	adds	r3, #8
 8004258:	e00e      	b.n	8004278 <mem_malloc+0x1ac>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <mem_malloc+0x1b8>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	8bfb      	ldrh	r3, [r7, #30]
 8004260:	4413      	add	r3, r2
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8004266:	8bfa      	ldrh	r2, [r7, #30]
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	f5c3 5336 	rsb	r3, r3, #11648	; 0x2d80
 800426e:	3320      	adds	r3, #32
 8004270:	429a      	cmp	r2, r3
 8004272:	f4ff af4f 	bcc.w	8004114 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3720      	adds	r7, #32
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000098 	.word	0x20000098
 8004284:	20000090 	.word	0x20000090
 8004288:	20000094 	.word	0x20000094
 800428c:	0800e174 	.word	0x0800e174
 8004290:	0800e2d0 	.word	0x0800e2d0
 8004294:	0800e1bc 	.word	0x0800e1bc
 8004298:	0800e2ec 	.word	0x0800e2ec
 800429c:	0800e31c 	.word	0x0800e31c
 80042a0:	0800e34c 	.word	0x0800e34c

080042a4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	3303      	adds	r3, #3
 80042ba:	f023 0303 	bic.w	r3, r3, #3
 80042be:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e011      	b.n	80042ea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4413      	add	r3, r2
 80042e2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3301      	adds	r3, #1
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	885b      	ldrh	r3, [r3, #2]
 80042ee:	461a      	mov	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4293      	cmp	r3, r2
 80042f4:	dbe7      	blt.n	80042c6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
	...

08004304 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800430a:	2300      	movs	r3, #0
 800430c:	80fb      	strh	r3, [r7, #6]
 800430e:	e009      	b.n	8004324 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004310:	88fb      	ldrh	r3, [r7, #6]
 8004312:	4a08      	ldr	r2, [pc, #32]	; (8004334 <memp_init+0x30>)
 8004314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ffc3 	bl	80042a4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800431e:	88fb      	ldrh	r3, [r7, #6]
 8004320:	3301      	adds	r3, #1
 8004322:	80fb      	strh	r3, [r7, #6]
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	2b08      	cmp	r3, #8
 8004328:	d9f2      	bls.n	8004310 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	0800fe5c 	.word	0x0800fe5c

08004338 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d012      	beq.n	8004374 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d006      	beq.n	8004370 <do_memp_malloc_pool+0x38>
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <do_memp_malloc_pool+0x48>)
 8004364:	f240 1249 	movw	r2, #329	; 0x149
 8004368:	4906      	ldr	r1, [pc, #24]	; (8004384 <do_memp_malloc_pool+0x4c>)
 800436a:	4807      	ldr	r0, [pc, #28]	; (8004388 <do_memp_malloc_pool+0x50>)
 800436c:	f008 ff42 	bl	800d1f4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	e000      	b.n	8004376 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	0800e370 	.word	0x0800e370
 8004384:	0800e3a0 	.word	0x0800e3a0
 8004388:	0800e3c4 	.word	0x0800e3c4

0800438c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d908      	bls.n	80043ae <memp_malloc+0x22>
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <memp_malloc+0x3c>)
 800439e:	f240 1287 	movw	r2, #391	; 0x187
 80043a2:	490a      	ldr	r1, [pc, #40]	; (80043cc <memp_malloc+0x40>)
 80043a4:	480a      	ldr	r0, [pc, #40]	; (80043d0 <memp_malloc+0x44>)
 80043a6:	f008 ff25 	bl	800d1f4 <iprintf>
 80043aa:	2300      	movs	r3, #0
 80043ac:	e008      	b.n	80043c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <memp_malloc+0x48>)
 80043b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7ff ffbe 	bl	8004338 <do_memp_malloc_pool>
 80043bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80043be:	68fb      	ldr	r3, [r7, #12]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	0800e370 	.word	0x0800e370
 80043cc:	0800e400 	.word	0x0800e400
 80043d0:	0800e3c4 	.word	0x0800e3c4
 80043d4:	0800fe5c 	.word	0x0800fe5c

080043d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d006      	beq.n	80043fa <do_memp_free_pool+0x22>
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <do_memp_free_pool+0x40>)
 80043ee:	f240 129d 	movw	r2, #413	; 0x19d
 80043f2:	490a      	ldr	r1, [pc, #40]	; (800441c <do_memp_free_pool+0x44>)
 80043f4:	480a      	ldr	r0, [pc, #40]	; (8004420 <do_memp_free_pool+0x48>)
 80043f6:	f008 fefd 	bl	800d1f4 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	0800e370 	.word	0x0800e370
 800441c:	0800e420 	.word	0x0800e420
 8004420:	0800e3c4 	.word	0x0800e3c4

08004424 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	6039      	str	r1, [r7, #0]
 800442e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	2b08      	cmp	r3, #8
 8004434:	d907      	bls.n	8004446 <memp_free+0x22>
 8004436:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <memp_free+0x44>)
 8004438:	f240 12db 	movw	r2, #475	; 0x1db
 800443c:	490b      	ldr	r1, [pc, #44]	; (800446c <memp_free+0x48>)
 800443e:	480c      	ldr	r0, [pc, #48]	; (8004470 <memp_free+0x4c>)
 8004440:	f008 fed8 	bl	800d1f4 <iprintf>
 8004444:	e00c      	b.n	8004460 <memp_free+0x3c>

  if (mem == NULL) {
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <memp_free+0x50>)
 8004450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004454:	6839      	ldr	r1, [r7, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff ffbe 	bl	80043d8 <do_memp_free_pool>
 800445c:	e000      	b.n	8004460 <memp_free+0x3c>
    return;
 800445e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	0800e370 	.word	0x0800e370
 800446c:	0800e440 	.word	0x0800e440
 8004470:	0800e3c4 	.word	0x0800e3c4
 8004474:	0800fe5c 	.word	0x0800fe5c

08004478 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
	...

08004488 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <netif_add+0x20>
 800449c:	4b22      	ldr	r3, [pc, #136]	; (8004528 <netif_add+0xa0>)
 800449e:	22fb      	movs	r2, #251	; 0xfb
 80044a0:	4922      	ldr	r1, [pc, #136]	; (800452c <netif_add+0xa4>)
 80044a2:	4823      	ldr	r0, [pc, #140]	; (8004530 <netif_add+0xa8>)
 80044a4:	f008 fea6 	bl	800d1f4 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2203      	movs	r2, #3
 80044c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	621a      	str	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
 80044dc:	4b15      	ldr	r3, [pc, #84]	; (8004534 <netif_add+0xac>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	b2d1      	uxtb	r1, r2
 80044e4:	4a13      	ldr	r2, [pc, #76]	; (8004534 <netif_add+0xac>)
 80044e6:	7011      	strb	r1, [r2, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  netif->input = input;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a3a      	ldr	r2, [r7, #32]
 80044f2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f81e 	bl	800453c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	4798      	blx	r3
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <netif_add+0x88>
    return NULL;
 800450c:	2300      	movs	r3, #0
 800450e:	e007      	b.n	8004520 <netif_add+0x98>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <netif_add+0xb0>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004518:	4a07      	ldr	r2, [pc, #28]	; (8004538 <netif_add+0xb0>)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800451e:	68fb      	ldr	r3, [r7, #12]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	0800e45c 	.word	0x0800e45c
 800452c:	0800e490 	.word	0x0800e490
 8004530:	0800e4a8 	.word	0x0800e4a8
 8004534:	200000c0 	.word	0x200000c0
 8004538:	2000c6b8 	.word	0x2000c6b8

0800453c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <netif_set_addr+0x1c>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10c      	bne.n	8004572 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f81a 	bl	8004594 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f86a 	bl	800463c <netif_set_netmask>
    netif_set_gw(netif, gw);
 8004568:	6839      	ldr	r1, [r7, #0]
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f000 f852 	bl	8004614 <netif_set_gw>
 8004570:	e00b      	b.n	800458a <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f861 	bl	800463c <netif_set_netmask>
    netif_set_gw(netif, gw);
 800457a:	6839      	ldr	r1, [r7, #0]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f849 	bl	8004614 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f805 	bl	8004594 <netif_set_ipaddr>
  }
}
 800458a:	bf00      	nop
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <netif_set_ipaddr+0x18>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	e002      	b.n	80045b2 <netif_set_ipaddr+0x1e>
 80045ac:	4b18      	ldr	r3, [pc, #96]	; (8004610 <netif_set_ipaddr+0x7c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d024      	beq.n	8004608 <netif_set_ipaddr+0x74>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	f107 020c 	add.w	r2, r7, #12
 80045c6:	4611      	mov	r1, r2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f002 faed 	bl	8006ba8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	f107 020c 	add.w	r2, r7, #12
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f006 fb63 	bl	800aca4 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <netif_set_ipaddr+0x56>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	e000      	b.n	80045ec <netif_set_ipaddr+0x58>
 80045ea:	2300      	movs	r3, #0
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80045f0:	2101      	movs	r1, #1
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f871 	bl	80046da <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <netif_set_ipaddr+0x74>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	4798      	blx	r3
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	0800fec0 	.word	0x0800fec0

08004614 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <netif_set_gw+0x16>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	e000      	b.n	800462c <netif_set_gw+0x18>
 800462a:	2300      	movs	r3, #0
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <netif_set_netmask+0x16>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	e000      	b.n	8004654 <netif_set_netmask+0x18>
 8004652:	2300      	movs	r3, #0
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800466c:	4a04      	ldr	r2, [pc, #16]	; (8004680 <netif_set_default+0x1c>)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	2000c6bc 	.word	0x2000c6bc

08004684 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d11b      	bne.n	80046d2 <netif_set_up+0x4e>
    netif->flags |= NETIF_FLAG_UP;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80046a0:	f043 0301 	orr.w	r3, r3, #1
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <netif_set_up+0x38>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	4798      	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80046c2:	f003 0304 	and.w	r3, r3, #4
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <netif_set_up+0x4e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80046ca:	2103      	movs	r1, #3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f804 	bl	80046da <netif_issue_reports>
    }
  }
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d011      	beq.n	8004714 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00c      	beq.n	8004714 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f007 f9fc 	bl	800bb0c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d01a      	beq.n	8004768 <netif_set_down+0x4c>
    netif->flags &= ~NETIF_FLAG_UP;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	b2da      	uxtb	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f006 fda0 	bl	800b298 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <netif_set_down+0x4c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	4798      	blx	r3
  }
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  if (netif) {
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	621a      	str	r2, [r3, #32]
  }
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800479a:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <pbuf_free_ooseq+0x40>)
 800479c:	2200      	movs	r2, #0
 800479e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80047a0:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <pbuf_free_ooseq+0x44>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	e00f      	b.n	80047c8 <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 fe69 	bl	800648c <tcp_segs_free>
      pcb->ooseq = NULL;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80047c0:	e005      	b.n	80047ce <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	607b      	str	r3, [r7, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1ec      	bne.n	80047a8 <pbuf_free_ooseq+0x14>
    }
  }
}
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	2000c6c0 	.word	0x2000c6c0
 80047d8:	2000c6c8 	.word	0x2000c6c8

080047dc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <pbuf_pool_is_empty+0x14>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	2000c6c0 	.word	0x2000c6c0

080047f4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	71fb      	strb	r3, [r7, #7]
 80047fe:	460b      	mov	r3, r1
 8004800:	80bb      	strh	r3, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	2b04      	cmp	r3, #4
 800480a:	d81c      	bhi.n	8004846 <pbuf_alloc+0x52>
 800480c:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <pbuf_alloc+0x20>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004829 	.word	0x08004829
 8004818:	0800482f 	.word	0x0800482f
 800481c:	08004835 	.word	0x08004835
 8004820:	0800483b 	.word	0x0800483b
 8004824:	08004841 	.word	0x08004841
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004828:	2336      	movs	r3, #54	; 0x36
 800482a:	82fb      	strh	r3, [r7, #22]
    break;
 800482c:	e014      	b.n	8004858 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800482e:	2322      	movs	r3, #34	; 0x22
 8004830:	82fb      	strh	r3, [r7, #22]
    break;
 8004832:	e011      	b.n	8004858 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004834:	230e      	movs	r3, #14
 8004836:	82fb      	strh	r3, [r7, #22]
    break;
 8004838:	e00e      	b.n	8004858 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800483a:	2300      	movs	r3, #0
 800483c:	82fb      	strh	r3, [r7, #22]
    break;
 800483e:	e00b      	b.n	8004858 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8004840:	2300      	movs	r3, #0
 8004842:	82fb      	strh	r3, [r7, #22]
    break;
 8004844:	e008      	b.n	8004858 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8004846:	4ba6      	ldr	r3, [pc, #664]	; (8004ae0 <pbuf_alloc+0x2ec>)
 8004848:	f44f 728b 	mov.w	r2, #278	; 0x116
 800484c:	49a5      	ldr	r1, [pc, #660]	; (8004ae4 <pbuf_alloc+0x2f0>)
 800484e:	48a6      	ldr	r0, [pc, #664]	; (8004ae8 <pbuf_alloc+0x2f4>)
 8004850:	f008 fcd0 	bl	800d1f4 <iprintf>
    return NULL;
 8004854:	2300      	movs	r3, #0
 8004856:	e15f      	b.n	8004b18 <pbuf_alloc+0x324>
  }

  switch (type) {
 8004858:	79bb      	ldrb	r3, [r7, #6]
 800485a:	2b03      	cmp	r3, #3
 800485c:	f200 8136 	bhi.w	8004acc <pbuf_alloc+0x2d8>
 8004860:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <pbuf_alloc+0x74>)
 8004862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004866:	bf00      	nop
 8004868:	08004a0d 	.word	0x08004a0d
 800486c:	08004a99 	.word	0x08004a99
 8004870:	08004a99 	.word	0x08004a99
 8004874:	08004879 	.word	0x08004879
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004878:	2008      	movs	r0, #8
 800487a:	f7ff fd87 	bl	800438c <memp_malloc>
 800487e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d103      	bne.n	800488e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8004886:	f7ff ffa9 	bl	80047dc <pbuf_pool_is_empty>
      return NULL;
 800488a:	2300      	movs	r3, #0
 800488c:	e144      	b.n	8004b18 <pbuf_alloc+0x324>
    }
    p->type = type;
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	79ba      	ldrb	r2, [r7, #6]
 8004892:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800489a:	8afb      	ldrh	r3, [r7, #22]
 800489c:	3310      	adds	r3, #16
 800489e:	69fa      	ldr	r2, [r7, #28]
 80048a0:	4413      	add	r3, r2
 80048a2:	3303      	adds	r3, #3
 80048a4:	f023 0303 	bic.w	r3, r3, #3
 80048a8:	461a      	mov	r2, r3
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d006      	beq.n	80048c8 <pbuf_alloc+0xd4>
 80048ba:	4b89      	ldr	r3, [pc, #548]	; (8004ae0 <pbuf_alloc+0x2ec>)
 80048bc:	f240 1229 	movw	r2, #297	; 0x129
 80048c0:	498a      	ldr	r1, [pc, #552]	; (8004aec <pbuf_alloc+0x2f8>)
 80048c2:	4889      	ldr	r0, [pc, #548]	; (8004ae8 <pbuf_alloc+0x2f4>)
 80048c4:	f008 fc96 	bl	800d1f4 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	88ba      	ldrh	r2, [r7, #4]
 80048cc:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80048ce:	8afb      	ldrh	r3, [r7, #22]
 80048d0:	3303      	adds	r3, #3
 80048d2:	f023 0303 	bic.w	r3, r3, #3
 80048d6:	f5c3 63b6 	rsb	r3, r3, #1456	; 0x5b0
 80048da:	3304      	adds	r3, #4
 80048dc:	88ba      	ldrh	r2, [r7, #4]
 80048de:	4293      	cmp	r3, r2
 80048e0:	bf28      	it	cs
 80048e2:	4613      	movcs	r3, r2
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	8952      	ldrh	r2, [r2, #10]
 80048f2:	441a      	add	r2, r3
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f203 53c4 	addw	r3, r3, #1476	; 0x5c4
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d906      	bls.n	800490c <pbuf_alloc+0x118>
 80048fe:	4b78      	ldr	r3, [pc, #480]	; (8004ae0 <pbuf_alloc+0x2ec>)
 8004900:	f44f 7298 	mov.w	r2, #304	; 0x130
 8004904:	497a      	ldr	r1, [pc, #488]	; (8004af0 <pbuf_alloc+0x2fc>)
 8004906:	4878      	ldr	r0, [pc, #480]	; (8004ae8 <pbuf_alloc+0x2f4>)
 8004908:	f008 fc74 	bl	800d1f4 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800490c:	8afb      	ldrh	r3, [r7, #22]
 800490e:	3303      	adds	r3, #3
 8004910:	f023 0303 	bic.w	r3, r3, #3
 8004914:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8004918:	4293      	cmp	r3, r2
 800491a:	d106      	bne.n	800492a <pbuf_alloc+0x136>
 800491c:	4b70      	ldr	r3, [pc, #448]	; (8004ae0 <pbuf_alloc+0x2ec>)
 800491e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8004922:	4974      	ldr	r1, [pc, #464]	; (8004af4 <pbuf_alloc+0x300>)
 8004924:	4870      	ldr	r0, [pc, #448]	; (8004ae8 <pbuf_alloc+0x2f4>)
 8004926:	f008 fc65 	bl	800d1f4 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	2201      	movs	r2, #1
 800492e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8004934:	88bb      	ldrh	r3, [r7, #4]
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	8952      	ldrh	r2, [r2, #10]
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800493e:	e061      	b.n	8004a04 <pbuf_alloc+0x210>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004940:	2008      	movs	r0, #8
 8004942:	f7ff fd23 	bl	800438c <memp_malloc>
 8004946:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <pbuf_alloc+0x168>
        PBUF_POOL_IS_EMPTY();
 800494e:	f7ff ff45 	bl	80047dc <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8004952:	69f8      	ldr	r0, [r7, #28]
 8004954:	f000 fac2 	bl	8004edc <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8004958:	2300      	movs	r3, #0
 800495a:	e0dd      	b.n	8004b18 <pbuf_alloc+0x324>
      }
      q->type = type;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	79ba      	ldrb	r2, [r7, #6]
 8004960:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800497a:	4293      	cmp	r3, r2
 800497c:	dd06      	ble.n	800498c <pbuf_alloc+0x198>
 800497e:	4b58      	ldr	r3, [pc, #352]	; (8004ae0 <pbuf_alloc+0x2ec>)
 8004980:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8004984:	495c      	ldr	r1, [pc, #368]	; (8004af8 <pbuf_alloc+0x304>)
 8004986:	4858      	ldr	r0, [pc, #352]	; (8004ae8 <pbuf_alloc+0x2f4>)
 8004988:	f008 fc34 	bl	800d1f4 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800499c:	4293      	cmp	r3, r2
 800499e:	bf28      	it	cs
 80049a0:	4613      	movcs	r3, r2
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f103 0210 	add.w	r2, r3, #16
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d006      	beq.n	80049cc <pbuf_alloc+0x1d8>
 80049be:	4b48      	ldr	r3, [pc, #288]	; (8004ae0 <pbuf_alloc+0x2ec>)
 80049c0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80049c4:	494d      	ldr	r1, [pc, #308]	; (8004afc <pbuf_alloc+0x308>)
 80049c6:	4848      	ldr	r0, [pc, #288]	; (8004ae8 <pbuf_alloc+0x2f4>)
 80049c8:	f008 fc14 	bl	800d1f4 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	8952      	ldrh	r2, [r2, #10]
 80049d4:	441a      	add	r2, r3
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f203 53c4 	addw	r3, r3, #1476	; 0x5c4
 80049dc:	429a      	cmp	r2, r3
 80049de:	d906      	bls.n	80049ee <pbuf_alloc+0x1fa>
 80049e0:	4b3f      	ldr	r3, [pc, #252]	; (8004ae0 <pbuf_alloc+0x2ec>)
 80049e2:	f240 1255 	movw	r2, #341	; 0x155
 80049e6:	4942      	ldr	r1, [pc, #264]	; (8004af0 <pbuf_alloc+0x2fc>)
 80049e8:	483f      	ldr	r0, [pc, #252]	; (8004ae8 <pbuf_alloc+0x2f4>)
 80049ea:	f008 fc03 	bl	800d1f4 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2201      	movs	r2, #1
 80049f2:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	895b      	ldrh	r3, [r3, #10]
 80049f8:	461a      	mov	r2, r3
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1a9b      	subs	r3, r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	dc9a      	bgt.n	8004940 <pbuf_alloc+0x14c>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8004a0a:	e07e      	b.n	8004b0a <pbuf_alloc+0x316>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8004a0c:	8afb      	ldrh	r3, [r7, #22]
 8004a0e:	3313      	adds	r3, #19
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	88bb      	ldrh	r3, [r7, #4]
 8004a1a:	3303      	adds	r3, #3
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f023 0303 	bic.w	r3, r3, #3
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	4413      	add	r3, r2
 8004a26:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8004a28:	897a      	ldrh	r2, [r7, #10]
 8004a2a:	88bb      	ldrh	r3, [r7, #4]
 8004a2c:	3303      	adds	r3, #3
 8004a2e:	f023 0303 	bic.w	r3, r3, #3
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d201      	bcs.n	8004a3a <pbuf_alloc+0x246>
        return NULL;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e06e      	b.n	8004b18 <pbuf_alloc+0x324>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8004a3a:	897b      	ldrh	r3, [r7, #10]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7ff fb45 	bl	80040cc <mem_malloc>
 8004a42:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <pbuf_alloc+0x25a>
      return NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e064      	b.n	8004b18 <pbuf_alloc+0x324>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8004a4e:	8afb      	ldrh	r3, [r7, #22]
 8004a50:	3310      	adds	r3, #16
 8004a52:	69fa      	ldr	r2, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	3303      	adds	r3, #3
 8004a58:	f023 0303 	bic.w	r3, r3, #3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	88ba      	ldrh	r2, [r7, #4]
 8004a66:	811a      	strh	r2, [r3, #8]
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	891a      	ldrh	r2, [r3, #8]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
    p->type = type;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	79ba      	ldrb	r2, [r7, #6]
 8004a7a:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 0303 	and.w	r3, r3, #3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d03f      	beq.n	8004b08 <pbuf_alloc+0x314>
 8004a88:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <pbuf_alloc+0x2ec>)
 8004a8a:	f240 1277 	movw	r2, #375	; 0x177
 8004a8e:	491c      	ldr	r1, [pc, #112]	; (8004b00 <pbuf_alloc+0x30c>)
 8004a90:	4815      	ldr	r0, [pc, #84]	; (8004ae8 <pbuf_alloc+0x2f4>)
 8004a92:	f008 fbaf 	bl	800d1f4 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8004a96:	e037      	b.n	8004b08 <pbuf_alloc+0x314>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004a98:	2007      	movs	r0, #7
 8004a9a:	f7ff fc77 	bl	800438c <memp_malloc>
 8004a9e:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <pbuf_alloc+0x2b6>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e036      	b.n	8004b18 <pbuf_alloc+0x324>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2200      	movs	r2, #0
 8004aae:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	88ba      	ldrh	r2, [r7, #4]
 8004ab4:	811a      	strh	r2, [r3, #8]
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	891a      	ldrh	r2, [r3, #8]
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
    p->type = type;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	79ba      	ldrb	r2, [r7, #6]
 8004ac8:	731a      	strb	r2, [r3, #12]
    break;
 8004aca:	e01e      	b.n	8004b0a <pbuf_alloc+0x316>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004acc:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <pbuf_alloc+0x2ec>)
 8004ace:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8004ad2:	490c      	ldr	r1, [pc, #48]	; (8004b04 <pbuf_alloc+0x310>)
 8004ad4:	4804      	ldr	r0, [pc, #16]	; (8004ae8 <pbuf_alloc+0x2f4>)
 8004ad6:	f008 fb8d 	bl	800d1f4 <iprintf>
    return NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e01c      	b.n	8004b18 <pbuf_alloc+0x324>
 8004ade:	bf00      	nop
 8004ae0:	0800e4d0 	.word	0x0800e4d0
 8004ae4:	0800e500 	.word	0x0800e500
 8004ae8:	0800e51c 	.word	0x0800e51c
 8004aec:	0800e544 	.word	0x0800e544
 8004af0:	0800e574 	.word	0x0800e574
 8004af4:	0800e5a8 	.word	0x0800e5a8
 8004af8:	0800e5dc 	.word	0x0800e5dc
 8004afc:	0800e5f0 	.word	0x0800e5f0
 8004b00:	0800e620 	.word	0x0800e620
 8004b04:	0800e64c 	.word	0x0800e64c
    break;
 8004b08:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	2200      	movs	r2, #0
 8004b14:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004b16:	69fb      	ldr	r3, [r7, #28]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3720      	adds	r7, #32
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	4603      	mov	r3, r0
 8004b2a:	71fb      	strb	r3, [r7, #7]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	80bb      	strh	r3, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d81b      	bhi.n	8004b72 <pbuf_alloced_custom+0x52>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <pbuf_alloced_custom+0x20>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b55 	.word	0x08004b55
 8004b44:	08004b5b 	.word	0x08004b5b
 8004b48:	08004b61 	.word	0x08004b61
 8004b4c:	08004b67 	.word	0x08004b67
 8004b50:	08004b6d 	.word	0x08004b6d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004b54:	2336      	movs	r3, #54	; 0x36
 8004b56:	81fb      	strh	r3, [r7, #14]
    break;
 8004b58:	e014      	b.n	8004b84 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004b5a:	2322      	movs	r3, #34	; 0x22
 8004b5c:	81fb      	strh	r3, [r7, #14]
    break;
 8004b5e:	e011      	b.n	8004b84 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004b60:	230e      	movs	r3, #14
 8004b62:	81fb      	strh	r3, [r7, #14]
    break;
 8004b64:	e00e      	b.n	8004b84 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004b66:	2300      	movs	r3, #0
 8004b68:	81fb      	strh	r3, [r7, #14]
    break;
 8004b6a:	e00b      	b.n	8004b84 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	81fb      	strh	r3, [r7, #14]
    break;
 8004b70:	e008      	b.n	8004b84 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8004b72:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <pbuf_alloced_custom+0xc8>)
 8004b74:	f240 12c5 	movw	r2, #453	; 0x1c5
 8004b78:	491c      	ldr	r1, [pc, #112]	; (8004bec <pbuf_alloced_custom+0xcc>)
 8004b7a:	481d      	ldr	r0, [pc, #116]	; (8004bf0 <pbuf_alloced_custom+0xd0>)
 8004b7c:	f008 fb3a 	bl	800d1f4 <iprintf>
    return NULL;
 8004b80:	2300      	movs	r3, #0
 8004b82:	e02d      	b.n	8004be0 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004b84:	89fb      	ldrh	r3, [r7, #14]
 8004b86:	3303      	adds	r3, #3
 8004b88:	f023 0203 	bic.w	r2, r3, #3
 8004b8c:	88bb      	ldrh	r3, [r7, #4]
 8004b8e:	441a      	add	r2, r3
 8004b90:	8bbb      	ldrh	r3, [r7, #28]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d901      	bls.n	8004b9a <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e022      	b.n	8004be0 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004ba6:	89fb      	ldrh	r3, [r7, #14]
 8004ba8:	3303      	adds	r3, #3
 8004baa:	f023 0303 	bic.w	r3, r3, #3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	441a      	add	r2, r3
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	605a      	str	r2, [r3, #4]
 8004bb6:	e002      	b.n	8004bbe <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	88ba      	ldrh	r2, [r7, #4]
 8004bc8:	811a      	strh	r2, [r3, #8]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	891a      	ldrh	r2, [r3, #8]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	79ba      	ldrb	r2, [r7, #6]
 8004bd6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8004bde:	683b      	ldr	r3, [r7, #0]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	0800e4d0 	.word	0x0800e4d0
 8004bec:	0800e668 	.word	0x0800e668
 8004bf0:	0800e51c 	.word	0x0800e51c

08004bf4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d106      	bne.n	8004c14 <pbuf_realloc+0x20>
 8004c06:	4b4b      	ldr	r3, [pc, #300]	; (8004d34 <pbuf_realloc+0x140>)
 8004c08:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004c0c:	494a      	ldr	r1, [pc, #296]	; (8004d38 <pbuf_realloc+0x144>)
 8004c0e:	484b      	ldr	r0, [pc, #300]	; (8004d3c <pbuf_realloc+0x148>)
 8004c10:	f008 faf0 	bl	800d1f4 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	7b1b      	ldrb	r3, [r3, #12]
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d012      	beq.n	8004c42 <pbuf_realloc+0x4e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	7b1b      	ldrb	r3, [r3, #12]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d00e      	beq.n	8004c42 <pbuf_realloc+0x4e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	7b1b      	ldrb	r3, [r3, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <pbuf_realloc+0x4e>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	7b1b      	ldrb	r3, [r3, #12]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d006      	beq.n	8004c42 <pbuf_realloc+0x4e>
 8004c34:	4b3f      	ldr	r3, [pc, #252]	; (8004d34 <pbuf_realloc+0x140>)
 8004c36:	f240 12f7 	movw	r2, #503	; 0x1f7
 8004c3a:	4941      	ldr	r1, [pc, #260]	; (8004d40 <pbuf_realloc+0x14c>)
 8004c3c:	483f      	ldr	r0, [pc, #252]	; (8004d3c <pbuf_realloc+0x148>)
 8004c3e:	f008 fad9 	bl	800d1f4 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	891b      	ldrh	r3, [r3, #8]
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d26f      	bcs.n	8004d2c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8004c4c:	887b      	ldrh	r3, [r7, #2]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	8912      	ldrh	r2, [r2, #8]
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004c56:	887b      	ldrh	r3, [r7, #2]
 8004c58:	827b      	strh	r3, [r7, #18]
  q = p;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004c5e:	e025      	b.n	8004cac <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	895b      	ldrh	r3, [r3, #10]
 8004c64:	8a7a      	ldrh	r2, [r7, #18]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004c70:	4293      	cmp	r3, r2
 8004c72:	dd06      	ble.n	8004c82 <pbuf_realloc+0x8e>
 8004c74:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <pbuf_realloc+0x140>)
 8004c76:	f240 220b 	movw	r2, #523	; 0x20b
 8004c7a:	4932      	ldr	r1, [pc, #200]	; (8004d44 <pbuf_realloc+0x150>)
 8004c7c:	482f      	ldr	r0, [pc, #188]	; (8004d3c <pbuf_realloc+0x148>)
 8004c7e:	f008 fab9 	bl	800d1f4 <iprintf>
    q->tot_len += (u16_t)grow;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	891a      	ldrh	r2, [r3, #8]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <pbuf_realloc+0xb8>
 8004c9e:	4b25      	ldr	r3, [pc, #148]	; (8004d34 <pbuf_realloc+0x140>)
 8004ca0:	f240 220f 	movw	r2, #527	; 0x20f
 8004ca4:	4928      	ldr	r1, [pc, #160]	; (8004d48 <pbuf_realloc+0x154>)
 8004ca6:	4825      	ldr	r0, [pc, #148]	; (8004d3c <pbuf_realloc+0x148>)
 8004ca8:	f008 faa4 	bl	800d1f4 <iprintf>
  while (rem_len > q->len) {
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	895b      	ldrh	r3, [r3, #10]
 8004cb0:	8a7a      	ldrh	r2, [r7, #18]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d8d4      	bhi.n	8004c60 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	7b1b      	ldrb	r3, [r3, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d122      	bne.n	8004d04 <pbuf_realloc+0x110>
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	895b      	ldrh	r3, [r3, #10]
 8004cc2:	8a7a      	ldrh	r2, [r7, #18]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d01d      	beq.n	8004d04 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	7b5b      	ldrb	r3, [r3, #13]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d117      	bne.n	8004d04 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	461a      	mov	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	8a7b      	ldrh	r3, [r7, #18]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6978      	ldr	r0, [r7, #20]
 8004cea:	f7ff f911 	bl	8003f10 <mem_trim>
 8004cee:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <pbuf_realloc+0x110>
 8004cf6:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <pbuf_realloc+0x140>)
 8004cf8:	f240 221d 	movw	r2, #541	; 0x21d
 8004cfc:	4913      	ldr	r1, [pc, #76]	; (8004d4c <pbuf_realloc+0x158>)
 8004cfe:	480f      	ldr	r0, [pc, #60]	; (8004d3c <pbuf_realloc+0x148>)
 8004d00:	f008 fa78 	bl	800d1f4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	8a7a      	ldrh	r2, [r7, #18]
 8004d08:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	895a      	ldrh	r2, [r3, #10]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d004      	beq.n	8004d24 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f8dc 	bl	8004edc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e000      	b.n	8004d2e <pbuf_realloc+0x13a>
    return;
 8004d2c:	bf00      	nop

}
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	0800e4d0 	.word	0x0800e4d0
 8004d38:	0800e68c 	.word	0x0800e68c
 8004d3c:	0800e51c 	.word	0x0800e51c
 8004d40:	0800e6a4 	.word	0x0800e6a4
 8004d44:	0800e6c0 	.word	0x0800e6c0
 8004d48:	0800e6d4 	.word	0x0800e6d4
 8004d4c:	0800e6ec 	.word	0x0800e6ec

08004d50 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	807b      	strh	r3, [r7, #2]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d106      	bne.n	8004d74 <pbuf_header_impl+0x24>
 8004d66:	4b46      	ldr	r3, [pc, #280]	; (8004e80 <pbuf_header_impl+0x130>)
 8004d68:	f240 223f 	movw	r2, #575	; 0x23f
 8004d6c:	4945      	ldr	r1, [pc, #276]	; (8004e84 <pbuf_header_impl+0x134>)
 8004d6e:	4846      	ldr	r0, [pc, #280]	; (8004e88 <pbuf_header_impl+0x138>)
 8004d70:	f008 fa40 	bl	800d1f4 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8004d74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <pbuf_header_impl+0x32>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <pbuf_header_impl+0x36>
    return 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e078      	b.n	8004e78 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8004d86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	da10      	bge.n	8004db0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8004d8e:	887b      	ldrh	r3, [r7, #2]
 8004d90:	425b      	negs	r3, r3
 8004d92:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	895b      	ldrh	r3, [r3, #10]
 8004d98:	89fa      	ldrh	r2, [r7, #14]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d90a      	bls.n	8004db4 <pbuf_header_impl+0x64>
 8004d9e:	4b38      	ldr	r3, [pc, #224]	; (8004e80 <pbuf_header_impl+0x130>)
 8004da0:	f240 2247 	movw	r2, #583	; 0x247
 8004da4:	4939      	ldr	r1, [pc, #228]	; (8004e8c <pbuf_header_impl+0x13c>)
 8004da6:	4838      	ldr	r0, [pc, #224]	; (8004e88 <pbuf_header_impl+0x138>)
 8004da8:	f008 fa24 	bl	800d1f4 <iprintf>
 8004dac:	2301      	movs	r3, #1
 8004dae:	e063      	b.n	8004e78 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8004db0:	887b      	ldrh	r3, [r7, #2]
 8004db2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7b1b      	ldrb	r3, [r3, #12]
 8004db8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8004dc0:	89bb      	ldrh	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <pbuf_header_impl+0x7c>
 8004dc6:	89bb      	ldrh	r3, [r7, #12]
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d112      	bne.n	8004df2 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004dd4:	425b      	negs	r3, r3
 8004dd6:	441a      	add	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3310      	adds	r3, #16
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d238      	bcs.n	8004e5a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e042      	b.n	8004e78 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004df2:	89bb      	ldrh	r3, [r7, #12]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d002      	beq.n	8004dfe <pbuf_header_impl+0xae>
 8004df8:	89bb      	ldrh	r3, [r7, #12]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d124      	bne.n	8004e48 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004dfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	da0d      	bge.n	8004e22 <pbuf_header_impl+0xd2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	895b      	ldrh	r3, [r3, #10]
 8004e0a:	89fa      	ldrh	r2, [r7, #14]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d808      	bhi.n	8004e22 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e18:	425b      	negs	r3, r3
 8004e1a:	441a      	add	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	605a      	str	r2, [r3, #4]
 8004e20:	e011      	b.n	8004e46 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8004e22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	dd0b      	ble.n	8004e42 <pbuf_header_impl+0xf2>
 8004e2a:	787b      	ldrb	r3, [r7, #1]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d008      	beq.n	8004e42 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e38:	425b      	negs	r3, r3
 8004e3a:	441a      	add	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	605a      	str	r2, [r3, #4]
 8004e40:	e001      	b.n	8004e46 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e018      	b.n	8004e78 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004e46:	e008      	b.n	8004e5a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8004e48:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <pbuf_header_impl+0x130>)
 8004e4a:	f240 2277 	movw	r2, #631	; 0x277
 8004e4e:	4910      	ldr	r1, [pc, #64]	; (8004e90 <pbuf_header_impl+0x140>)
 8004e50:	480d      	ldr	r0, [pc, #52]	; (8004e88 <pbuf_header_impl+0x138>)
 8004e52:	f008 f9cf 	bl	800d1f4 <iprintf>
    return 1;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e00e      	b.n	8004e78 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	895a      	ldrh	r2, [r3, #10]
 8004e5e:	887b      	ldrh	r3, [r7, #2]
 8004e60:	4413      	add	r3, r2
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	891a      	ldrh	r2, [r3, #8]
 8004e6c:	887b      	ldrh	r3, [r7, #2]
 8004e6e:	4413      	add	r3, r2
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	0800e4d0 	.word	0x0800e4d0
 8004e84:	0800e708 	.word	0x0800e708
 8004e88:	0800e51c 	.word	0x0800e51c
 8004e8c:	0800e714 	.word	0x0800e714
 8004e90:	0800e734 	.word	0x0800e734

08004e94 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8004ea0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ff51 	bl	8004d50 <pbuf_header_impl>
 8004eae:	4603      	mov	r3, r0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8004ec4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff ff3f 	bl	8004d50 <pbuf_header_impl>
 8004ed2:	4603      	mov	r3, r0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10b      	bne.n	8004f02 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <pbuf_free+0x22>
 8004ef0:	4b3e      	ldr	r3, [pc, #248]	; (8004fec <pbuf_free+0x110>)
 8004ef2:	f240 22d2 	movw	r2, #722	; 0x2d2
 8004ef6:	493e      	ldr	r1, [pc, #248]	; (8004ff0 <pbuf_free+0x114>)
 8004ef8:	483e      	ldr	r0, [pc, #248]	; (8004ff4 <pbuf_free+0x118>)
 8004efa:	f008 f97b 	bl	800d1f4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e070      	b.n	8004fe4 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7b1b      	ldrb	r3, [r3, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d012      	beq.n	8004f30 <pbuf_free+0x54>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	7b1b      	ldrb	r3, [r3, #12]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d00e      	beq.n	8004f30 <pbuf_free+0x54>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	7b1b      	ldrb	r3, [r3, #12]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d00a      	beq.n	8004f30 <pbuf_free+0x54>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	7b1b      	ldrb	r3, [r3, #12]
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d006      	beq.n	8004f30 <pbuf_free+0x54>
 8004f22:	4b32      	ldr	r3, [pc, #200]	; (8004fec <pbuf_free+0x110>)
 8004f24:	f240 22de 	movw	r2, #734	; 0x2de
 8004f28:	4933      	ldr	r1, [pc, #204]	; (8004ff8 <pbuf_free+0x11c>)
 8004f2a:	4832      	ldr	r0, [pc, #200]	; (8004ff4 <pbuf_free+0x118>)
 8004f2c:	f008 f962 	bl	800d1f4 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004f34:	e052      	b.n	8004fdc <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	89db      	ldrh	r3, [r3, #14]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <pbuf_free+0x70>
 8004f3e:	4b2b      	ldr	r3, [pc, #172]	; (8004fec <pbuf_free+0x110>)
 8004f40:	f240 22eb 	movw	r2, #747	; 0x2eb
 8004f44:	492d      	ldr	r1, [pc, #180]	; (8004ffc <pbuf_free+0x120>)
 8004f46:	482b      	ldr	r0, [pc, #172]	; (8004ff4 <pbuf_free+0x118>)
 8004f48:	f008 f954 	bl	800d1f4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	89db      	ldrh	r3, [r3, #14]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	81da      	strh	r2, [r3, #14]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	89db      	ldrh	r3, [r3, #14]
 8004f5c:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004f5e:	8abb      	ldrh	r3, [r7, #20]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d139      	bne.n	8004fd8 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	7b1b      	ldrb	r3, [r3, #12]
 8004f6e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	7b5b      	ldrb	r3, [r3, #13]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d011      	beq.n	8004fa0 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d106      	bne.n	8004f96 <pbuf_free+0xba>
 8004f88:	4b18      	ldr	r3, [pc, #96]	; (8004fec <pbuf_free+0x110>)
 8004f8a:	f240 22f9 	movw	r2, #761	; 0x2f9
 8004f8e:	491c      	ldr	r1, [pc, #112]	; (8005000 <pbuf_free+0x124>)
 8004f90:	4818      	ldr	r0, [pc, #96]	; (8004ff4 <pbuf_free+0x118>)
 8004f92:	f008 f92f 	bl	800d1f4 <iprintf>
        pc->custom_free_function(p);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	4798      	blx	r3
 8004f9e:	e015      	b.n	8004fcc <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8004fa0:	89fb      	ldrh	r3, [r7, #14]
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d104      	bne.n	8004fb0 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	2008      	movs	r0, #8
 8004faa:	f7ff fa3b 	bl	8004424 <memp_free>
 8004fae:	e00d      	b.n	8004fcc <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004fb0:	89fb      	ldrh	r3, [r7, #14]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d002      	beq.n	8004fbc <pbuf_free+0xe0>
 8004fb6:	89fb      	ldrh	r3, [r7, #14]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d104      	bne.n	8004fc6 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	2007      	movs	r0, #7
 8004fc0:	f7ff fa30 	bl	8004424 <memp_free>
 8004fc4:	e002      	b.n	8004fcc <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fe ff40 	bl	8003e4c <mem_free>
        }
      }
      count++;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e001      	b.n	8004fdc <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1a9      	bne.n	8004f36 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	0800e4d0 	.word	0x0800e4d0
 8004ff0:	0800e708 	.word	0x0800e708
 8004ff4:	0800e51c 	.word	0x0800e51c
 8004ff8:	0800e744 	.word	0x0800e744
 8004ffc:	0800e75c 	.word	0x0800e75c
 8005000:	0800e774 	.word	0x0800e774

08005004 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005010:	e005      	b.n	800501e <pbuf_clen+0x1a>
    ++len;
 8005012:	89fb      	ldrh	r3, [r7, #14]
 8005014:	3301      	adds	r3, #1
 8005016:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f6      	bne.n	8005012 <pbuf_clen+0xe>
  }
  return len;
 8005024:	89fb      	ldrh	r3, [r7, #14]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d010      	beq.n	8005064 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	89db      	ldrh	r3, [r3, #14]
 8005046:	3301      	adds	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	89db      	ldrh	r3, [r3, #14]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d106      	bne.n	8005064 <pbuf_ref+0x30>
 8005056:	4b05      	ldr	r3, [pc, #20]	; (800506c <pbuf_ref+0x38>)
 8005058:	f240 3239 	movw	r2, #825	; 0x339
 800505c:	4904      	ldr	r1, [pc, #16]	; (8005070 <pbuf_ref+0x3c>)
 800505e:	4805      	ldr	r0, [pc, #20]	; (8005074 <pbuf_ref+0x40>)
 8005060:	f008 f8c8 	bl	800d1f4 <iprintf>
  }
}
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	0800e4d0 	.word	0x0800e4d0
 8005070:	0800e798 	.word	0x0800e798
 8005074:	0800e51c 	.word	0x0800e51c

08005078 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <pbuf_cat+0x16>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d107      	bne.n	800509e <pbuf_cat+0x26>
 800508e:	4b20      	ldr	r3, [pc, #128]	; (8005110 <pbuf_cat+0x98>)
 8005090:	f240 324d 	movw	r2, #845	; 0x34d
 8005094:	491f      	ldr	r1, [pc, #124]	; (8005114 <pbuf_cat+0x9c>)
 8005096:	4820      	ldr	r0, [pc, #128]	; (8005118 <pbuf_cat+0xa0>)
 8005098:	f008 f8ac 	bl	800d1f4 <iprintf>
 800509c:	e034      	b.n	8005108 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	e00a      	b.n	80050ba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	891a      	ldrh	r2, [r3, #8]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	891b      	ldrh	r3, [r3, #8]
 80050ac:	4413      	add	r3, r2
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1f0      	bne.n	80050a4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	891a      	ldrh	r2, [r3, #8]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	895b      	ldrh	r3, [r3, #10]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d006      	beq.n	80050dc <pbuf_cat+0x64>
 80050ce:	4b10      	ldr	r3, [pc, #64]	; (8005110 <pbuf_cat+0x98>)
 80050d0:	f240 3255 	movw	r2, #853	; 0x355
 80050d4:	4911      	ldr	r1, [pc, #68]	; (800511c <pbuf_cat+0xa4>)
 80050d6:	4810      	ldr	r0, [pc, #64]	; (8005118 <pbuf_cat+0xa0>)
 80050d8:	f008 f88c 	bl	800d1f4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d006      	beq.n	80050f2 <pbuf_cat+0x7a>
 80050e4:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <pbuf_cat+0x98>)
 80050e6:	f240 3256 	movw	r2, #854	; 0x356
 80050ea:	490d      	ldr	r1, [pc, #52]	; (8005120 <pbuf_cat+0xa8>)
 80050ec:	480a      	ldr	r0, [pc, #40]	; (8005118 <pbuf_cat+0xa0>)
 80050ee:	f008 f881 	bl	800d1f4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	891a      	ldrh	r2, [r3, #8]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	891b      	ldrh	r3, [r3, #8]
 80050fa:	4413      	add	r3, r2
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	0800e4d0 	.word	0x0800e4d0
 8005114:	0800e7ac 	.word	0x0800e7ac
 8005118:	0800e51c 	.word	0x0800e51c
 800511c:	0800e7e4 	.word	0x0800e7e4
 8005120:	0800e814 	.word	0x0800e814

08005124 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff ffa1 	bl	8005078 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005136:	6838      	ldr	r0, [r7, #0]
 8005138:	f7ff ff7c 	bl	8005034 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800514e:	2300      	movs	r3, #0
 8005150:	81fb      	strh	r3, [r7, #14]
 8005152:	2300      	movs	r3, #0
 8005154:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <pbuf_copy+0x2a>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <pbuf_copy+0x2a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	891a      	ldrh	r2, [r3, #8]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	891b      	ldrh	r3, [r3, #8]
 800516a:	429a      	cmp	r2, r3
 800516c:	d209      	bcs.n	8005182 <pbuf_copy+0x3e>
 800516e:	4b54      	ldr	r3, [pc, #336]	; (80052c0 <pbuf_copy+0x17c>)
 8005170:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005174:	4953      	ldr	r1, [pc, #332]	; (80052c4 <pbuf_copy+0x180>)
 8005176:	4854      	ldr	r0, [pc, #336]	; (80052c8 <pbuf_copy+0x184>)
 8005178:	f008 f83c 	bl	800d1f4 <iprintf>
 800517c:	f06f 030f 	mvn.w	r3, #15
 8005180:	e099      	b.n	80052b6 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	895b      	ldrh	r3, [r3, #10]
 8005186:	461a      	mov	r2, r3
 8005188:	89fb      	ldrh	r3, [r7, #14]
 800518a:	1ad2      	subs	r2, r2, r3
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	895b      	ldrh	r3, [r3, #10]
 8005190:	4619      	mov	r1, r3
 8005192:	89bb      	ldrh	r3, [r7, #12]
 8005194:	1acb      	subs	r3, r1, r3
 8005196:	429a      	cmp	r2, r3
 8005198:	db05      	blt.n	80051a6 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	895a      	ldrh	r2, [r3, #10]
 800519e:	89bb      	ldrh	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	817b      	strh	r3, [r7, #10]
 80051a4:	e004      	b.n	80051b0 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	895a      	ldrh	r2, [r3, #10]
 80051aa:	89fb      	ldrh	r3, [r7, #14]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	89fb      	ldrh	r3, [r7, #14]
 80051b6:	18d0      	adds	r0, r2, r3
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	89bb      	ldrh	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	897a      	ldrh	r2, [r7, #10]
 80051c2:	4619      	mov	r1, r3
 80051c4:	f008 f803 	bl	800d1ce <memcpy>
    offset_to += len;
 80051c8:	89fa      	ldrh	r2, [r7, #14]
 80051ca:	897b      	ldrh	r3, [r7, #10]
 80051cc:	4413      	add	r3, r2
 80051ce:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 80051d0:	89ba      	ldrh	r2, [r7, #12]
 80051d2:	897b      	ldrh	r3, [r7, #10]
 80051d4:	4413      	add	r3, r2
 80051d6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	895b      	ldrh	r3, [r3, #10]
 80051dc:	89fa      	ldrh	r2, [r7, #14]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d906      	bls.n	80051f0 <pbuf_copy+0xac>
 80051e2:	4b37      	ldr	r3, [pc, #220]	; (80052c0 <pbuf_copy+0x17c>)
 80051e4:	f240 32cd 	movw	r2, #973	; 0x3cd
 80051e8:	4938      	ldr	r1, [pc, #224]	; (80052cc <pbuf_copy+0x188>)
 80051ea:	4837      	ldr	r0, [pc, #220]	; (80052c8 <pbuf_copy+0x184>)
 80051ec:	f008 f802 	bl	800d1f4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	895b      	ldrh	r3, [r3, #10]
 80051f4:	89ba      	ldrh	r2, [r7, #12]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d906      	bls.n	8005208 <pbuf_copy+0xc4>
 80051fa:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <pbuf_copy+0x17c>)
 80051fc:	f240 32ce 	movw	r2, #974	; 0x3ce
 8005200:	4933      	ldr	r1, [pc, #204]	; (80052d0 <pbuf_copy+0x18c>)
 8005202:	4831      	ldr	r0, [pc, #196]	; (80052c8 <pbuf_copy+0x184>)
 8005204:	f007 fff6 	bl	800d1f4 <iprintf>
    if (offset_from >= p_from->len) {
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	895b      	ldrh	r3, [r3, #10]
 800520c:	89ba      	ldrh	r2, [r7, #12]
 800520e:	429a      	cmp	r2, r3
 8005210:	d304      	bcc.n	800521c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005212:	2300      	movs	r3, #0
 8005214:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	895b      	ldrh	r3, [r3, #10]
 8005220:	89fa      	ldrh	r2, [r7, #14]
 8005222:	429a      	cmp	r2, r3
 8005224:	d114      	bne.n	8005250 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10c      	bne.n	8005250 <pbuf_copy+0x10c>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d009      	beq.n	8005250 <pbuf_copy+0x10c>
 800523c:	4b20      	ldr	r3, [pc, #128]	; (80052c0 <pbuf_copy+0x17c>)
 800523e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8005242:	4924      	ldr	r1, [pc, #144]	; (80052d4 <pbuf_copy+0x190>)
 8005244:	4820      	ldr	r0, [pc, #128]	; (80052c8 <pbuf_copy+0x184>)
 8005246:	f007 ffd5 	bl	800d1f4 <iprintf>
 800524a:	f06f 030f 	mvn.w	r3, #15
 800524e:	e032      	b.n	80052b6 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d013      	beq.n	800527e <pbuf_copy+0x13a>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	895a      	ldrh	r2, [r3, #10]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	891b      	ldrh	r3, [r3, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	d10d      	bne.n	800527e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <pbuf_copy+0x13a>
 800526a:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <pbuf_copy+0x17c>)
 800526c:	f240 32de 	movw	r2, #990	; 0x3de
 8005270:	4919      	ldr	r1, [pc, #100]	; (80052d8 <pbuf_copy+0x194>)
 8005272:	4815      	ldr	r0, [pc, #84]	; (80052c8 <pbuf_copy+0x184>)
 8005274:	f007 ffbe 	bl	800d1f4 <iprintf>
 8005278:	f06f 0305 	mvn.w	r3, #5
 800527c:	e01b      	b.n	80052b6 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d013      	beq.n	80052ac <pbuf_copy+0x168>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	895a      	ldrh	r2, [r3, #10]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	891b      	ldrh	r3, [r3, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	d10d      	bne.n	80052ac <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d009      	beq.n	80052ac <pbuf_copy+0x168>
 8005298:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <pbuf_copy+0x17c>)
 800529a:	f240 32e3 	movw	r2, #995	; 0x3e3
 800529e:	490e      	ldr	r1, [pc, #56]	; (80052d8 <pbuf_copy+0x194>)
 80052a0:	4809      	ldr	r0, [pc, #36]	; (80052c8 <pbuf_copy+0x184>)
 80052a2:	f007 ffa7 	bl	800d1f4 <iprintf>
 80052a6:	f06f 0305 	mvn.w	r3, #5
 80052aa:	e004      	b.n	80052b6 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f47f af67 	bne.w	8005182 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	0800e4d0 	.word	0x0800e4d0
 80052c4:	0800e860 	.word	0x0800e860
 80052c8:	0800e51c 	.word	0x0800e51c
 80052cc:	0800e890 	.word	0x0800e890
 80052d0:	0800e8a8 	.word	0x0800e8a8
 80052d4:	0800e8c4 	.word	0x0800e8c4
 80052d8:	0800e8d4 	.word	0x0800e8d4

080052dc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	4611      	mov	r1, r2
 80052e8:	461a      	mov	r2, r3
 80052ea:	460b      	mov	r3, r1
 80052ec:	80fb      	strh	r3, [r7, #6]
 80052ee:	4613      	mov	r3, r2
 80052f0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d108      	bne.n	800530e <pbuf_copy_partial+0x32>
 80052fc:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <pbuf_copy_partial+0xe4>)
 80052fe:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8005302:	4930      	ldr	r1, [pc, #192]	; (80053c4 <pbuf_copy_partial+0xe8>)
 8005304:	4830      	ldr	r0, [pc, #192]	; (80053c8 <pbuf_copy_partial+0xec>)
 8005306:	f007 ff75 	bl	800d1f4 <iprintf>
 800530a:	2300      	movs	r3, #0
 800530c:	e054      	b.n	80053b8 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d108      	bne.n	8005326 <pbuf_copy_partial+0x4a>
 8005314:	4b2a      	ldr	r3, [pc, #168]	; (80053c0 <pbuf_copy_partial+0xe4>)
 8005316:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800531a:	492c      	ldr	r1, [pc, #176]	; (80053cc <pbuf_copy_partial+0xf0>)
 800531c:	482a      	ldr	r0, [pc, #168]	; (80053c8 <pbuf_copy_partial+0xec>)
 800531e:	f007 ff69 	bl	800d1f4 <iprintf>
 8005322:	2300      	movs	r3, #0
 8005324:	e048      	b.n	80053b8 <pbuf_copy_partial+0xdc>

  left = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <pbuf_copy_partial+0x5a>
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <pbuf_copy_partial+0x5e>
    return 0;
 8005336:	2300      	movs	r3, #0
 8005338:	e03e      	b.n	80053b8 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	61fb      	str	r3, [r7, #28]
 800533e:	e034      	b.n	80053aa <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8005340:	88bb      	ldrh	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00a      	beq.n	800535c <pbuf_copy_partial+0x80>
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	895b      	ldrh	r3, [r3, #10]
 800534a:	88ba      	ldrh	r2, [r7, #4]
 800534c:	429a      	cmp	r2, r3
 800534e:	d305      	bcc.n	800535c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	895b      	ldrh	r3, [r3, #10]
 8005354:	88ba      	ldrh	r2, [r7, #4]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	80bb      	strh	r3, [r7, #4]
 800535a:	e023      	b.n	80053a4 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	895a      	ldrh	r2, [r3, #10]
 8005360:	88bb      	ldrh	r3, [r7, #4]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005366:	8b3a      	ldrh	r2, [r7, #24]
 8005368:	88fb      	ldrh	r3, [r7, #6]
 800536a:	429a      	cmp	r2, r3
 800536c:	d901      	bls.n	8005372 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8005372:	8b7b      	ldrh	r3, [r7, #26]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	18d0      	adds	r0, r2, r3
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	88bb      	ldrh	r3, [r7, #4]
 800537e:	4413      	add	r3, r2
 8005380:	8b3a      	ldrh	r2, [r7, #24]
 8005382:	4619      	mov	r1, r3
 8005384:	f007 ff23 	bl	800d1ce <memcpy>
      copied_total += buf_copy_len;
 8005388:	8afa      	ldrh	r2, [r7, #22]
 800538a:	8b3b      	ldrh	r3, [r7, #24]
 800538c:	4413      	add	r3, r2
 800538e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8005390:	8b7a      	ldrh	r2, [r7, #26]
 8005392:	8b3b      	ldrh	r3, [r7, #24]
 8005394:	4413      	add	r3, r2
 8005396:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8005398:	88fa      	ldrh	r2, [r7, #6]
 800539a:	8b3b      	ldrh	r3, [r7, #24]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <pbuf_copy_partial+0xda>
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1c4      	bne.n	8005340 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80053b6:	8afb      	ldrh	r3, [r7, #22]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	0800e4d0 	.word	0x0800e4d0
 80053c4:	0800e900 	.word	0x0800e900
 80053c8:	0800e51c 	.word	0x0800e51c
 80053cc:	0800e920 	.word	0x0800e920

080053d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80053d4:	bf00      	nop
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
	...

080053e0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80053e4:	f000 ff84 	bl	80062f0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80053e8:	4b07      	ldr	r3, [pc, #28]	; (8005408 <tcp_tmr+0x28>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	3301      	adds	r3, #1
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	4b05      	ldr	r3, [pc, #20]	; (8005408 <tcp_tmr+0x28>)
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	4b04      	ldr	r3, [pc, #16]	; (8005408 <tcp_tmr+0x28>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005400:	f000 fcb6 	bl	8005d70 <tcp_slowtmr>
  }
}
 8005404:	bf00      	nop
 8005406:	bd80      	pop	{r7, pc}
 8005408:	200000c1 	.word	0x200000c1

0800540c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	e00a      	b.n	8005432 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d102      	bne.n	800542c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1f1      	bne.n	800541c <tcp_remove_listener+0x10>
      }
   }
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d105      	bne.n	800545e <tcp_listen_closed+0x1a>
 8005452:	4b13      	ldr	r3, [pc, #76]	; (80054a0 <tcp_listen_closed+0x5c>)
 8005454:	22c0      	movs	r2, #192	; 0xc0
 8005456:	4913      	ldr	r1, [pc, #76]	; (80054a4 <tcp_listen_closed+0x60>)
 8005458:	4813      	ldr	r0, [pc, #76]	; (80054a8 <tcp_listen_closed+0x64>)
 800545a:	f007 fecb 	bl	800d1f4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	7d1b      	ldrb	r3, [r3, #20]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d005      	beq.n	8005472 <tcp_listen_closed+0x2e>
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <tcp_listen_closed+0x5c>)
 8005468:	22c1      	movs	r2, #193	; 0xc1
 800546a:	4910      	ldr	r1, [pc, #64]	; (80054ac <tcp_listen_closed+0x68>)
 800546c:	480e      	ldr	r0, [pc, #56]	; (80054a8 <tcp_listen_closed+0x64>)
 800546e:	f007 fec1 	bl	800d1f4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005472:	2301      	movs	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e00b      	b.n	8005490 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8005478:	4a0d      	ldr	r2, [pc, #52]	; (80054b0 <tcp_listen_closed+0x6c>)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff ffc1 	bl	800540c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3301      	adds	r3, #1
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b03      	cmp	r3, #3
 8005494:	d9f0      	bls.n	8005478 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005496:	bf00      	nop
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	0800ea54 	.word	0x0800ea54
 80054a4:	0800ea84 	.word	0x0800ea84
 80054a8:	0800ea90 	.word	0x0800ea90
 80054ac:	0800eab8 	.word	0x0800eab8
 80054b0:	0800fe98 	.word	0x0800fe98

080054b4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80054b4:	b5b0      	push	{r4, r5, r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	460b      	mov	r3, r1
 80054be:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d076      	beq.n	80055b4 <tcp_close_shutdown+0x100>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7d1b      	ldrb	r3, [r3, #20]
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d003      	beq.n	80054d6 <tcp_close_shutdown+0x22>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	7d1b      	ldrb	r3, [r3, #20]
 80054d2:	2b07      	cmp	r3, #7
 80054d4:	d16e      	bne.n	80055b4 <tcp_close_shutdown+0x100>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d105      	bne.n	80054ea <tcp_close_shutdown+0x36>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d064      	beq.n	80055b4 <tcp_close_shutdown+0x100>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	7e9b      	ldrb	r3, [r3, #26]
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <tcp_close_shutdown+0x50>
 80054f6:	4b5a      	ldr	r3, [pc, #360]	; (8005660 <tcp_close_shutdown+0x1ac>)
 80054f8:	f240 120f 	movw	r2, #271	; 0x10f
 80054fc:	4959      	ldr	r1, [pc, #356]	; (8005664 <tcp_close_shutdown+0x1b0>)
 80054fe:	485a      	ldr	r0, [pc, #360]	; (8005668 <tcp_close_shutdown+0x1b4>)
 8005500:	f007 fe78 	bl	800d1f4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800550c:	687c      	ldr	r4, [r7, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	1d1d      	adds	r5, r3, #4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8adb      	ldrh	r3, [r3, #22]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	8b12      	ldrh	r2, [r2, #24]
 800551a:	9201      	str	r2, [sp, #4]
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	462b      	mov	r3, r5
 8005520:	4622      	mov	r2, r4
 8005522:	f004 fef1 	bl	800a308 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f001 fa22 	bl	8006970 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800552c:	4b4f      	ldr	r3, [pc, #316]	; (800566c <tcp_close_shutdown+0x1b8>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	429a      	cmp	r2, r3
 8005534:	d105      	bne.n	8005542 <tcp_close_shutdown+0x8e>
 8005536:	4b4d      	ldr	r3, [pc, #308]	; (800566c <tcp_close_shutdown+0x1b8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4a4b      	ldr	r2, [pc, #300]	; (800566c <tcp_close_shutdown+0x1b8>)
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	e013      	b.n	800556a <tcp_close_shutdown+0xb6>
 8005542:	4b4a      	ldr	r3, [pc, #296]	; (800566c <tcp_close_shutdown+0x1b8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	e00c      	b.n	8005564 <tcp_close_shutdown+0xb0>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	429a      	cmp	r2, r3
 8005552:	d104      	bne.n	800555e <tcp_close_shutdown+0xaa>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	60da      	str	r2, [r3, #12]
 800555c:	e005      	b.n	800556a <tcp_close_shutdown+0xb6>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1ef      	bne.n	800554a <tcp_close_shutdown+0x96>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	60da      	str	r2, [r3, #12]
 8005570:	4b3f      	ldr	r3, [pc, #252]	; (8005670 <tcp_close_shutdown+0x1bc>)
 8005572:	2201      	movs	r2, #1
 8005574:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	7d1b      	ldrb	r3, [r3, #20]
 800557a:	2b04      	cmp	r3, #4
 800557c:	d10c      	bne.n	8005598 <tcp_close_shutdown+0xe4>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	220a      	movs	r2, #10
 8005582:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8005584:	4b3b      	ldr	r3, [pc, #236]	; (8005674 <tcp_close_shutdown+0x1c0>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60da      	str	r2, [r3, #12]
 800558c:	4a39      	ldr	r2, [pc, #228]	; (8005674 <tcp_close_shutdown+0x1c0>)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	f005 f909 	bl	800a7a8 <tcp_timer_needed>
 8005596:	e00b      	b.n	80055b0 <tcp_close_shutdown+0xfc>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8005598:	4b37      	ldr	r3, [pc, #220]	; (8005678 <tcp_close_shutdown+0x1c4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d102      	bne.n	80055a8 <tcp_close_shutdown+0xf4>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80055a2:	f003 fd49 	bl	8009038 <tcp_trigger_input_pcb_close>
 80055a6:	e003      	b.n	80055b0 <tcp_close_shutdown+0xfc>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	2001      	movs	r0, #1
 80055ac:	f7fe ff3a 	bl	8004424 <memp_free>
        }
      }
      return ERR_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	e050      	b.n	8005656 <tcp_close_shutdown+0x1a2>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	7d1b      	ldrb	r3, [r3, #20]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d02e      	beq.n	800561a <tcp_close_shutdown+0x166>
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d038      	beq.n	8005632 <tcp_close_shutdown+0x17e>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d142      	bne.n	800564a <tcp_close_shutdown+0x196>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	8adb      	ldrh	r3, [r3, #22]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d021      	beq.n	8005610 <tcp_close_shutdown+0x15c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80055cc:	4b2b      	ldr	r3, [pc, #172]	; (800567c <tcp_close_shutdown+0x1c8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d105      	bne.n	80055e2 <tcp_close_shutdown+0x12e>
 80055d6:	4b29      	ldr	r3, [pc, #164]	; (800567c <tcp_close_shutdown+0x1c8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4a27      	ldr	r2, [pc, #156]	; (800567c <tcp_close_shutdown+0x1c8>)
 80055de:	6013      	str	r3, [r2, #0]
 80055e0:	e013      	b.n	800560a <tcp_close_shutdown+0x156>
 80055e2:	4b26      	ldr	r3, [pc, #152]	; (800567c <tcp_close_shutdown+0x1c8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60bb      	str	r3, [r7, #8]
 80055e8:	e00c      	b.n	8005604 <tcp_close_shutdown+0x150>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d104      	bne.n	80055fe <tcp_close_shutdown+0x14a>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	60da      	str	r2, [r3, #12]
 80055fc:	e005      	b.n	800560a <tcp_close_shutdown+0x156>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1ef      	bne.n	80055ea <tcp_close_shutdown+0x136>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	2001      	movs	r0, #1
 8005614:	f7fe ff06 	bl	8004424 <memp_free>
    break;
 8005618:	e01c      	b.n	8005654 <tcp_close_shutdown+0x1a0>
  case LISTEN:
    tcp_listen_closed(pcb);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7ff ff12 	bl	8005444 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4817      	ldr	r0, [pc, #92]	; (8005680 <tcp_close_shutdown+0x1cc>)
 8005624:	f001 f9e6 	bl	80069f4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	2002      	movs	r0, #2
 800562c:	f7fe fefa 	bl	8004424 <memp_free>
    break;
 8005630:	e010      	b.n	8005654 <tcp_close_shutdown+0x1a0>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	480d      	ldr	r0, [pc, #52]	; (800566c <tcp_close_shutdown+0x1b8>)
 8005636:	f001 f9dd 	bl	80069f4 <tcp_pcb_remove>
 800563a:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <tcp_close_shutdown+0x1bc>)
 800563c:	2201      	movs	r2, #1
 800563e:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	2001      	movs	r0, #1
 8005644:	f7fe feee 	bl	8004424 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8005648:	e004      	b.n	8005654 <tcp_close_shutdown+0x1a0>
  default:
    return tcp_close_shutdown_fin(pcb);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f81a 	bl	8005684 <tcp_close_shutdown_fin>
 8005650:	4603      	mov	r3, r0
 8005652:	e000      	b.n	8005656 <tcp_close_shutdown+0x1a2>
  }
  return ERR_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bdb0      	pop	{r4, r5, r7, pc}
 800565e:	bf00      	nop
 8005660:	0800ea54 	.word	0x0800ea54
 8005664:	0800ead0 	.word	0x0800ead0
 8005668:	0800ea90 	.word	0x0800ea90
 800566c:	2000c6c8 	.word	0x2000c6c8
 8005670:	2000c6c4 	.word	0x2000c6c4
 8005674:	2000c6d8 	.word	0x2000c6d8
 8005678:	2000c6dc 	.word	0x2000c6dc
 800567c:	2000c6d4 	.word	0x2000c6d4
 8005680:	2000c6d0 	.word	0x2000c6d0

08005684 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <tcp_close_shutdown_fin+0x1c>
 8005692:	4b2c      	ldr	r3, [pc, #176]	; (8005744 <tcp_close_shutdown_fin+0xc0>)
 8005694:	f240 124d 	movw	r2, #333	; 0x14d
 8005698:	492b      	ldr	r1, [pc, #172]	; (8005748 <tcp_close_shutdown_fin+0xc4>)
 800569a:	482c      	ldr	r0, [pc, #176]	; (800574c <tcp_close_shutdown_fin+0xc8>)
 800569c:	f007 fdaa 	bl	800d1f4 <iprintf>

  switch (pcb->state) {
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	7d1b      	ldrb	r3, [r3, #20]
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d010      	beq.n	80056ca <tcp_close_shutdown_fin+0x46>
 80056a8:	2b07      	cmp	r3, #7
 80056aa:	d01b      	beq.n	80056e4 <tcp_close_shutdown_fin+0x60>
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d126      	bne.n	80056fe <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f003 fd4d 	bl	8009150 <tcp_send_fin>
 80056b6:	4603      	mov	r3, r0
 80056b8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80056ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d11f      	bne.n	8005702 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2205      	movs	r2, #5
 80056c6:	751a      	strb	r2, [r3, #20]
    }
    break;
 80056c8:	e01b      	b.n	8005702 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f003 fd40 	bl	8009150 <tcp_send_fin>
 80056d0:	4603      	mov	r3, r0
 80056d2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80056d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d114      	bne.n	8005706 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2205      	movs	r2, #5
 80056e0:	751a      	strb	r2, [r3, #20]
    }
    break;
 80056e2:	e010      	b.n	8005706 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f003 fd33 	bl	8009150 <tcp_send_fin>
 80056ea:	4603      	mov	r3, r0
 80056ec:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80056ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2209      	movs	r2, #9
 80056fa:	751a      	strb	r2, [r3, #20]
    }
    break;
 80056fc:	e005      	b.n	800570a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	e01c      	b.n	800573c <tcp_close_shutdown_fin+0xb8>
    break;
 8005702:	bf00      	nop
 8005704:	e002      	b.n	800570c <tcp_close_shutdown_fin+0x88>
    break;
 8005706:	bf00      	nop
 8005708:	e000      	b.n	800570c <tcp_close_shutdown_fin+0x88>
    break;
 800570a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800570c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d103      	bne.n	800571c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f004 fb6d 	bl	8009df4 <tcp_output>
 800571a:	e00d      	b.n	8005738 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800571c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005724:	d108      	bne.n	8005738 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	7e9b      	ldrb	r3, [r3, #26]
 800572a:	f043 0308 	orr.w	r3, r3, #8
 800572e:	b2da      	uxtb	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	e001      	b.n	800573c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8005738:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	0800ea54 	.word	0x0800ea54
 8005748:	0800ea84 	.word	0x0800ea84
 800574c:	0800ea90 	.word	0x0800ea90

08005750 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	7d1b      	ldrb	r3, [r3, #20]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d006      	beq.n	800576e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	7e9b      	ldrb	r3, [r3, #26]
 8005764:	f043 0310 	orr.w	r3, r3, #16
 8005768:	b2da      	uxtb	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800576e:	2101      	movs	r1, #1
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f7ff fe9f 	bl	80054b4 <tcp_close_shutdown>
 8005776:	4603      	mov	r3, r0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08c      	sub	sp, #48	; 0x30
 8005784:	af02      	add	r7, sp, #8
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	7d1b      	ldrb	r3, [r3, #20]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d106      	bne.n	80057a0 <tcp_abandon+0x20>
 8005792:	4b4d      	ldr	r3, [pc, #308]	; (80058c8 <tcp_abandon+0x148>)
 8005794:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005798:	494c      	ldr	r1, [pc, #304]	; (80058cc <tcp_abandon+0x14c>)
 800579a:	484d      	ldr	r0, [pc, #308]	; (80058d0 <tcp_abandon+0x150>)
 800579c:	f007 fd2a 	bl	800d1f4 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	7d1b      	ldrb	r3, [r3, #20]
 80057a4:	2b0a      	cmp	r3, #10
 80057a6:	d108      	bne.n	80057ba <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	484a      	ldr	r0, [pc, #296]	; (80058d4 <tcp_abandon+0x154>)
 80057ac:	f001 f922 	bl	80069f4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	2001      	movs	r0, #1
 80057b4:	f7fe fe36 	bl	8004424 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80057b8:	e081      	b.n	80058be <tcp_abandon+0x13e>
    int send_rst = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057cc:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	7d1b      	ldrb	r3, [r3, #20]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d126      	bne.n	8005832 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8adb      	ldrh	r3, [r3, #22]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d02e      	beq.n	800584a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80057ec:	4b3a      	ldr	r3, [pc, #232]	; (80058d8 <tcp_abandon+0x158>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d105      	bne.n	8005802 <tcp_abandon+0x82>
 80057f6:	4b38      	ldr	r3, [pc, #224]	; (80058d8 <tcp_abandon+0x158>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	4a36      	ldr	r2, [pc, #216]	; (80058d8 <tcp_abandon+0x158>)
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	e013      	b.n	800582a <tcp_abandon+0xaa>
 8005802:	4b35      	ldr	r3, [pc, #212]	; (80058d8 <tcp_abandon+0x158>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	61fb      	str	r3, [r7, #28]
 8005808:	e00c      	b.n	8005824 <tcp_abandon+0xa4>
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	429a      	cmp	r2, r3
 8005812:	d104      	bne.n	800581e <tcp_abandon+0x9e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	60da      	str	r2, [r3, #12]
 800581c:	e005      	b.n	800582a <tcp_abandon+0xaa>
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	61fb      	str	r3, [r7, #28]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1ef      	bne.n	800580a <tcp_abandon+0x8a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	60da      	str	r2, [r3, #12]
 8005830:	e00b      	b.n	800584a <tcp_abandon+0xca>
      send_rst = reset;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8adb      	ldrh	r3, [r3, #22]
 800583a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	4827      	ldr	r0, [pc, #156]	; (80058dc <tcp_abandon+0x15c>)
 8005840:	f001 f8d8 	bl	80069f4 <tcp_pcb_remove>
 8005844:	4b26      	ldr	r3, [pc, #152]	; (80058e0 <tcp_abandon+0x160>)
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fe18 	bl	800648c <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005860:	2b00      	cmp	r3, #0
 8005862:	d004      	beq.n	800586e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fe0f 	bl	800648c <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005872:	2b00      	cmp	r3, #0
 8005874:	d004      	beq.n	8005880 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fe06 	bl	800648c <tcp_segs_free>
    if (send_rst) {
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00c      	beq.n	80058a0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	1d19      	adds	r1, r3, #4
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	8b1b      	ldrh	r3, [r3, #24]
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	460b      	mov	r3, r1
 8005898:	6979      	ldr	r1, [r7, #20]
 800589a:	69b8      	ldr	r0, [r7, #24]
 800589c:	f004 fd34 	bl	800a308 <tcp_rst>
    last_state = pcb->state;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	7d1b      	ldrb	r3, [r3, #20]
 80058a4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	2001      	movs	r0, #1
 80058aa:	f7fe fdbb 	bl	8004424 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <tcp_abandon+0x13e>
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f06f 010c 	mvn.w	r1, #12
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	4798      	blx	r3
}
 80058be:	bf00      	nop
 80058c0:	3728      	adds	r7, #40	; 0x28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	0800ea54 	.word	0x0800ea54
 80058cc:	0800eaec 	.word	0x0800eaec
 80058d0:	0800ea90 	.word	0x0800ea90
 80058d4:	2000c6d8 	.word	0x2000c6d8
 80058d8:	2000c6d4 	.word	0x2000c6d4
 80058dc:	2000c6c8 	.word	0x2000c6c8
 80058e0:	2000c6c4 	.word	0x2000c6c4

080058e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80058ec:	2101      	movs	r1, #1
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff ff46 	bl	8005780 <tcp_abandon>
}
 80058f4:	bf00      	nop
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b088      	sub	sp, #32
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800590a:	2304      	movs	r3, #4
 800590c:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8005914:	4b3c      	ldr	r3, [pc, #240]	; (8005a08 <tcp_bind+0x10c>)
 8005916:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <tcp_bind+0x28>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <tcp_bind+0x2e>
    return ERR_VAL;
 8005924:	f06f 0305 	mvn.w	r3, #5
 8005928:	e06a      	b.n	8005a00 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	7d1b      	ldrb	r3, [r3, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d009      	beq.n	8005946 <tcp_bind+0x4a>
 8005932:	4b36      	ldr	r3, [pc, #216]	; (8005a0c <tcp_bind+0x110>)
 8005934:	f44f 7211 	mov.w	r2, #580	; 0x244
 8005938:	4935      	ldr	r1, [pc, #212]	; (8005a10 <tcp_bind+0x114>)
 800593a:	4836      	ldr	r0, [pc, #216]	; (8005a14 <tcp_bind+0x118>)
 800593c:	f007 fc5a 	bl	800d1f4 <iprintf>
 8005940:	f06f 0305 	mvn.w	r3, #5
 8005944:	e05c      	b.n	8005a00 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d109      	bne.n	8005960 <tcp_bind+0x64>
    port = tcp_new_port();
 800594c:	f000 f9cc 	bl	8005ce8 <tcp_new_port>
 8005950:	4603      	mov	r3, r0
 8005952:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d135      	bne.n	80059c6 <tcp_bind+0xca>
      return ERR_BUF;
 800595a:	f06f 0301 	mvn.w	r3, #1
 800595e:	e04f      	b.n	8005a00 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8005960:	2300      	movs	r3, #0
 8005962:	61fb      	str	r3, [r7, #28]
 8005964:	e02b      	b.n	80059be <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8005966:	4a2c      	ldr	r2, [pc, #176]	; (8005a18 <tcp_bind+0x11c>)
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e01e      	b.n	80059b2 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	8adb      	ldrh	r3, [r3, #22]
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	429a      	cmp	r2, r3
 800597c:	d116      	bne.n	80059ac <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800597e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8005980:	2b00      	cmp	r3, #0
 8005982:	d010      	beq.n	80059a6 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00c      	beq.n	80059a6 <tcp_bind+0xaa>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d102      	bne.n	80059ac <tcp_bind+0xb0>
              return ERR_USE;
 80059a6:	f06f 0307 	mvn.w	r3, #7
 80059aa:	e029      	b.n	8005a00 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	61bb      	str	r3, [r7, #24]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1dd      	bne.n	8005974 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	3301      	adds	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	dbcf      	blt.n	8005966 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00c      	beq.n	80059e6 <tcp_bind+0xea>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d008      	beq.n	80059e6 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <tcp_bind+0xe4>
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	e000      	b.n	80059e2 <tcp_bind+0xe6>
 80059e0:	2300      	movs	r3, #0
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	88fa      	ldrh	r2, [r7, #6]
 80059ea:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <tcp_bind+0x120>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	60da      	str	r2, [r3, #12]
 80059f4:	4a09      	ldr	r2, [pc, #36]	; (8005a1c <tcp_bind+0x120>)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	f004 fed5 	bl	800a7a8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3720      	adds	r7, #32
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	0800fec0 	.word	0x0800fec0
 8005a0c:	0800ea54 	.word	0x0800ea54
 8005a10:	0800eb20 	.word	0x0800eb20
 8005a14:	0800ea90 	.word	0x0800ea90
 8005a18:	0800fe98 	.word	0x0800fe98
 8005a1c:	2000c6d4 	.word	0x2000c6d4

08005a20 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 8005a2e:	68b8      	ldr	r0, [r7, #8]
 8005a30:	f7ff ff58 	bl	80058e4 <tcp_abort>

  return ERR_ABRT;
 8005a34:	f06f 030c 	mvn.w	r3, #12
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f806 	bl	8005a64 <tcp_listen_with_backlog_and_err>
 8005a58:	4603      	mov	r3, r0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	7d1b      	ldrb	r3, [r3, #20]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <tcp_listen_with_backlog_and_err+0x2e>
 8005a7e:	4b3f      	ldr	r3, [pc, #252]	; (8005b7c <tcp_listen_with_backlog_and_err+0x118>)
 8005a80:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8005a84:	493e      	ldr	r1, [pc, #248]	; (8005b80 <tcp_listen_with_backlog_and_err+0x11c>)
 8005a86:	483f      	ldr	r0, [pc, #252]	; (8005b84 <tcp_listen_with_backlog_and_err+0x120>)
 8005a88:	f007 fbb4 	bl	800d1f4 <iprintf>
 8005a8c:	23f1      	movs	r3, #241	; 0xf1
 8005a8e:	76fb      	strb	r3, [r7, #27]
 8005a90:	e069      	b.n	8005b66 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	7d1b      	ldrb	r3, [r3, #20]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d104      	bne.n	8005aa4 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8005a9e:	23f7      	movs	r3, #247	; 0xf7
 8005aa0:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005aa2:	e060      	b.n	8005b66 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8005aa4:	2002      	movs	r0, #2
 8005aa6:	f7fe fc71 	bl	800438c <memp_malloc>
 8005aaa:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d102      	bne.n	8005ab8 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 8005ab2:	23ff      	movs	r3, #255	; 0xff
 8005ab4:	76fb      	strb	r3, [r7, #27]
    goto done;
 8005ab6:	e056      	b.n	8005b66 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8ada      	ldrh	r2, [r3, #22]
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	2201      	movs	r2, #1
 8005acc:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	7d5a      	ldrb	r2, [r3, #21]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	7a1a      	ldrb	r2, [r3, #8]
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	7a9a      	ldrb	r2, [r3, #10]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	7a5a      	ldrb	r2, [r3, #9]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8adb      	ldrh	r3, [r3, #22]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d021      	beq.n	8005b42 <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8005afe:	4b22      	ldr	r3, [pc, #136]	; (8005b88 <tcp_listen_with_backlog_and_err+0x124>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d105      	bne.n	8005b14 <tcp_listen_with_backlog_and_err+0xb0>
 8005b08:	4b1f      	ldr	r3, [pc, #124]	; (8005b88 <tcp_listen_with_backlog_and_err+0x124>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	4a1e      	ldr	r2, [pc, #120]	; (8005b88 <tcp_listen_with_backlog_and_err+0x124>)
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e013      	b.n	8005b3c <tcp_listen_with_backlog_and_err+0xd8>
 8005b14:	4b1c      	ldr	r3, [pc, #112]	; (8005b88 <tcp_listen_with_backlog_and_err+0x124>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	617b      	str	r3, [r7, #20]
 8005b1a:	e00c      	b.n	8005b36 <tcp_listen_with_backlog_and_err+0xd2>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d104      	bne.n	8005b30 <tcp_listen_with_backlog_and_err+0xcc>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	60da      	str	r2, [r3, #12]
 8005b2e:	e005      	b.n	8005b3c <tcp_listen_with_backlog_and_err+0xd8>
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1ef      	bne.n	8005b1c <tcp_listen_with_backlog_and_err+0xb8>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	2001      	movs	r0, #1
 8005b46:	f7fe fc6d 	bl	8004424 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4a0f      	ldr	r2, [pc, #60]	; (8005b8c <tcp_listen_with_backlog_and_err+0x128>)
 8005b4e:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8005b50:	4b0f      	ldr	r3, [pc, #60]	; (8005b90 <tcp_listen_with_backlog_and_err+0x12c>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	60da      	str	r2, [r3, #12]
 8005b58:	4a0d      	ldr	r2, [pc, #52]	; (8005b90 <tcp_listen_with_backlog_and_err+0x12c>)
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	f004 fe23 	bl	800a7a8 <tcp_timer_needed>
  res = ERR_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	7efa      	ldrb	r2, [r7, #27]
 8005b70:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8005b72:	69fb      	ldr	r3, [r7, #28]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3720      	adds	r7, #32
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	0800ea54 	.word	0x0800ea54
 8005b80:	0800eb48 	.word	0x0800eb48
 8005b84:	0800ea90 	.word	0x0800ea90
 8005b88:	2000c6d4 	.word	0x2000c6d4
 8005b8c:	08005a21 	.word	0x08005a21
 8005b90:	2000c6d0 	.word	0x2000c6d0

08005b94 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005ba4:	4413      	add	r3, r2
 8005ba6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005bb0:	f640 3168 	movw	r1, #2920	; 0xb68
 8005bb4:	428a      	cmp	r2, r1
 8005bb6:	bf28      	it	cs
 8005bb8:	460a      	movcs	r2, r1
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	db08      	blt.n	8005bd8 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	e020      	b.n	8005c1a <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dd03      	ble.n	8005bee <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005bec:	e014      	b.n	8005c18 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c00:	d306      	bcc.n	8005c10 <tcp_update_rcv_ann_wnd+0x7c>
 8005c02:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <tcp_update_rcv_ann_wnd+0x90>)
 8005c04:	f44f 7242 	mov.w	r2, #776	; 0x308
 8005c08:	4907      	ldr	r1, [pc, #28]	; (8005c28 <tcp_update_rcv_ann_wnd+0x94>)
 8005c0a:	4808      	ldr	r0, [pc, #32]	; (8005c2c <tcp_update_rcv_ann_wnd+0x98>)
 8005c0c:	f007 faf2 	bl	800d1f4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	b29a      	uxth	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005c18:	2300      	movs	r3, #0
  }
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	0800ea54 	.word	0x0800ea54
 8005c28:	0800eb6c 	.word	0x0800eb6c
 8005c2c:	0800ea90 	.word	0x0800ea90

08005c30 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	7d1b      	ldrb	r3, [r3, #20]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d106      	bne.n	8005c52 <tcp_recved+0x22>
 8005c44:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <tcp_recved+0xa8>)
 8005c46:	f44f 7248 	mov.w	r2, #800	; 0x320
 8005c4a:	4924      	ldr	r1, [pc, #144]	; (8005cdc <tcp_recved+0xac>)
 8005c4c:	4824      	ldr	r0, [pc, #144]	; (8005ce0 <tcp_recved+0xb0>)
 8005c4e:	f007 fad1 	bl	800d1f4 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005c56:	887b      	ldrh	r3, [r7, #2]
 8005c58:	4413      	add	r3, r2
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c64:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d904      	bls.n	8005c76 <tcp_recved+0x46>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8005c72:	851a      	strh	r2, [r3, #40]	; 0x28
 8005c74:	e017      	b.n	8005ca6 <tcp_recved+0x76>
  } else if (pcb->rcv_wnd == 0) {
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d113      	bne.n	8005ca6 <tcp_recved+0x76>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	7d1b      	ldrb	r3, [r3, #20]
 8005c82:	2b07      	cmp	r3, #7
 8005c84:	d003      	beq.n	8005c8e <tcp_recved+0x5e>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	7d1b      	ldrb	r3, [r3, #20]
 8005c8a:	2b09      	cmp	r3, #9
 8005c8c:	d104      	bne.n	8005c98 <tcp_recved+0x68>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8005c94:	851a      	strh	r2, [r3, #40]	; 0x28
 8005c96:	e006      	b.n	8005ca6 <tcp_recved+0x76>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8005c98:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <tcp_recved+0xa8>)
 8005c9a:	f240 322d 	movw	r2, #813	; 0x32d
 8005c9e:	4911      	ldr	r1, [pc, #68]	; (8005ce4 <tcp_recved+0xb4>)
 8005ca0:	480f      	ldr	r0, [pc, #60]	; (8005ce0 <tcp_recved+0xb0>)
 8005ca2:	f007 faa7 	bl	800d1f4 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff ff74 	bl	8005b94 <tcp_update_rcv_ann_wnd>
 8005cac:	4603      	mov	r3, r0
 8005cae:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	dd09      	ble.n	8005cce <tcp_recved+0x9e>
    tcp_ack_now(pcb);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	7e9b      	ldrb	r3, [r3, #26]
 8005cbe:	f043 0302 	orr.w	r3, r3, #2
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f004 f893 	bl	8009df4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	0800ea54 	.word	0x0800ea54
 8005cdc:	0800eb88 	.word	0x0800eb88
 8005ce0:	0800ea90 	.word	0x0800ea90
 8005ce4:	0800ebb0 	.word	0x0800ebb0

08005ce8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 8005cf2:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <tcp_new_port+0x80>)
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	b291      	uxth	r1, r2
 8005cfa:	4a1b      	ldr	r2, [pc, #108]	; (8005d68 <tcp_new_port+0x80>)
 8005cfc:	8011      	strh	r1, [r2, #0]
 8005cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d103      	bne.n	8005d0e <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8005d06:	4b18      	ldr	r3, [pc, #96]	; (8005d68 <tcp_new_port+0x80>)
 8005d08:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005d0c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8005d0e:	2300      	movs	r3, #0
 8005d10:	71fb      	strb	r3, [r7, #7]
 8005d12:	e01e      	b.n	8005d52 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <tcp_new_port+0x84>)
 8005d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	603b      	str	r3, [r7, #0]
 8005d20:	e011      	b.n	8005d46 <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	8ada      	ldrh	r2, [r3, #22]
 8005d26:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <tcp_new_port+0x80>)
 8005d28:	881b      	ldrh	r3, [r3, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d108      	bne.n	8005d40 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8005d2e:	88bb      	ldrh	r3, [r7, #4]
 8005d30:	3301      	adds	r3, #1
 8005d32:	80bb      	strh	r3, [r7, #4]
 8005d34:	88bb      	ldrh	r3, [r7, #4]
 8005d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d3a:	d3da      	bcc.n	8005cf2 <tcp_new_port+0xa>
          return 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e00d      	b.n	8005d5c <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	603b      	str	r3, [r7, #0]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1ea      	bne.n	8005d22 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	71fb      	strb	r3, [r7, #7]
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d9dd      	bls.n	8005d14 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8005d58:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <tcp_new_port+0x80>)
 8005d5a:	881b      	ldrh	r3, [r3, #0]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	2000000a 	.word	0x2000000a
 8005d6c:	0800fe98 	.word	0x0800fe98

08005d70 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005d70:	b5b0      	push	{r4, r5, r7, lr}
 8005d72:	b08c      	sub	sp, #48	; 0x30
 8005d74:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8005d7a:	4b97      	ldr	r3, [pc, #604]	; (8005fd8 <tcp_slowtmr+0x268>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	4a95      	ldr	r2, [pc, #596]	; (8005fd8 <tcp_slowtmr+0x268>)
 8005d82:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005d84:	4b95      	ldr	r3, [pc, #596]	; (8005fdc <tcp_slowtmr+0x26c>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	4b93      	ldr	r3, [pc, #588]	; (8005fdc <tcp_slowtmr+0x26c>)
 8005d8e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005d90:	2300      	movs	r3, #0
 8005d92:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8005d94:	4b92      	ldr	r3, [pc, #584]	; (8005fe0 <tcp_slowtmr+0x270>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005d9a:	e227      	b.n	80061ec <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9e:	7d1b      	ldrb	r3, [r3, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <tcp_slowtmr+0x42>
 8005da4:	4b8f      	ldr	r3, [pc, #572]	; (8005fe4 <tcp_slowtmr+0x274>)
 8005da6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8005daa:	498f      	ldr	r1, [pc, #572]	; (8005fe8 <tcp_slowtmr+0x278>)
 8005dac:	488f      	ldr	r0, [pc, #572]	; (8005fec <tcp_slowtmr+0x27c>)
 8005dae:	f007 fa21 	bl	800d1f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	7d1b      	ldrb	r3, [r3, #20]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d106      	bne.n	8005dc8 <tcp_slowtmr+0x58>
 8005dba:	4b8a      	ldr	r3, [pc, #552]	; (8005fe4 <tcp_slowtmr+0x274>)
 8005dbc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8005dc0:	498b      	ldr	r1, [pc, #556]	; (8005ff0 <tcp_slowtmr+0x280>)
 8005dc2:	488a      	ldr	r0, [pc, #552]	; (8005fec <tcp_slowtmr+0x27c>)
 8005dc4:	f007 fa16 	bl	800d1f4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	7d1b      	ldrb	r3, [r3, #20]
 8005dcc:	2b0a      	cmp	r3, #10
 8005dce:	d106      	bne.n	8005dde <tcp_slowtmr+0x6e>
 8005dd0:	4b84      	ldr	r3, [pc, #528]	; (8005fe4 <tcp_slowtmr+0x274>)
 8005dd2:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8005dd6:	4987      	ldr	r1, [pc, #540]	; (8005ff4 <tcp_slowtmr+0x284>)
 8005dd8:	4884      	ldr	r0, [pc, #528]	; (8005fec <tcp_slowtmr+0x27c>)
 8005dda:	f007 fa0b 	bl	800d1f4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	7f5a      	ldrb	r2, [r3, #29]
 8005de2:	4b7e      	ldr	r3, [pc, #504]	; (8005fdc <tcp_slowtmr+0x26c>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d103      	bne.n	8005df2 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8005df0:	e1fc      	b.n	80061ec <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005df2:	4b7a      	ldr	r3, [pc, #488]	; (8005fdc <tcp_slowtmr+0x26c>)
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	7d1b      	ldrb	r3, [r3, #20]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d108      	bne.n	8005e1c <tcp_slowtmr+0xac>
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e10:	2b05      	cmp	r3, #5
 8005e12:	d903      	bls.n	8005e1c <tcp_slowtmr+0xac>
      ++pcb_remove;
 8005e14:	7ffb      	ldrb	r3, [r7, #31]
 8005e16:	3301      	adds	r3, #1
 8005e18:	77fb      	strb	r3, [r7, #31]
 8005e1a:	e0a2      	b.n	8005f62 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e22:	2b0b      	cmp	r3, #11
 8005e24:	d903      	bls.n	8005e2e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8005e26:	7ffb      	ldrb	r3, [r7, #31]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	77fb      	strb	r3, [r7, #31]
 8005e2c:	e099      	b.n	8005f62 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d032      	beq.n	8005e9e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	4a6d      	ldr	r2, [pc, #436]	; (8005ff8 <tcp_slowtmr+0x288>)
 8005e42:	5cd3      	ldrb	r3, [r2, r3]
 8005e44:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005e4c:	7cfa      	ldrb	r2, [r7, #19]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d907      	bls.n	8005e62 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005e58:	3301      	adds	r3, #1
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005e68:	7cfa      	ldrb	r2, [r7, #19]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d879      	bhi.n	8005f62 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8005e6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e70:	f004 fbda 	bl	800a628 <tcp_zero_window_probe>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d173      	bne.n	8005f62 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8005e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005e88:	2b06      	cmp	r3, #6
 8005e8a:	d86a      	bhi.n	8005f62 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005e92:	3301      	adds	r3, #1
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8005e9c:	e061      	b.n	8005f62 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8005e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	db08      	blt.n	8005eba <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	b21a      	sxth	r2, r3
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d04f      	beq.n	8005f62 <tcp_slowtmr+0x1f2>
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	db47      	blt.n	8005f62 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	7d1b      	ldrb	r3, [r3, #20]
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d018      	beq.n	8005f0c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ee0:	2b0c      	cmp	r3, #12
 8005ee2:	bf28      	it	cs
 8005ee4:	230c      	movcs	r3, #12
 8005ee6:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005eee:	10db      	asrs	r3, r3, #3
 8005ef0:	b21b      	sxth	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8005efa:	4413      	add	r3, r2
 8005efc:	7dfa      	ldrb	r2, [r7, #23]
 8005efe:	493f      	ldr	r1, [pc, #252]	; (8005ffc <tcp_slowtmr+0x28c>)
 8005f00:	5c8a      	ldrb	r2, [r1, r2]
 8005f02:	4093      	lsls	r3, r2
 8005f04:	b21a      	sxth	r2, r3
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	2200      	movs	r2, #0
 8005f10:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	bf28      	it	cs
 8005f22:	4613      	movcs	r3, r2
 8005f24:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8005f26:	8abb      	ldrh	r3, [r7, #20]
 8005f28:	085b      	lsrs	r3, r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d206      	bcs.n	8005f52 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8005f5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f5e:	f004 fa49 	bl	800a3f4 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	7d1b      	ldrb	r3, [r3, #20]
 8005f66:	2b06      	cmp	r3, #6
 8005f68:	d10f      	bne.n	8005f8a <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	7e9b      	ldrb	r3, [r3, #26]
 8005f6e:	f003 0310 	and.w	r3, r3, #16
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d009      	beq.n	8005f8a <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005f76:	4b18      	ldr	r3, [pc, #96]	; (8005fd8 <tcp_slowtmr+0x268>)
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b28      	cmp	r3, #40	; 0x28
 8005f82:	d902      	bls.n	8005f8a <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005f84:	7ffb      	ldrb	r3, [r7, #31]
 8005f86:	3301      	adds	r3, #1
 8005f88:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	7a1b      	ldrb	r3, [r3, #8]
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d05d      	beq.n	8006052 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d003      	beq.n	8005fa6 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8005fa2:	2b07      	cmp	r3, #7
 8005fa4:	d155      	bne.n	8006052 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <tcp_slowtmr+0x268>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb6:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005fba:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005fbe:	4910      	ldr	r1, [pc, #64]	; (8006000 <tcp_slowtmr+0x290>)
 8005fc0:	fba1 1303 	umull	r1, r3, r1, r3
 8005fc4:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d91c      	bls.n	8006004 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005fca:	7ffb      	ldrb	r3, [r7, #31]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8005fd0:	7fbb      	ldrb	r3, [r7, #30]
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	77bb      	strb	r3, [r7, #30]
 8005fd6:	e03c      	b.n	8006052 <tcp_slowtmr+0x2e2>
 8005fd8:	2000c6cc 	.word	0x2000c6cc
 8005fdc:	200000c2 	.word	0x200000c2
 8005fe0:	2000c6c8 	.word	0x2000c6c8
 8005fe4:	0800ea54 	.word	0x0800ea54
 8005fe8:	0800ec04 	.word	0x0800ec04
 8005fec:	0800ea90 	.word	0x0800ea90
 8005ff0:	0800ec30 	.word	0x0800ec30
 8005ff4:	0800ec5c 	.word	0x0800ec5c
 8005ff8:	0800fe90 	.word	0x0800fe90
 8005ffc:	0800fe80 	.word	0x0800fe80
 8006000:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006004:	4b97      	ldr	r3, [pc, #604]	; (8006264 <tcp_slowtmr+0x4f4>)
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800600e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006010:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800601a:	4618      	mov	r0, r3
 800601c:	4b92      	ldr	r3, [pc, #584]	; (8006268 <tcp_slowtmr+0x4f8>)
 800601e:	fb03 f300 	mul.w	r3, r3, r0
 8006022:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8006024:	4991      	ldr	r1, [pc, #580]	; (800626c <tcp_slowtmr+0x4fc>)
 8006026:	fba1 1303 	umull	r1, r3, r1, r3
 800602a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800602c:	429a      	cmp	r2, r3
 800602e:	d910      	bls.n	8006052 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8006030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006032:	f004 fabc 	bl	800a5ae <tcp_keepalive>
 8006036:	4603      	mov	r3, r0
 8006038:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800603a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d107      	bne.n	8006052 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8006048:	3301      	adds	r3, #1
 800604a:	b2da      	uxtb	r2, r3
 800604c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	2b00      	cmp	r3, #0
 8006058:	d016      	beq.n	8006088 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800605a:	4b82      	ldr	r3, [pc, #520]	; (8006264 <tcp_slowtmr+0x4f4>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	1ad2      	subs	r2, r2, r3
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800606a:	4619      	mov	r1, r3
 800606c:	460b      	mov	r3, r1
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	440b      	add	r3, r1
 8006072:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006074:	429a      	cmp	r2, r3
 8006076:	d307      	bcc.n	8006088 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fa05 	bl	800648c <tcp_segs_free>
      pcb->ooseq = NULL;
 8006082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006084:	2200      	movs	r2, #0
 8006086:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	7d1b      	ldrb	r3, [r3, #20]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d109      	bne.n	80060a4 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006090:	4b74      	ldr	r3, [pc, #464]	; (8006264 <tcp_slowtmr+0x4f4>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b28      	cmp	r3, #40	; 0x28
 800609c:	d902      	bls.n	80060a4 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800609e:	7ffb      	ldrb	r3, [r7, #31]
 80060a0:	3301      	adds	r3, #1
 80060a2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	7d1b      	ldrb	r3, [r3, #20]
 80060a8:	2b09      	cmp	r3, #9
 80060aa:	d109      	bne.n	80060c0 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80060ac:	4b6d      	ldr	r3, [pc, #436]	; (8006264 <tcp_slowtmr+0x4f4>)
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2bf0      	cmp	r3, #240	; 0xf0
 80060b8:	d902      	bls.n	80060c0 <tcp_slowtmr+0x350>
        ++pcb_remove;
 80060ba:	7ffb      	ldrb	r3, [r7, #31]
 80060bc:	3301      	adds	r3, #1
 80060be:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80060c0:	7ffb      	ldrb	r3, [r7, #31]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d05d      	beq.n	8006182 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80060c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060cc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80060ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80060d0:	f000 fc4e 	bl	8006970 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80060d4:	6a3b      	ldr	r3, [r7, #32]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d010      	beq.n	80060fc <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80060da:	4b65      	ldr	r3, [pc, #404]	; (8006270 <tcp_slowtmr+0x500>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d106      	bne.n	80060f2 <tcp_slowtmr+0x382>
 80060e4:	4b63      	ldr	r3, [pc, #396]	; (8006274 <tcp_slowtmr+0x504>)
 80060e6:	f240 4289 	movw	r2, #1161	; 0x489
 80060ea:	4963      	ldr	r1, [pc, #396]	; (8006278 <tcp_slowtmr+0x508>)
 80060ec:	4863      	ldr	r0, [pc, #396]	; (800627c <tcp_slowtmr+0x50c>)
 80060ee:	f007 f881 	bl	800d1f4 <iprintf>
        prev->next = pcb->next;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	60da      	str	r2, [r3, #12]
 80060fa:	e00f      	b.n	800611c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80060fc:	4b5c      	ldr	r3, [pc, #368]	; (8006270 <tcp_slowtmr+0x500>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006102:	429a      	cmp	r2, r3
 8006104:	d006      	beq.n	8006114 <tcp_slowtmr+0x3a4>
 8006106:	4b5b      	ldr	r3, [pc, #364]	; (8006274 <tcp_slowtmr+0x504>)
 8006108:	f240 428d 	movw	r2, #1165	; 0x48d
 800610c:	495c      	ldr	r1, [pc, #368]	; (8006280 <tcp_slowtmr+0x510>)
 800610e:	485b      	ldr	r0, [pc, #364]	; (800627c <tcp_slowtmr+0x50c>)
 8006110:	f007 f870 	bl	800d1f4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4a55      	ldr	r2, [pc, #340]	; (8006270 <tcp_slowtmr+0x500>)
 800611a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800611c:	7fbb      	ldrb	r3, [r7, #30]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d010      	beq.n	8006144 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800612a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	1d1d      	adds	r5, r3, #4
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	8adb      	ldrh	r3, [r3, #22]
 8006134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006136:	8b12      	ldrh	r2, [r2, #24]
 8006138:	9201      	str	r2, [sp, #4]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	462b      	mov	r3, r5
 800613e:	4622      	mov	r2, r4
 8006140:	f004 f8e2 	bl	800a308 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	7d1b      	ldrb	r3, [r3, #20]
 800614e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	2001      	movs	r0, #1
 800615e:	f7fe f961 	bl	8004424 <memp_free>

      tcp_active_pcbs_changed = 0;
 8006162:	4b48      	ldr	r3, [pc, #288]	; (8006284 <tcp_slowtmr+0x514>)
 8006164:	2200      	movs	r2, #0
 8006166:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d004      	beq.n	8006178 <tcp_slowtmr+0x408>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f06f 010c 	mvn.w	r1, #12
 8006174:	68b8      	ldr	r0, [r7, #8]
 8006176:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006178:	4b42      	ldr	r3, [pc, #264]	; (8006284 <tcp_slowtmr+0x514>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d035      	beq.n	80061ec <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8006180:	e606      	b.n	8005d90 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	7edb      	ldrb	r3, [r3, #27]
 8006190:	3301      	adds	r3, #1
 8006192:	b2da      	uxtb	r2, r3
 8006194:	6a3b      	ldr	r3, [r7, #32]
 8006196:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	7eda      	ldrb	r2, [r3, #27]
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	7f1b      	ldrb	r3, [r3, #28]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d323      	bcc.n	80061ec <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	2200      	movs	r2, #0
 80061a8:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80061aa:	4b36      	ldr	r3, [pc, #216]	; (8006284 <tcp_slowtmr+0x514>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <tcp_slowtmr+0x460>
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c0:	6a3a      	ldr	r2, [r7, #32]
 80061c2:	6912      	ldr	r2, [r2, #16]
 80061c4:	6a39      	ldr	r1, [r7, #32]
 80061c6:	4610      	mov	r0, r2
 80061c8:	4798      	blx	r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	777b      	strb	r3, [r7, #29]
 80061ce:	e001      	b.n	80061d4 <tcp_slowtmr+0x464>
 80061d0:	2300      	movs	r3, #0
 80061d2:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 80061d4:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <tcp_slowtmr+0x514>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d000      	beq.n	80061de <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 80061dc:	e5d8      	b.n	8005d90 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80061de:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <tcp_slowtmr+0x47c>
          tcp_output(prev);
 80061e6:	6a38      	ldr	r0, [r7, #32]
 80061e8:	f003 fe04 	bl	8009df4 <tcp_output>
  while (pcb != NULL) {
 80061ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f47f add4 	bne.w	8005d9c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 80061f8:	4b23      	ldr	r3, [pc, #140]	; (8006288 <tcp_slowtmr+0x518>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80061fe:	e068      	b.n	80062d2 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	7d1b      	ldrb	r3, [r3, #20]
 8006204:	2b0a      	cmp	r3, #10
 8006206:	d006      	beq.n	8006216 <tcp_slowtmr+0x4a6>
 8006208:	4b1a      	ldr	r3, [pc, #104]	; (8006274 <tcp_slowtmr+0x504>)
 800620a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800620e:	491f      	ldr	r1, [pc, #124]	; (800628c <tcp_slowtmr+0x51c>)
 8006210:	481a      	ldr	r0, [pc, #104]	; (800627c <tcp_slowtmr+0x50c>)
 8006212:	f006 ffef 	bl	800d1f4 <iprintf>
    pcb_remove = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800621a:	4b12      	ldr	r3, [pc, #72]	; (8006264 <tcp_slowtmr+0x4f4>)
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2bf0      	cmp	r3, #240	; 0xf0
 8006226:	d902      	bls.n	800622e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8006228:	7ffb      	ldrb	r3, [r7, #31]
 800622a:	3301      	adds	r3, #1
 800622c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800622e:	7ffb      	ldrb	r3, [r7, #31]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d049      	beq.n	80062c8 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006234:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006236:	f000 fb9b 	bl	8006970 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d029      	beq.n	8006294 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006240:	4b11      	ldr	r3, [pc, #68]	; (8006288 <tcp_slowtmr+0x518>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006246:	429a      	cmp	r2, r3
 8006248:	d106      	bne.n	8006258 <tcp_slowtmr+0x4e8>
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <tcp_slowtmr+0x504>)
 800624c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8006250:	490f      	ldr	r1, [pc, #60]	; (8006290 <tcp_slowtmr+0x520>)
 8006252:	480a      	ldr	r0, [pc, #40]	; (800627c <tcp_slowtmr+0x50c>)
 8006254:	f006 ffce 	bl	800d1f4 <iprintf>
        prev->next = pcb->next;
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	60da      	str	r2, [r3, #12]
 8006260:	e028      	b.n	80062b4 <tcp_slowtmr+0x544>
 8006262:	bf00      	nop
 8006264:	2000c6cc 	.word	0x2000c6cc
 8006268:	000124f8 	.word	0x000124f8
 800626c:	10624dd3 	.word	0x10624dd3
 8006270:	2000c6c8 	.word	0x2000c6c8
 8006274:	0800ea54 	.word	0x0800ea54
 8006278:	0800ec8c 	.word	0x0800ec8c
 800627c:	0800ea90 	.word	0x0800ea90
 8006280:	0800ecb8 	.word	0x0800ecb8
 8006284:	2000c6c4 	.word	0x2000c6c4
 8006288:	2000c6d8 	.word	0x2000c6d8
 800628c:	0800ece4 	.word	0x0800ece4
 8006290:	0800ed14 	.word	0x0800ed14
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006294:	4b12      	ldr	r3, [pc, #72]	; (80062e0 <tcp_slowtmr+0x570>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629a:	429a      	cmp	r2, r3
 800629c:	d006      	beq.n	80062ac <tcp_slowtmr+0x53c>
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <tcp_slowtmr+0x574>)
 80062a0:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80062a4:	4910      	ldr	r1, [pc, #64]	; (80062e8 <tcp_slowtmr+0x578>)
 80062a6:	4811      	ldr	r0, [pc, #68]	; (80062ec <tcp_slowtmr+0x57c>)
 80062a8:	f006 ffa4 	bl	800d1f4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80062ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	4a0b      	ldr	r2, [pc, #44]	; (80062e0 <tcp_slowtmr+0x570>)
 80062b2:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80062be:	69b9      	ldr	r1, [r7, #24]
 80062c0:	2001      	movs	r0, #1
 80062c2:	f7fe f8af 	bl	8004424 <memp_free>
 80062c6:	e004      	b.n	80062d2 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d193      	bne.n	8006200 <tcp_slowtmr+0x490>
    }
  }
}
 80062d8:	bf00      	nop
 80062da:	3728      	adds	r7, #40	; 0x28
 80062dc:	46bd      	mov	sp, r7
 80062de:	bdb0      	pop	{r4, r5, r7, pc}
 80062e0:	2000c6d8 	.word	0x2000c6d8
 80062e4:	0800ea54 	.word	0x0800ea54
 80062e8:	0800ed3c 	.word	0x0800ed3c
 80062ec:	0800ea90 	.word	0x0800ea90

080062f0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80062f6:	4b2d      	ldr	r3, [pc, #180]	; (80063ac <tcp_fasttmr+0xbc>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	3301      	adds	r3, #1
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	4b2b      	ldr	r3, [pc, #172]	; (80063ac <tcp_fasttmr+0xbc>)
 8006300:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006302:	4b2b      	ldr	r3, [pc, #172]	; (80063b0 <tcp_fasttmr+0xc0>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006308:	e048      	b.n	800639c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	7f5a      	ldrb	r2, [r3, #29]
 800630e:	4b27      	ldr	r3, [pc, #156]	; (80063ac <tcp_fasttmr+0xbc>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	429a      	cmp	r2, r3
 8006314:	d03f      	beq.n	8006396 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006316:	4b25      	ldr	r3, [pc, #148]	; (80063ac <tcp_fasttmr+0xbc>)
 8006318:	781a      	ldrb	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	7e9b      	ldrb	r3, [r3, #26]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d010      	beq.n	800634c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	7e9b      	ldrb	r3, [r3, #26]
 800632e:	f043 0302 	orr.w	r3, r3, #2
 8006332:	b2da      	uxtb	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f003 fd5b 	bl	8009df4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	7e9b      	ldrb	r3, [r3, #26]
 8006342:	f023 0303 	bic.w	r3, r3, #3
 8006346:	b2da      	uxtb	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	7e9b      	ldrb	r3, [r3, #26]
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d009      	beq.n	800636c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	7e9b      	ldrb	r3, [r3, #26]
 800635c:	f023 0308 	bic.w	r3, r3, #8
 8006360:	b2da      	uxtb	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff f98c 	bl	8005684 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800637a:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <tcp_fasttmr+0xc4>)
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f819 	bl	80063b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <tcp_fasttmr+0xc4>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d000      	beq.n	8006390 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800638e:	e7b8      	b.n	8006302 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	607b      	str	r3, [r7, #4]
 8006394:	e002      	b.n	800639c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1b3      	bne.n	800630a <tcp_fasttmr+0x1a>
    }
  }
}
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	200000c2 	.word	0x200000c2
 80063b0:	2000c6c8 	.word	0x2000c6c8
 80063b4:	2000c6c4 	.word	0x2000c6c4

080063b8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80063b8:	b590      	push	{r4, r7, lr}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c4:	7b5b      	ldrb	r3, [r3, #13]
 80063c6:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063cc:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00b      	beq.n	80063f6 <tcp_process_refused_data+0x3e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6918      	ldr	r0, [r3, #16]
 80063e8:	2300      	movs	r3, #0
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	47a0      	blx	r4
 80063f0:	4603      	mov	r3, r0
 80063f2:	73fb      	strb	r3, [r7, #15]
 80063f4:	e007      	b.n	8006406 <tcp_process_refused_data+0x4e>
 80063f6:	2300      	movs	r3, #0
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	2000      	movs	r0, #0
 80063fe:	f000 f89c 	bl	800653a <tcp_recv_null>
 8006402:	4603      	mov	r3, r0
 8006404:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d12b      	bne.n	8006466 <tcp_process_refused_data+0xae>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	f003 0320 	and.w	r3, r3, #32
 8006414:	2b00      	cmp	r3, #0
 8006416:	d034      	beq.n	8006482 <tcp_process_refused_data+0xca>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800641c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8006420:	4293      	cmp	r3, r2
 8006422:	d005      	beq.n	8006430 <tcp_process_refused_data+0x78>
          pcb->rcv_wnd++;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006428:	3301      	adds	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <tcp_process_refused_data+0x9a>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6918      	ldr	r0, [r3, #16]
 8006444:	2300      	movs	r3, #0
 8006446:	2200      	movs	r2, #0
 8006448:	6879      	ldr	r1, [r7, #4]
 800644a:	47a0      	blx	r4
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]
 8006450:	e001      	b.n	8006456 <tcp_process_refused_data+0x9e>
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800645a:	f113 0f0d 	cmn.w	r3, #13
 800645e:	d110      	bne.n	8006482 <tcp_process_refused_data+0xca>
          return ERR_ABRT;
 8006460:	f06f 030c 	mvn.w	r3, #12
 8006464:	e00e      	b.n	8006484 <tcp_process_refused_data+0xcc>
        }
      }
    } else if (err == ERR_ABRT) {
 8006466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800646a:	f113 0f0d 	cmn.w	r3, #13
 800646e:	d102      	bne.n	8006476 <tcp_process_refused_data+0xbe>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006470:	f06f 030c 	mvn.w	r3, #12
 8006474:	e006      	b.n	8006484 <tcp_process_refused_data+0xcc>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800647c:	f06f 0304 	mvn.w	r3, #4
 8006480:	e000      	b.n	8006484 <tcp_process_refused_data+0xcc>
    }
  }
  return ERR_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	bd90      	pop	{r4, r7, pc}

0800648c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006494:	e007      	b.n	80064a6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 f809 	bl	80064b4 <tcp_seg_free>
    seg = next;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1f4      	bne.n	8006496 <tcp_segs_free+0xa>
  }
}
 80064ac:	bf00      	nop
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00c      	beq.n	80064dc <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d004      	beq.n	80064d4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe fd04 	bl	8004edc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	2003      	movs	r0, #3
 80064d8:	f7fd ffa4 	bl	8004424 <memp_free>
  }
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	460b      	mov	r3, r1
 80064ee:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	78fa      	ldrb	r2, [r7, #3]
 80064f4:	755a      	strb	r2, [r3, #21]
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b084      	sub	sp, #16
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800650a:	2003      	movs	r0, #3
 800650c:	f7fd ff3e 	bl	800438c <memp_malloc>
 8006510:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <tcp_seg_copy+0x1a>
    return NULL;
 8006518:	2300      	movs	r3, #0
 800651a:	e00a      	b.n	8006532 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800651c:	2210      	movs	r2, #16
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f006 fe54 	bl	800d1ce <memcpy>
  pbuf_ref(cseg->p);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fd82 	bl	8005034 <pbuf_ref>
  return cseg;
 8006530:	68fb      	ldr	r3, [r7, #12]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
 8006546:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d009      	beq.n	8006562 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	891b      	ldrh	r3, [r3, #8]
 8006552:	4619      	mov	r1, r3
 8006554:	68b8      	ldr	r0, [r7, #8]
 8006556:	f7ff fb6b 	bl	8005c30 <tcp_recved>
    pbuf_free(p);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fe fcbe 	bl	8004edc <pbuf_free>
 8006560:	e008      	b.n	8006574 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8006562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d104      	bne.n	8006574 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800656a:	68b8      	ldr	r0, [r7, #8]
 800656c:	f7ff f8f0 	bl	8005750 <tcp_close>
 8006570:	4603      	mov	r3, r0
 8006572:	e000      	b.n	8006576 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800658a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800658e:	2b00      	cmp	r3, #0
 8006590:	db01      	blt.n	8006596 <tcp_kill_prio+0x16>
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	e000      	b.n	8006598 <tcp_kill_prio+0x18>
 8006596:	237f      	movs	r3, #127	; 0x7f
 8006598:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80065a2:	4b16      	ldr	r3, [pc, #88]	; (80065fc <tcp_kill_prio+0x7c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	e01a      	b.n	80065e0 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	7d5b      	ldrb	r3, [r3, #21]
 80065ae:	7afa      	ldrb	r2, [r7, #11]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d312      	bcc.n	80065da <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80065b4:	4b12      	ldr	r3, [pc, #72]	; (8006600 <tcp_kill_prio+0x80>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d80a      	bhi.n	80065da <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80065c4:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <tcp_kill_prio+0x80>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	7d5b      	ldrb	r3, [r3, #21]
 80065d8:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1e1      	bne.n	80065aa <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80065ec:	6938      	ldr	r0, [r7, #16]
 80065ee:	f7ff f979 	bl	80058e4 <tcp_abort>
  }
}
 80065f2:	bf00      	nop
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	2000c6c8 	.word	0x2000c6c8
 8006600:	2000c6cc 	.word	0x2000c6cc

08006604 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d009      	beq.n	8006628 <tcp_kill_state+0x24>
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	2b09      	cmp	r3, #9
 8006618:	d006      	beq.n	8006628 <tcp_kill_state+0x24>
 800661a:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <tcp_kill_state+0x80>)
 800661c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006620:	4919      	ldr	r1, [pc, #100]	; (8006688 <tcp_kill_state+0x84>)
 8006622:	481a      	ldr	r0, [pc, #104]	; (800668c <tcp_kill_state+0x88>)
 8006624:	f006 fde6 	bl	800d1f4 <iprintf>

  inactivity = 0;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006630:	4b17      	ldr	r3, [pc, #92]	; (8006690 <tcp_kill_state+0x8c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	e017      	b.n	8006668 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	7d1b      	ldrb	r3, [r3, #20]
 800663c:	79fa      	ldrb	r2, [r7, #7]
 800663e:	429a      	cmp	r2, r3
 8006640:	d10f      	bne.n	8006662 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006642:	4b14      	ldr	r3, [pc, #80]	; (8006694 <tcp_kill_state+0x90>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	429a      	cmp	r2, r3
 8006650:	d807      	bhi.n	8006662 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006652:	4b10      	ldr	r3, [pc, #64]	; (8006694 <tcp_kill_state+0x90>)
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e4      	bne.n	8006638 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006674:	2100      	movs	r1, #0
 8006676:	6938      	ldr	r0, [r7, #16]
 8006678:	f7ff f882 	bl	8005780 <tcp_abandon>
  }
}
 800667c:	bf00      	nop
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	0800ea54 	.word	0x0800ea54
 8006688:	0800ed64 	.word	0x0800ed64
 800668c:	0800ea90 	.word	0x0800ea90
 8006690:	2000c6c8 	.word	0x2000c6c8
 8006694:	2000c6cc 	.word	0x2000c6cc

08006698 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80066a6:	4b12      	ldr	r3, [pc, #72]	; (80066f0 <tcp_kill_timewait+0x58>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	e012      	b.n	80066d4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80066ae:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <tcp_kill_timewait+0x5c>)
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d807      	bhi.n	80066ce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80066be:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <tcp_kill_timewait+0x5c>)
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e9      	bne.n	80066ae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d002      	beq.n	80066e6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80066e0:	68b8      	ldr	r0, [r7, #8]
 80066e2:	f7ff f8ff 	bl	80058e4 <tcp_abort>
  }
}
 80066e6:	bf00      	nop
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	2000c6d8 	.word	0x2000c6d8
 80066f4:	2000c6cc 	.word	0x2000c6cc

080066f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	4603      	mov	r3, r0
 8006700:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006702:	2001      	movs	r0, #1
 8006704:	f7fd fe42 	bl	800438c <memp_malloc>
 8006708:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d124      	bne.n	800675a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006710:	f7ff ffc2 	bl	8006698 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006714:	2001      	movs	r0, #1
 8006716:	f7fd fe39 	bl	800438c <memp_malloc>
 800671a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d11b      	bne.n	800675a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006722:	2009      	movs	r0, #9
 8006724:	f7ff ff6e 	bl	8006604 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006728:	2001      	movs	r0, #1
 800672a:	f7fd fe2f 	bl	800438c <memp_malloc>
 800672e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d111      	bne.n	800675a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006736:	2008      	movs	r0, #8
 8006738:	f7ff ff64 	bl	8006604 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800673c:	2001      	movs	r0, #1
 800673e:	f7fd fe25 	bl	800438c <memp_malloc>
 8006742:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d107      	bne.n	800675a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff ff17 	bl	8006580 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006752:	2001      	movs	r0, #1
 8006754:	f7fd fe1a 	bl	800438c <memp_malloc>
 8006758:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d03f      	beq.n	80067e0 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006760:	2298      	movs	r2, #152	; 0x98
 8006762:	2100      	movs	r1, #0
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f006 fd3d 	bl	800d1e4 <memset>
    pcb->prio = prio;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	79fa      	ldrb	r2, [r7, #7]
 800676e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f640 3268 	movw	r2, #2920	; 0xb68
 8006776:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8006780:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	22ff      	movs	r2, #255	; 0xff
 800678e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006796:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2206      	movs	r2, #6
 800679c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2206      	movs	r2, #6
 80067a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067ac:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80067b6:	4b0d      	ldr	r3, [pc, #52]	; (80067ec <tcp_alloc+0xf4>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80067be:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <tcp_alloc+0xf8>)
 80067c0:	781a      	ldrb	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f640 3268 	movw	r2, #2920	; 0xb68
 80067cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4a08      	ldr	r2, [pc, #32]	; (80067f4 <tcp_alloc+0xfc>)
 80067d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4a07      	ldr	r2, [pc, #28]	; (80067f8 <tcp_alloc+0x100>)
 80067dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80067e0:	68fb      	ldr	r3, [r7, #12]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	2000c6cc 	.word	0x2000c6cc
 80067f0:	200000c2 	.word	0x200000c2
 80067f4:	0800653b 	.word	0x0800653b
 80067f8:	006ddd00 	.word	0x006ddd00

080067fc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8006800:	2040      	movs	r0, #64	; 0x40
 8006802:	f7ff ff79 	bl	80066f8 <tcp_alloc>
 8006806:	4603      	mov	r3, r0
}
 8006808:	4618      	mov	r0, r3
 800680a:	bd80      	pop	{r7, pc}

0800680c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	611a      	str	r2, [r3, #16]
  }
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00e      	beq.n	800685e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	7d1b      	ldrb	r3, [r3, #20]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d106      	bne.n	8006856 <tcp_recv+0x26>
 8006848:	4b07      	ldr	r3, [pc, #28]	; (8006868 <tcp_recv+0x38>)
 800684a:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800684e:	4907      	ldr	r1, [pc, #28]	; (800686c <tcp_recv+0x3c>)
 8006850:	4807      	ldr	r0, [pc, #28]	; (8006870 <tcp_recv+0x40>)
 8006852:	f006 fccf 	bl	800d1f4 <iprintf>
    pcb->recv = recv;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	0800ea54 	.word	0x0800ea54
 800686c:	0800ed74 	.word	0x0800ed74
 8006870:	0800ea90 	.word	0x0800ea90

08006874 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00d      	beq.n	80068a0 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	7d1b      	ldrb	r3, [r3, #20]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d106      	bne.n	800689a <tcp_sent+0x26>
 800688c:	4b06      	ldr	r3, [pc, #24]	; (80068a8 <tcp_sent+0x34>)
 800688e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8006892:	4906      	ldr	r1, [pc, #24]	; (80068ac <tcp_sent+0x38>)
 8006894:	4806      	ldr	r0, [pc, #24]	; (80068b0 <tcp_sent+0x3c>)
 8006896:	f006 fcad 	bl	800d1f4 <iprintf>
    pcb->sent = sent;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	0800ea54 	.word	0x0800ea54
 80068ac:	0800ed9c 	.word	0x0800ed9c
 80068b0:	0800ea90 	.word	0x0800ea90

080068b4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00e      	beq.n	80068e2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	7d1b      	ldrb	r3, [r3, #20]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d106      	bne.n	80068da <tcp_err+0x26>
 80068cc:	4b07      	ldr	r3, [pc, #28]	; (80068ec <tcp_err+0x38>)
 80068ce:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 80068d2:	4907      	ldr	r1, [pc, #28]	; (80068f0 <tcp_err+0x3c>)
 80068d4:	4807      	ldr	r0, [pc, #28]	; (80068f4 <tcp_err+0x40>)
 80068d6:	f006 fc8d 	bl	800d1f4 <iprintf>
    pcb->errf = err;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 80068e2:	bf00      	nop
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	0800ea54 	.word	0x0800ea54
 80068f0:	0800edc4 	.word	0x0800edc4
 80068f4:	0800ea90 	.word	0x0800ea90

080068f8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d008      	beq.n	800691a <tcp_accept+0x22>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	7d1b      	ldrb	r3, [r3, #20]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d104      	bne.n	800691a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	619a      	str	r2, [r3, #24]
  }
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
	...

08006928 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	4613      	mov	r3, r2
 8006934:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	7d1b      	ldrb	r3, [r3, #20]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d106      	bne.n	800694c <tcp_poll+0x24>
 800693e:	4b09      	ldr	r3, [pc, #36]	; (8006964 <tcp_poll+0x3c>)
 8006940:	f240 7203 	movw	r2, #1795	; 0x703
 8006944:	4908      	ldr	r1, [pc, #32]	; (8006968 <tcp_poll+0x40>)
 8006946:	4809      	ldr	r0, [pc, #36]	; (800696c <tcp_poll+0x44>)
 8006948:	f006 fc54 	bl	800d1f4 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	79fa      	ldrb	r2, [r7, #7]
 8006958:	771a      	strb	r2, [r3, #28]
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	0800ea54 	.word	0x0800ea54
 8006968:	0800edec 	.word	0x0800edec
 800696c:	0800ea90 	.word	0x0800ea90

08006970 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	7d1b      	ldrb	r3, [r3, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d034      	beq.n	80069ea <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006984:	2b0a      	cmp	r3, #10
 8006986:	d030      	beq.n	80069ea <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800698c:	2b01      	cmp	r3, #1
 800698e:	d02c      	beq.n	80069ea <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699c:	4618      	mov	r0, r3
 800699e:	f7fe fa9d 	bl	8004edc <pbuf_free>
      pcb->refused_data = NULL;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fd6d 	bl	800648c <tcp_segs_free>
    pcb->ooseq = NULL;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069be:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7ff fd61 	bl	800648c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7ff fd5c 	bl	800648c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	669a      	str	r2, [r3, #104]	; 0x68
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d105      	bne.n	8006a14 <tcp_pcb_remove+0x20>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68da      	ldr	r2, [r3, #12]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	e013      	b.n	8006a3c <tcp_pcb_remove+0x48>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	e00c      	b.n	8006a36 <tcp_pcb_remove+0x42>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	683a      	ldr	r2, [r7, #0]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d104      	bne.n	8006a30 <tcp_pcb_remove+0x3c>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	60da      	str	r2, [r3, #12]
 8006a2e:	e005      	b.n	8006a3c <tcp_pcb_remove+0x48>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	60fb      	str	r3, [r7, #12]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1ef      	bne.n	8006a1c <tcp_pcb_remove+0x28>
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006a42:	6838      	ldr	r0, [r7, #0]
 8006a44:	f7ff ff94 	bl	8006970 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	7d1b      	ldrb	r3, [r3, #20]
 8006a4c:	2b0a      	cmp	r3, #10
 8006a4e:	d013      	beq.n	8006a78 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d00f      	beq.n	8006a78 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	7e9b      	ldrb	r3, [r3, #26]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d009      	beq.n	8006a78 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	7e9b      	ldrb	r3, [r3, #26]
 8006a68:	f043 0302 	orr.w	r3, r3, #2
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8006a72:	6838      	ldr	r0, [r7, #0]
 8006a74:	f003 f9be 	bl	8009df4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	7d1b      	ldrb	r3, [r3, #20]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d020      	beq.n	8006ac2 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d006      	beq.n	8006a96 <tcp_pcb_remove+0xa2>
 8006a88:	4b13      	ldr	r3, [pc, #76]	; (8006ad8 <tcp_pcb_remove+0xe4>)
 8006a8a:	f240 7253 	movw	r2, #1875	; 0x753
 8006a8e:	4913      	ldr	r1, [pc, #76]	; (8006adc <tcp_pcb_remove+0xe8>)
 8006a90:	4813      	ldr	r0, [pc, #76]	; (8006ae0 <tcp_pcb_remove+0xec>)
 8006a92:	f006 fbaf 	bl	800d1f4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d006      	beq.n	8006aac <tcp_pcb_remove+0xb8>
 8006a9e:	4b0e      	ldr	r3, [pc, #56]	; (8006ad8 <tcp_pcb_remove+0xe4>)
 8006aa0:	f240 7254 	movw	r2, #1876	; 0x754
 8006aa4:	490f      	ldr	r1, [pc, #60]	; (8006ae4 <tcp_pcb_remove+0xf0>)
 8006aa6:	480e      	ldr	r0, [pc, #56]	; (8006ae0 <tcp_pcb_remove+0xec>)
 8006aa8:	f006 fba4 	bl	800d1f4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d006      	beq.n	8006ac2 <tcp_pcb_remove+0xce>
 8006ab4:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <tcp_pcb_remove+0xe4>)
 8006ab6:	f240 7256 	movw	r2, #1878	; 0x756
 8006aba:	490b      	ldr	r1, [pc, #44]	; (8006ae8 <tcp_pcb_remove+0xf4>)
 8006abc:	4808      	ldr	r0, [pc, #32]	; (8006ae0 <tcp_pcb_remove+0xec>)
 8006abe:	f006 fb99 	bl	800d1f4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2200      	movs	r2, #0
 8006acc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006ace:	bf00      	nop
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	0800ea54 	.word	0x0800ea54
 8006adc:	0800ee0c 	.word	0x0800ee0c
 8006ae0:	0800ea90 	.word	0x0800ea90
 8006ae4:	0800ee24 	.word	0x0800ee24
 8006ae8:	0800ee40 	.word	0x0800ee40

08006aec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006af4:	4b07      	ldr	r3, [pc, #28]	; (8006b14 <tcp_next_iss+0x28>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <tcp_next_iss+0x2c>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4413      	add	r3, r2
 8006afe:	4a05      	ldr	r2, [pc, #20]	; (8006b14 <tcp_next_iss+0x28>)
 8006b00:	6013      	str	r3, [r2, #0]
  return iss;
 8006b02:	4b04      	ldr	r3, [pc, #16]	; (8006b14 <tcp_next_iss+0x28>)
 8006b04:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	2000000c 	.word	0x2000000c
 8006b18:	2000c6cc 	.word	0x2000c6cc

08006b1c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	4603      	mov	r3, r0
 8006b24:	6039      	str	r1, [r7, #0]
 8006b26:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8006b28:	6838      	ldr	r0, [r7, #0]
 8006b2a:	f005 f98f 	bl	800be4c <ip4_route>
 8006b2e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 8006b36:	88fb      	ldrh	r3, [r7, #6]
 8006b38:	e010      	b.n	8006b5c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b3e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006b40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8006b48:	897b      	ldrh	r3, [r7, #10]
 8006b4a:	3b28      	subs	r3, #40	; 0x28
 8006b4c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006b4e:	893a      	ldrh	r2, [r7, #8]
 8006b50:	88fb      	ldrh	r3, [r7, #6]
 8006b52:	4293      	cmp	r3, r2
 8006b54:	bf28      	it	cs
 8006b56:	4613      	movcs	r3, r2
 8006b58:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 8006b5a:	88fb      	ldrh	r3, [r7, #6]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006b72:	e011      	b.n	8006b98 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d108      	bne.n	8006b92 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7fe feac 	bl	80058e4 <tcp_abort>
      pcb = next;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	e002      	b.n	8006b98 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1ea      	bne.n	8006b74 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d02c      	beq.n	8006c12 <tcp_netif_ip_addr_changed+0x6a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d028      	beq.n	8006c12 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006bc0:	4b16      	ldr	r3, [pc, #88]	; (8006c1c <tcp_netif_ip_addr_changed+0x74>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff ffcc 	bl	8006b64 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006bcc:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <tcp_netif_ip_addr_changed+0x78>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff ffc6 	bl	8006b64 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d019      	beq.n	8006c12 <tcp_netif_ip_addr_changed+0x6a>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d015      	beq.n	8006c12 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8006be6:	4b0f      	ldr	r3, [pc, #60]	; (8006c24 <tcp_netif_ip_addr_changed+0x7c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	e00e      	b.n	8006c0c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d103      	bne.n	8006c08 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1ed      	bne.n	8006bee <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006c12:	bf00      	nop
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	2000c6c8 	.word	0x2000c6c8
 8006c20:	2000c6d4 	.word	0x2000c6d4
 8006c24:	2000c6d0 	.word	0x2000c6d0

08006c28 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b08b      	sub	sp, #44	; 0x2c
 8006c2c:	af02      	add	r7, sp, #8
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	4a82      	ldr	r2, [pc, #520]	; (8006e40 <tcp_input+0x218>)
 8006c38:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	895b      	ldrh	r3, [r3, #10]
 8006c3e:	2b13      	cmp	r3, #19
 8006c40:	f240 838b 	bls.w	800735a <tcp_input+0x732>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006c44:	4b7f      	ldr	r3, [pc, #508]	; (8006e44 <tcp_input+0x21c>)
 8006c46:	695a      	ldr	r2, [r3, #20]
 8006c48:	4b7e      	ldr	r3, [pc, #504]	; (8006e44 <tcp_input+0x21c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	f005 fb76 	bl	800c340 <ip4_addr_isbroadcast_u32>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f040 8381 	bne.w	800735e <tcp_input+0x736>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006c5c:	4b79      	ldr	r3, [pc, #484]	; (8006e44 <tcp_input+0x21c>)
 8006c5e:	695b      	ldr	r3, [r3, #20]
 8006c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006c64:	2be0      	cmp	r3, #224	; 0xe0
 8006c66:	f000 837a 	beq.w	800735e <tcp_input+0x736>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8006c6a:	4b75      	ldr	r3, [pc, #468]	; (8006e40 <tcp_input+0x218>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	899b      	ldrh	r3, [r3, #12]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fc ffd5 	bl	8003c22 <lwip_htons>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	0b1b      	lsrs	r3, r3, #12
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006c84:	7cbb      	ldrb	r3, [r7, #18]
 8006c86:	2b13      	cmp	r3, #19
 8006c88:	f240 8369 	bls.w	800735e <tcp_input+0x736>
 8006c8c:	7cbb      	ldrb	r3, [r7, #18]
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	891b      	ldrh	r3, [r3, #8]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	f200 8362 	bhi.w	800735e <tcp_input+0x736>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8006c9a:	7cbb      	ldrb	r3, [r7, #18]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b14      	subs	r3, #20
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	4b69      	ldr	r3, [pc, #420]	; (8006e48 <tcp_input+0x220>)
 8006ca4:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006ca6:	4b69      	ldr	r3, [pc, #420]	; (8006e4c <tcp_input+0x224>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	895a      	ldrh	r2, [r3, #10]
 8006cb0:	7cbb      	ldrb	r3, [r7, #18]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d30d      	bcc.n	8006cd4 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006cb8:	4b63      	ldr	r3, [pc, #396]	; (8006e48 <tcp_input+0x220>)
 8006cba:	881a      	ldrh	r2, [r3, #0]
 8006cbc:	4b64      	ldr	r3, [pc, #400]	; (8006e50 <tcp_input+0x228>)
 8006cbe:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8006cc0:	7cbb      	ldrb	r3, [r7, #18]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	425b      	negs	r3, r3
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	b21b      	sxth	r3, r3
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7fe f8e1 	bl	8004e94 <pbuf_header>
 8006cd2:	e055      	b.n	8006d80 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d105      	bne.n	8006ce8 <tcp_input+0xc0>
 8006cdc:	4b5d      	ldr	r3, [pc, #372]	; (8006e54 <tcp_input+0x22c>)
 8006cde:	22b2      	movs	r2, #178	; 0xb2
 8006ce0:	495d      	ldr	r1, [pc, #372]	; (8006e58 <tcp_input+0x230>)
 8006ce2:	485e      	ldr	r0, [pc, #376]	; (8006e5c <tcp_input+0x234>)
 8006ce4:	f006 fa86 	bl	800d1f4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8006ce8:	f06f 0113 	mvn.w	r1, #19
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7fe f8d1 	bl	8004e94 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	895a      	ldrh	r2, [r3, #10]
 8006cf6:	4b56      	ldr	r3, [pc, #344]	; (8006e50 <tcp_input+0x228>)
 8006cf8:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8006cfa:	4b53      	ldr	r3, [pc, #332]	; (8006e48 <tcp_input+0x220>)
 8006cfc:	881a      	ldrh	r2, [r3, #0]
 8006cfe:	4b54      	ldr	r3, [pc, #336]	; (8006e50 <tcp_input+0x228>)
 8006d00:	881b      	ldrh	r3, [r3, #0]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8006d06:	4b52      	ldr	r3, [pc, #328]	; (8006e50 <tcp_input+0x228>)
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	425b      	negs	r3, r3
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	b21b      	sxth	r3, r3
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fe f8be 	bl	8004e94 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	895b      	ldrh	r3, [r3, #10]
 8006d1e:	8a3a      	ldrh	r2, [r7, #16]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	f200 831e 	bhi.w	8007362 <tcp_input+0x73a>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4a47      	ldr	r2, [pc, #284]	; (8006e4c <tcp_input+0x224>)
 8006d2e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	8a3b      	ldrh	r3, [r7, #16]
 8006d36:	425b      	negs	r3, r3
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	b21b      	sxth	r3, r3
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4610      	mov	r0, r2
 8006d40:	f7fe f8a8 	bl	8004e94 <pbuf_header>
    p->tot_len -= opt2len;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	891a      	ldrh	r2, [r3, #8]
 8006d48:	8a3b      	ldrh	r3, [r7, #16]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	895b      	ldrh	r3, [r3, #10]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d005      	beq.n	8006d66 <tcp_input+0x13e>
 8006d5a:	4b3e      	ldr	r3, [pc, #248]	; (8006e54 <tcp_input+0x22c>)
 8006d5c:	22cf      	movs	r2, #207	; 0xcf
 8006d5e:	4940      	ldr	r1, [pc, #256]	; (8006e60 <tcp_input+0x238>)
 8006d60:	483e      	ldr	r0, [pc, #248]	; (8006e5c <tcp_input+0x234>)
 8006d62:	f006 fa47 	bl	800d1f4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	891a      	ldrh	r2, [r3, #8]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	891b      	ldrh	r3, [r3, #8]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d005      	beq.n	8006d80 <tcp_input+0x158>
 8006d74:	4b37      	ldr	r3, [pc, #220]	; (8006e54 <tcp_input+0x22c>)
 8006d76:	22d0      	movs	r2, #208	; 0xd0
 8006d78:	493a      	ldr	r1, [pc, #232]	; (8006e64 <tcp_input+0x23c>)
 8006d7a:	4838      	ldr	r0, [pc, #224]	; (8006e5c <tcp_input+0x234>)
 8006d7c:	f006 fa3a 	bl	800d1f4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006d80:	4b2f      	ldr	r3, [pc, #188]	; (8006e40 <tcp_input+0x218>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	4b2d      	ldr	r3, [pc, #180]	; (8006e40 <tcp_input+0x218>)
 8006d8a:	681c      	ldr	r4, [r3, #0]
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f7fc ff48 	bl	8003c22 <lwip_htons>
 8006d92:	4603      	mov	r3, r0
 8006d94:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8006d96:	4b2a      	ldr	r3, [pc, #168]	; (8006e40 <tcp_input+0x218>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	885b      	ldrh	r3, [r3, #2]
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	4b28      	ldr	r3, [pc, #160]	; (8006e40 <tcp_input+0x218>)
 8006da0:	681c      	ldr	r4, [r3, #0]
 8006da2:	4610      	mov	r0, r2
 8006da4:	f7fc ff3d 	bl	8003c22 <lwip_htons>
 8006da8:	4603      	mov	r3, r0
 8006daa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006dac:	4b24      	ldr	r3, [pc, #144]	; (8006e40 <tcp_input+0x218>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	4b23      	ldr	r3, [pc, #140]	; (8006e40 <tcp_input+0x218>)
 8006db4:	681c      	ldr	r4, [r3, #0]
 8006db6:	4610      	mov	r0, r2
 8006db8:	f7fc ff41 	bl	8003c3e <lwip_htonl>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	6063      	str	r3, [r4, #4]
 8006dc0:	6863      	ldr	r3, [r4, #4]
 8006dc2:	4a29      	ldr	r2, [pc, #164]	; (8006e68 <tcp_input+0x240>)
 8006dc4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006dc6:	4b1e      	ldr	r3, [pc, #120]	; (8006e40 <tcp_input+0x218>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	4b1c      	ldr	r3, [pc, #112]	; (8006e40 <tcp_input+0x218>)
 8006dce:	681c      	ldr	r4, [r3, #0]
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7fc ff34 	bl	8003c3e <lwip_htonl>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	60a3      	str	r3, [r4, #8]
 8006dda:	68a3      	ldr	r3, [r4, #8]
 8006ddc:	4a23      	ldr	r2, [pc, #140]	; (8006e6c <tcp_input+0x244>)
 8006dde:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006de0:	4b17      	ldr	r3, [pc, #92]	; (8006e40 <tcp_input+0x218>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	89db      	ldrh	r3, [r3, #14]
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <tcp_input+0x218>)
 8006dea:	681c      	ldr	r4, [r3, #0]
 8006dec:	4610      	mov	r0, r2
 8006dee:	f7fc ff18 	bl	8003c22 <lwip_htons>
 8006df2:	4603      	mov	r3, r0
 8006df4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8006df6:	4b12      	ldr	r3, [pc, #72]	; (8006e40 <tcp_input+0x218>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	899b      	ldrh	r3, [r3, #12]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7fc ff0f 	bl	8003c22 <lwip_htons>
 8006e04:	4603      	mov	r3, r0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	4b18      	ldr	r3, [pc, #96]	; (8006e70 <tcp_input+0x248>)
 8006e10:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	891a      	ldrh	r2, [r3, #8]
 8006e16:	4b16      	ldr	r3, [pc, #88]	; (8006e70 <tcp_input+0x248>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	bf14      	ite	ne
 8006e22:	2301      	movne	r3, #1
 8006e24:	2300      	moveq	r3, #0
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <tcp_input+0x24c>)
 8006e30:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006e36:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <tcp_input+0x250>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	e082      	b.n	8006f44 <tcp_input+0x31c>
 8006e3e:	bf00      	nop
 8006e40:	200000d4 	.word	0x200000d4
 8006e44:	200033f8 	.word	0x200033f8
 8006e48:	200000d8 	.word	0x200000d8
 8006e4c:	200000dc 	.word	0x200000dc
 8006e50:	200000da 	.word	0x200000da
 8006e54:	0800ee58 	.word	0x0800ee58
 8006e58:	0800ee8c 	.word	0x0800ee8c
 8006e5c:	0800ee9c 	.word	0x0800ee9c
 8006e60:	0800eec4 	.word	0x0800eec4
 8006e64:	0800eed0 	.word	0x0800eed0
 8006e68:	200000e4 	.word	0x200000e4
 8006e6c:	200000e8 	.word	0x200000e8
 8006e70:	200000f0 	.word	0x200000f0
 8006e74:	200000ee 	.word	0x200000ee
 8006e78:	2000c6c8 	.word	0x2000c6c8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	7d1b      	ldrb	r3, [r3, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <tcp_input+0x268>
 8006e84:	4b8f      	ldr	r3, [pc, #572]	; (80070c4 <tcp_input+0x49c>)
 8006e86:	22e2      	movs	r2, #226	; 0xe2
 8006e88:	498f      	ldr	r1, [pc, #572]	; (80070c8 <tcp_input+0x4a0>)
 8006e8a:	4890      	ldr	r0, [pc, #576]	; (80070cc <tcp_input+0x4a4>)
 8006e8c:	f006 f9b2 	bl	800d1f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	7d1b      	ldrb	r3, [r3, #20]
 8006e94:	2b0a      	cmp	r3, #10
 8006e96:	d105      	bne.n	8006ea4 <tcp_input+0x27c>
 8006e98:	4b8a      	ldr	r3, [pc, #552]	; (80070c4 <tcp_input+0x49c>)
 8006e9a:	22e3      	movs	r2, #227	; 0xe3
 8006e9c:	498c      	ldr	r1, [pc, #560]	; (80070d0 <tcp_input+0x4a8>)
 8006e9e:	488b      	ldr	r0, [pc, #556]	; (80070cc <tcp_input+0x4a4>)
 8006ea0:	f006 f9a8 	bl	800d1f4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	7d1b      	ldrb	r3, [r3, #20]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d105      	bne.n	8006eb8 <tcp_input+0x290>
 8006eac:	4b85      	ldr	r3, [pc, #532]	; (80070c4 <tcp_input+0x49c>)
 8006eae:	22e4      	movs	r2, #228	; 0xe4
 8006eb0:	4988      	ldr	r1, [pc, #544]	; (80070d4 <tcp_input+0x4ac>)
 8006eb2:	4886      	ldr	r0, [pc, #536]	; (80070cc <tcp_input+0x4a4>)
 8006eb4:	f006 f99e 	bl	800d1f4 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	8b1a      	ldrh	r2, [r3, #24]
 8006ebc:	4b86      	ldr	r3, [pc, #536]	; (80070d8 <tcp_input+0x4b0>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d138      	bne.n	8006f3a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	8ada      	ldrh	r2, [r3, #22]
 8006ecc:	4b82      	ldr	r3, [pc, #520]	; (80070d8 <tcp_input+0x4b0>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	885b      	ldrh	r3, [r3, #2]
 8006ed2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d130      	bne.n	8006f3a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	4b7f      	ldr	r3, [pc, #508]	; (80070dc <tcp_input+0x4b4>)
 8006ede:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d12a      	bne.n	8006f3a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	4b7c      	ldr	r3, [pc, #496]	; (80070dc <tcp_input+0x4b4>)
 8006eea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d124      	bne.n	8006f3a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	69fa      	ldr	r2, [r7, #28]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d105      	bne.n	8006f06 <tcp_input+0x2de>
 8006efa:	4b72      	ldr	r3, [pc, #456]	; (80070c4 <tcp_input+0x49c>)
 8006efc:	22ec      	movs	r2, #236	; 0xec
 8006efe:	4978      	ldr	r1, [pc, #480]	; (80070e0 <tcp_input+0x4b8>)
 8006f00:	4872      	ldr	r0, [pc, #456]	; (80070cc <tcp_input+0x4a4>)
 8006f02:	f006 f977 	bl	800d1f4 <iprintf>
      if (prev != NULL) {
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	68da      	ldr	r2, [r3, #12]
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8006f14:	4b73      	ldr	r3, [pc, #460]	; (80070e4 <tcp_input+0x4bc>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006f1c:	4a71      	ldr	r2, [pc, #452]	; (80070e4 <tcp_input+0x4bc>)
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d10f      	bne.n	8006f4c <tcp_input+0x324>
 8006f2c:	4b65      	ldr	r3, [pc, #404]	; (80070c4 <tcp_input+0x49c>)
 8006f2e:	22f4      	movs	r2, #244	; 0xf4
 8006f30:	496d      	ldr	r1, [pc, #436]	; (80070e8 <tcp_input+0x4c0>)
 8006f32:	4866      	ldr	r0, [pc, #408]	; (80070cc <tcp_input+0x4a4>)
 8006f34:	f006 f95e 	bl	800d1f4 <iprintf>
      break;
 8006f38:	e008      	b.n	8006f4c <tcp_input+0x324>
    }
    prev = pcb;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	61fb      	str	r3, [r7, #28]
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d198      	bne.n	8006e7c <tcp_input+0x254>
 8006f4a:	e000      	b.n	8006f4e <tcp_input+0x326>
      break;
 8006f4c:	bf00      	nop
  }

  if (pcb == NULL) {
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d173      	bne.n	800703c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f54:	4b65      	ldr	r3, [pc, #404]	; (80070ec <tcp_input+0x4c4>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	e02f      	b.n	8006fbc <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	7d1b      	ldrb	r3, [r3, #20]
 8006f60:	2b0a      	cmp	r3, #10
 8006f62:	d005      	beq.n	8006f70 <tcp_input+0x348>
 8006f64:	4b57      	ldr	r3, [pc, #348]	; (80070c4 <tcp_input+0x49c>)
 8006f66:	22fe      	movs	r2, #254	; 0xfe
 8006f68:	4961      	ldr	r1, [pc, #388]	; (80070f0 <tcp_input+0x4c8>)
 8006f6a:	4858      	ldr	r0, [pc, #352]	; (80070cc <tcp_input+0x4a4>)
 8006f6c:	f006 f942 	bl	800d1f4 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	8b1a      	ldrh	r2, [r3, #24]
 8006f74:	4b58      	ldr	r3, [pc, #352]	; (80070d8 <tcp_input+0x4b0>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d11a      	bne.n	8006fb6 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	8ada      	ldrh	r2, [r3, #22]
 8006f84:	4b54      	ldr	r3, [pc, #336]	; (80070d8 <tcp_input+0x4b0>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	885b      	ldrh	r3, [r3, #2]
 8006f8a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d112      	bne.n	8006fb6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	4b51      	ldr	r3, [pc, #324]	; (80070dc <tcp_input+0x4b4>)
 8006f96:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d10c      	bne.n	8006fb6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	4b4e      	ldr	r3, [pc, #312]	; (80070dc <tcp_input+0x4b4>)
 8006fa2:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d106      	bne.n	8006fb6 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8006fa8:	69f8      	ldr	r0, [r7, #28]
 8006faa:	f000 fb15 	bl	80075d8 <tcp_timewait_input>
        pbuf_free(p);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f7fd ff94 	bl	8004edc <pbuf_free>
        return;
 8006fb4:	e1db      	b.n	800736e <tcp_input+0x746>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1cc      	bne.n	8006f5c <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006fc6:	4b4b      	ldr	r3, [pc, #300]	; (80070f4 <tcp_input+0x4cc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	e019      	b.n	8007002 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	8ada      	ldrh	r2, [r3, #22]
 8006fd2:	4b41      	ldr	r3, [pc, #260]	; (80070d8 <tcp_input+0x4b0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	885b      	ldrh	r3, [r3, #2]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d10c      	bne.n	8006ff8 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4b3e      	ldr	r3, [pc, #248]	; (80070dc <tcp_input+0x4b4>)
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d00f      	beq.n	800700a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00d      	beq.n	800700c <tcp_input+0x3e4>
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d009      	beq.n	800700c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	617b      	str	r3, [r7, #20]
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e2      	bne.n	8006fce <tcp_input+0x3a6>
 8007008:	e000      	b.n	800700c <tcp_input+0x3e4>
            break;
 800700a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d014      	beq.n	800703c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007020:	4b34      	ldr	r3, [pc, #208]	; (80070f4 <tcp_input+0x4cc>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007028:	4a32      	ldr	r2, [pc, #200]	; (80070f4 <tcp_input+0x4cc>)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800702e:	6978      	ldr	r0, [r7, #20]
 8007030:	f000 f9f0 	bl	8007414 <tcp_listen_input>
      pbuf_free(p);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7fd ff51 	bl	8004edc <pbuf_free>
      return;
 800703a:	e198      	b.n	800736e <tcp_input+0x746>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 8165 	beq.w	800730e <tcp_input+0x6e6>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007044:	4b2c      	ldr	r3, [pc, #176]	; (80070f8 <tcp_input+0x4d0>)
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	891a      	ldrh	r2, [r3, #8]
 800704e:	4b2a      	ldr	r3, [pc, #168]	; (80070f8 <tcp_input+0x4d0>)
 8007050:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007052:	4a29      	ldr	r2, [pc, #164]	; (80070f8 <tcp_input+0x4d0>)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007058:	4b1f      	ldr	r3, [pc, #124]	; (80070d8 <tcp_input+0x4b0>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a26      	ldr	r2, [pc, #152]	; (80070f8 <tcp_input+0x4d0>)
 800705e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007060:	4b26      	ldr	r3, [pc, #152]	; (80070fc <tcp_input+0x4d4>)
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007066:	4b26      	ldr	r3, [pc, #152]	; (8007100 <tcp_input+0x4d8>)
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800706c:	4b25      	ldr	r3, [pc, #148]	; (8007104 <tcp_input+0x4dc>)
 800706e:	2200      	movs	r2, #0
 8007070:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007072:	4b25      	ldr	r3, [pc, #148]	; (8007108 <tcp_input+0x4e0>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	f003 0308 	and.w	r3, r3, #8
 800707a:	2b00      	cmp	r3, #0
 800707c:	d006      	beq.n	800708c <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	7b5b      	ldrb	r3, [r3, #13]
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	b2da      	uxtb	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007090:	2b00      	cmp	r3, #0
 8007092:	d03d      	beq.n	8007110 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007094:	69f8      	ldr	r0, [r7, #28]
 8007096:	f7ff f98f 	bl	80063b8 <tcp_process_refused_data>
 800709a:	4603      	mov	r3, r0
 800709c:	f113 0f0d 	cmn.w	r3, #13
 80070a0:	d007      	beq.n	80070b2 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d032      	beq.n	8007110 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80070aa:	4b18      	ldr	r3, [pc, #96]	; (800710c <tcp_input+0x4e4>)
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d02e      	beq.n	8007110 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f040 8109 	bne.w	80072ce <tcp_input+0x6a6>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80070bc:	69f8      	ldr	r0, [r7, #28]
 80070be:	f002 fe3d 	bl	8009d3c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80070c2:	e104      	b.n	80072ce <tcp_input+0x6a6>
 80070c4:	0800ee58 	.word	0x0800ee58
 80070c8:	0800eef0 	.word	0x0800eef0
 80070cc:	0800ee9c 	.word	0x0800ee9c
 80070d0:	0800ef18 	.word	0x0800ef18
 80070d4:	0800ef44 	.word	0x0800ef44
 80070d8:	200000d4 	.word	0x200000d4
 80070dc:	200033f8 	.word	0x200033f8
 80070e0:	0800ef6c 	.word	0x0800ef6c
 80070e4:	2000c6c8 	.word	0x2000c6c8
 80070e8:	0800ef98 	.word	0x0800ef98
 80070ec:	2000c6d8 	.word	0x2000c6d8
 80070f0:	0800efc4 	.word	0x0800efc4
 80070f4:	2000c6d0 	.word	0x2000c6d0
 80070f8:	200000c4 	.word	0x200000c4
 80070fc:	200000f4 	.word	0x200000f4
 8007100:	200000f1 	.word	0x200000f1
 8007104:	200000ec 	.word	0x200000ec
 8007108:	200000f0 	.word	0x200000f0
 800710c:	200000ee 	.word	0x200000ee
      }
    }
    tcp_input_pcb = pcb;
 8007110:	4a98      	ldr	r2, [pc, #608]	; (8007374 <tcp_input+0x74c>)
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007116:	69f8      	ldr	r0, [r7, #28]
 8007118:	f000 fac6 	bl	80076a8 <tcp_process>
 800711c:	4603      	mov	r3, r0
 800711e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007120:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007124:	f113 0f0d 	cmn.w	r3, #13
 8007128:	f000 80d3 	beq.w	80072d2 <tcp_input+0x6aa>
      if (recv_flags & TF_RESET) {
 800712c:	4b92      	ldr	r3, [pc, #584]	; (8007378 <tcp_input+0x750>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b00      	cmp	r3, #0
 8007136:	d016      	beq.n	8007166 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d008      	beq.n	8007154 <tcp_input+0x52c>
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	6912      	ldr	r2, [r2, #16]
 800714c:	f06f 010d 	mvn.w	r1, #13
 8007150:	4610      	mov	r0, r2
 8007152:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007154:	69f9      	ldr	r1, [r7, #28]
 8007156:	4889      	ldr	r0, [pc, #548]	; (800737c <tcp_input+0x754>)
 8007158:	f7ff fc4c 	bl	80069f4 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800715c:	69f9      	ldr	r1, [r7, #28]
 800715e:	2001      	movs	r0, #1
 8007160:	f7fd f960 	bl	8004424 <memp_free>
 8007164:	e0c0      	b.n	80072e8 <tcp_input+0x6c0>
      } else {
        err = ERR_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800716a:	4b85      	ldr	r3, [pc, #532]	; (8007380 <tcp_input+0x758>)
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d01b      	beq.n	80071aa <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007172:	4b83      	ldr	r3, [pc, #524]	; (8007380 <tcp_input+0x758>)
 8007174:	881b      	ldrh	r3, [r3, #0]
 8007176:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800717c:	2b00      	cmp	r3, #0
 800717e:	d009      	beq.n	8007194 <tcp_input+0x56c>
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	6910      	ldr	r0, [r2, #16]
 8007188:	89fa      	ldrh	r2, [r7, #14]
 800718a:	69f9      	ldr	r1, [r7, #28]
 800718c:	4798      	blx	r3
 800718e:	4603      	mov	r3, r0
 8007190:	74fb      	strb	r3, [r7, #19]
 8007192:	e001      	b.n	8007198 <tcp_input+0x570>
 8007194:	2300      	movs	r3, #0
 8007196:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007198:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800719c:	f113 0f0d 	cmn.w	r3, #13
 80071a0:	f000 8099 	beq.w	80072d6 <tcp_input+0x6ae>
              goto aborted;
            }
          }
          recv_acked = 0;
 80071a4:	4b76      	ldr	r3, [pc, #472]	; (8007380 <tcp_input+0x758>)
 80071a6:	2200      	movs	r2, #0
 80071a8:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80071aa:	69f8      	ldr	r0, [r7, #28]
 80071ac:	f000 f900 	bl	80073b0 <tcp_input_delayed_close>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	f040 8091 	bne.w	80072da <tcp_input+0x6b2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80071b8:	4b72      	ldr	r3, [pc, #456]	; (8007384 <tcp_input+0x75c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d041      	beq.n	8007244 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <tcp_input+0x5ae>
 80071c8:	4b6f      	ldr	r3, [pc, #444]	; (8007388 <tcp_input+0x760>)
 80071ca:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80071ce:	496f      	ldr	r1, [pc, #444]	; (800738c <tcp_input+0x764>)
 80071d0:	486f      	ldr	r0, [pc, #444]	; (8007390 <tcp_input+0x768>)
 80071d2:	f006 f80f 	bl	800d1f4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	7e9b      	ldrb	r3, [r3, #26]
 80071da:	f003 0310 	and.w	r3, r3, #16
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d008      	beq.n	80071f4 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80071e2:	4b68      	ldr	r3, [pc, #416]	; (8007384 <tcp_input+0x75c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fd fe78 	bl	8004edc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80071ec:	69f8      	ldr	r0, [r7, #28]
 80071ee:	f7fe fb79 	bl	80058e4 <tcp_abort>
            goto aborted;
 80071f2:	e079      	b.n	80072e8 <tcp_input+0x6c0>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00c      	beq.n	8007218 <tcp_input+0x5f0>
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	6918      	ldr	r0, [r3, #16]
 8007208:	4b5e      	ldr	r3, [pc, #376]	; (8007384 <tcp_input+0x75c>)
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	2300      	movs	r3, #0
 800720e:	69f9      	ldr	r1, [r7, #28]
 8007210:	47a0      	blx	r4
 8007212:	4603      	mov	r3, r0
 8007214:	74fb      	strb	r3, [r7, #19]
 8007216:	e008      	b.n	800722a <tcp_input+0x602>
 8007218:	4b5a      	ldr	r3, [pc, #360]	; (8007384 <tcp_input+0x75c>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	2300      	movs	r3, #0
 800721e:	69f9      	ldr	r1, [r7, #28]
 8007220:	2000      	movs	r0, #0
 8007222:	f7ff f98a 	bl	800653a <tcp_recv_null>
 8007226:	4603      	mov	r3, r0
 8007228:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800722a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800722e:	f113 0f0d 	cmn.w	r3, #13
 8007232:	d054      	beq.n	80072de <tcp_input+0x6b6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007234:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800723c:	4b51      	ldr	r3, [pc, #324]	; (8007384 <tcp_input+0x75c>)
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007244:	4b4c      	ldr	r3, [pc, #304]	; (8007378 <tcp_input+0x750>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d031      	beq.n	80072b4 <tcp_input+0x68c>
          if (pcb->refused_data != NULL) {
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007254:	2b00      	cmp	r3, #0
 8007256:	d009      	beq.n	800726c <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800725c:	7b5a      	ldrb	r2, [r3, #13]
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007262:	f042 0220 	orr.w	r2, r2, #32
 8007266:	b2d2      	uxtb	r2, r2
 8007268:	735a      	strb	r2, [r3, #13]
 800726a:	e023      	b.n	80072b4 <tcp_input+0x68c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007270:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8007274:	4293      	cmp	r3, r2
 8007276:	d005      	beq.n	8007284 <tcp_input+0x65c>
              pcb->rcv_wnd++;
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800727c:	3301      	adds	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <tcp_input+0x67e>
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	6918      	ldr	r0, [r3, #16]
 8007298:	2300      	movs	r3, #0
 800729a:	2200      	movs	r2, #0
 800729c:	69f9      	ldr	r1, [r7, #28]
 800729e:	47a0      	blx	r4
 80072a0:	4603      	mov	r3, r0
 80072a2:	74fb      	strb	r3, [r7, #19]
 80072a4:	e001      	b.n	80072aa <tcp_input+0x682>
 80072a6:	2300      	movs	r3, #0
 80072a8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80072aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80072ae:	f113 0f0d 	cmn.w	r3, #13
 80072b2:	d016      	beq.n	80072e2 <tcp_input+0x6ba>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80072b4:	4b2f      	ldr	r3, [pc, #188]	; (8007374 <tcp_input+0x74c>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80072ba:	69f8      	ldr	r0, [r7, #28]
 80072bc:	f000 f878 	bl	80073b0 <tcp_input_delayed_close>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10f      	bne.n	80072e6 <tcp_input+0x6be>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80072c6:	69f8      	ldr	r0, [r7, #28]
 80072c8:	f002 fd94 	bl	8009df4 <tcp_output>
 80072cc:	e00c      	b.n	80072e8 <tcp_input+0x6c0>
        goto aborted;
 80072ce:	bf00      	nop
 80072d0:	e00a      	b.n	80072e8 <tcp_input+0x6c0>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80072d2:	bf00      	nop
 80072d4:	e008      	b.n	80072e8 <tcp_input+0x6c0>
              goto aborted;
 80072d6:	bf00      	nop
 80072d8:	e006      	b.n	80072e8 <tcp_input+0x6c0>
          goto aborted;
 80072da:	bf00      	nop
 80072dc:	e004      	b.n	80072e8 <tcp_input+0x6c0>
            goto aborted;
 80072de:	bf00      	nop
 80072e0:	e002      	b.n	80072e8 <tcp_input+0x6c0>
              goto aborted;
 80072e2:	bf00      	nop
 80072e4:	e000      	b.n	80072e8 <tcp_input+0x6c0>
          goto aborted;
 80072e6:	bf00      	nop
    tcp_input_pcb = NULL;
 80072e8:	4b22      	ldr	r3, [pc, #136]	; (8007374 <tcp_input+0x74c>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80072ee:	4b25      	ldr	r3, [pc, #148]	; (8007384 <tcp_input+0x75c>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 80072f4:	4b27      	ldr	r3, [pc, #156]	; (8007394 <tcp_input+0x76c>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d037      	beq.n	800736c <tcp_input+0x744>
    {
      pbuf_free(inseg.p);
 80072fc:	4b25      	ldr	r3, [pc, #148]	; (8007394 <tcp_input+0x76c>)
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	4618      	mov	r0, r3
 8007302:	f7fd fdeb 	bl	8004edc <pbuf_free>
      inseg.p = NULL;
 8007306:	4b23      	ldr	r3, [pc, #140]	; (8007394 <tcp_input+0x76c>)
 8007308:	2200      	movs	r2, #0
 800730a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800730c:	e02e      	b.n	800736c <tcp_input+0x744>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800730e:	4b22      	ldr	r3, [pc, #136]	; (8007398 <tcp_input+0x770>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	899b      	ldrh	r3, [r3, #12]
 8007314:	b29b      	uxth	r3, r3
 8007316:	4618      	mov	r0, r3
 8007318:	f7fc fc83 	bl	8003c22 <lwip_htons>
 800731c:	4603      	mov	r3, r0
 800731e:	f003 0304 	and.w	r3, r3, #4
 8007322:	2b00      	cmp	r3, #0
 8007324:	d115      	bne.n	8007352 <tcp_input+0x72a>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007326:	4b1d      	ldr	r3, [pc, #116]	; (800739c <tcp_input+0x774>)
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	4b1d      	ldr	r3, [pc, #116]	; (80073a0 <tcp_input+0x778>)
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <tcp_input+0x77c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007336:	4b18      	ldr	r3, [pc, #96]	; (8007398 <tcp_input+0x770>)
 8007338:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800733a:	885b      	ldrh	r3, [r3, #2]
 800733c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800733e:	4a16      	ldr	r2, [pc, #88]	; (8007398 <tcp_input+0x770>)
 8007340:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007342:	8812      	ldrh	r2, [r2, #0]
 8007344:	b292      	uxth	r2, r2
 8007346:	9201      	str	r2, [sp, #4]
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	4b17      	ldr	r3, [pc, #92]	; (80073a8 <tcp_input+0x780>)
 800734c:	4a17      	ldr	r2, [pc, #92]	; (80073ac <tcp_input+0x784>)
 800734e:	f002 ffdb 	bl	800a308 <tcp_rst>
    pbuf_free(p);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fd fdc2 	bl	8004edc <pbuf_free>
  return;
 8007358:	e008      	b.n	800736c <tcp_input+0x744>
    goto dropped;
 800735a:	bf00      	nop
 800735c:	e002      	b.n	8007364 <tcp_input+0x73c>
dropped:
 800735e:	bf00      	nop
 8007360:	e000      	b.n	8007364 <tcp_input+0x73c>
      goto dropped;
 8007362:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7fd fdb9 	bl	8004edc <pbuf_free>
 800736a:	e000      	b.n	800736e <tcp_input+0x746>
  return;
 800736c:	bf00      	nop
}
 800736e:	3724      	adds	r7, #36	; 0x24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd90      	pop	{r4, r7, pc}
 8007374:	2000c6dc 	.word	0x2000c6dc
 8007378:	200000f1 	.word	0x200000f1
 800737c:	2000c6c8 	.word	0x2000c6c8
 8007380:	200000ec 	.word	0x200000ec
 8007384:	200000f4 	.word	0x200000f4
 8007388:	0800ee58 	.word	0x0800ee58
 800738c:	0800eff4 	.word	0x0800eff4
 8007390:	0800ee9c 	.word	0x0800ee9c
 8007394:	200000c4 	.word	0x200000c4
 8007398:	200000d4 	.word	0x200000d4
 800739c:	200000e8 	.word	0x200000e8
 80073a0:	200000ee 	.word	0x200000ee
 80073a4:	200000e4 	.word	0x200000e4
 80073a8:	20003408 	.word	0x20003408
 80073ac:	2000340c 	.word	0x2000340c

080073b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 80073b8:	4b14      	ldr	r3, [pc, #80]	; (800740c <tcp_input_delayed_close+0x5c>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	f003 0310 	and.w	r3, r3, #16
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01d      	beq.n	8007400 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	7e9b      	ldrb	r3, [r3, #26]
 80073c8:	f003 0310 	and.w	r3, r3, #16
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10d      	bne.n	80073ec <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d008      	beq.n	80073ec <tcp_input_delayed_close+0x3c>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6912      	ldr	r2, [r2, #16]
 80073e4:	f06f 010e 	mvn.w	r1, #14
 80073e8:	4610      	mov	r0, r2
 80073ea:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	4808      	ldr	r0, [pc, #32]	; (8007410 <tcp_input_delayed_close+0x60>)
 80073f0:	f7ff fb00 	bl	80069f4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	2001      	movs	r0, #1
 80073f8:	f7fd f814 	bl	8004424 <memp_free>
    return 1;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e000      	b.n	8007402 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	200000f1 	.word	0x200000f1
 8007410:	2000c6c8 	.word	0x2000c6c8

08007414 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af02      	add	r7, sp, #8
 800741a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800741c:	4b64      	ldr	r3, [pc, #400]	; (80075b0 <tcp_listen_input+0x19c>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b00      	cmp	r3, #0
 8007426:	f040 80bc 	bne.w	80075a2 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800742a:	4b61      	ldr	r3, [pc, #388]	; (80075b0 <tcp_listen_input+0x19c>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	f003 0310 	and.w	r3, r3, #16
 8007432:	2b00      	cmp	r3, #0
 8007434:	d016      	beq.n	8007464 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007436:	4b5f      	ldr	r3, [pc, #380]	; (80075b4 <tcp_listen_input+0x1a0>)
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	4b5f      	ldr	r3, [pc, #380]	; (80075b8 <tcp_listen_input+0x1a4>)
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	4b5e      	ldr	r3, [pc, #376]	; (80075bc <tcp_listen_input+0x1a8>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007446:	4b5e      	ldr	r3, [pc, #376]	; (80075c0 <tcp_listen_input+0x1ac>)
 8007448:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800744a:	885b      	ldrh	r3, [r3, #2]
 800744c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800744e:	4a5c      	ldr	r2, [pc, #368]	; (80075c0 <tcp_listen_input+0x1ac>)
 8007450:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007452:	8812      	ldrh	r2, [r2, #0]
 8007454:	b292      	uxth	r2, r2
 8007456:	9201      	str	r2, [sp, #4]
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	4b5a      	ldr	r3, [pc, #360]	; (80075c4 <tcp_listen_input+0x1b0>)
 800745c:	4a5a      	ldr	r2, [pc, #360]	; (80075c8 <tcp_listen_input+0x1b4>)
 800745e:	f002 ff53 	bl	800a308 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8007462:	e0a0      	b.n	80075a6 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8007464:	4b52      	ldr	r3, [pc, #328]	; (80075b0 <tcp_listen_input+0x19c>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 809a 	beq.w	80075a6 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	7d5b      	ldrb	r3, [r3, #21]
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff f93e 	bl	80066f8 <tcp_alloc>
 800747c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d111      	bne.n	80074a8 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <tcp_listen_input+0x8e>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	6910      	ldr	r0, [r2, #16]
 8007494:	f04f 32ff 	mov.w	r2, #4294967295
 8007498:	2100      	movs	r1, #0
 800749a:	4798      	blx	r3
 800749c:	4603      	mov	r3, r0
 800749e:	73bb      	strb	r3, [r7, #14]
      return;
 80074a0:	e082      	b.n	80075a8 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80074a2:	23f0      	movs	r3, #240	; 0xf0
 80074a4:	73bb      	strb	r3, [r7, #14]
      return;
 80074a6:	e07f      	b.n	80075a8 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80074a8:	4b48      	ldr	r3, [pc, #288]	; (80075cc <tcp_listen_input+0x1b8>)
 80074aa:	695a      	ldr	r2, [r3, #20]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80074b0:	4b46      	ldr	r3, [pc, #280]	; (80075cc <tcp_listen_input+0x1b8>)
 80074b2:	691a      	ldr	r2, [r3, #16]
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	8ada      	ldrh	r2, [r3, #22]
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80074c0:	4b3f      	ldr	r3, [pc, #252]	; (80075c0 <tcp_listen_input+0x1ac>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	b29a      	uxth	r2, r3
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2203      	movs	r2, #3
 80074d0:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80074d2:	4b3a      	ldr	r3, [pc, #232]	; (80075bc <tcp_listen_input+0x1a8>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80074e4:	6978      	ldr	r0, [r7, #20]
 80074e6:	f7ff fb01 	bl	8006aec <tcp_next_iss>
 80074ea:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8007504:	4b2d      	ldr	r3, [pc, #180]	; (80075bc <tcp_listen_input+0x1a8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	1e5a      	subs	r2, r3, #1
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691a      	ldr	r2, [r3, #16]
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	7a1b      	ldrb	r3, [r3, #8]
 8007520:	f003 030c 	and.w	r3, r3, #12
 8007524:	b2da      	uxtb	r2, r3
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800752a:	4b29      	ldr	r3, [pc, #164]	; (80075d0 <tcp_listen_input+0x1bc>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	60da      	str	r2, [r3, #12]
 8007532:	4a27      	ldr	r2, [pc, #156]	; (80075d0 <tcp_listen_input+0x1bc>)
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	f003 f936 	bl	800a7a8 <tcp_timer_needed>
 800753c:	4b25      	ldr	r3, [pc, #148]	; (80075d4 <tcp_listen_input+0x1c0>)
 800753e:	2201      	movs	r2, #1
 8007540:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8007542:	6978      	ldr	r0, [r7, #20]
 8007544:	f001 fd14 	bl	8008f70 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8007548:	4b1d      	ldr	r3, [pc, #116]	; (80075c0 <tcp_listen_input+0x1ac>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	89db      	ldrh	r3, [r3, #14]
 800754e:	b29a      	uxth	r2, r3
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	3304      	adds	r3, #4
 800756a:	4619      	mov	r1, r3
 800756c:	4610      	mov	r0, r2
 800756e:	f7ff fad5 	bl	8006b1c <tcp_eff_send_mss_impl>
 8007572:	4603      	mov	r3, r0
 8007574:	461a      	mov	r2, r3
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800757a:	2112      	movs	r1, #18
 800757c:	6978      	ldr	r0, [r7, #20]
 800757e:	f002 fae1 	bl	8009b44 <tcp_enqueue_flags>
 8007582:	4603      	mov	r3, r0
 8007584:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d004      	beq.n	8007598 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800758e:	2100      	movs	r1, #0
 8007590:	6978      	ldr	r0, [r7, #20]
 8007592:	f7fe f8f5 	bl	8005780 <tcp_abandon>
      return;
 8007596:	e007      	b.n	80075a8 <tcp_listen_input+0x194>
    tcp_output(npcb);
 8007598:	6978      	ldr	r0, [r7, #20]
 800759a:	f002 fc2b 	bl	8009df4 <tcp_output>
  return;
 800759e:	bf00      	nop
 80075a0:	e001      	b.n	80075a6 <tcp_listen_input+0x192>
    return;
 80075a2:	bf00      	nop
 80075a4:	e000      	b.n	80075a8 <tcp_listen_input+0x194>
  return;
 80075a6:	bf00      	nop
}
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	200000f0 	.word	0x200000f0
 80075b4:	200000e8 	.word	0x200000e8
 80075b8:	200000ee 	.word	0x200000ee
 80075bc:	200000e4 	.word	0x200000e4
 80075c0:	200000d4 	.word	0x200000d4
 80075c4:	20003408 	.word	0x20003408
 80075c8:	2000340c 	.word	0x2000340c
 80075cc:	200033f8 	.word	0x200033f8
 80075d0:	2000c6c8 	.word	0x2000c6c8
 80075d4:	2000c6c4 	.word	0x2000c6c4

080075d8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af02      	add	r7, sp, #8
 80075de:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80075e0:	4b29      	ldr	r3, [pc, #164]	; (8007688 <tcp_timewait_input+0xb0>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d147      	bne.n	800767c <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80075ec:	4b26      	ldr	r3, [pc, #152]	; (8007688 <tcp_timewait_input+0xb0>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d027      	beq.n	8007648 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80075f8:	4b24      	ldr	r3, [pc, #144]	; (800768c <tcp_timewait_input+0xb4>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	db2a      	blt.n	800765c <tcp_timewait_input+0x84>
 8007606:	4b21      	ldr	r3, [pc, #132]	; (800768c <tcp_timewait_input+0xb4>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007612:	440b      	add	r3, r1
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	dc20      	bgt.n	800765c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800761a:	4b1d      	ldr	r3, [pc, #116]	; (8007690 <tcp_timewait_input+0xb8>)
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	4b1d      	ldr	r3, [pc, #116]	; (8007694 <tcp_timewait_input+0xbc>)
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	4b19      	ldr	r3, [pc, #100]	; (800768c <tcp_timewait_input+0xb4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800762a:	4b1b      	ldr	r3, [pc, #108]	; (8007698 <tcp_timewait_input+0xc0>)
 800762c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800762e:	885b      	ldrh	r3, [r3, #2]
 8007630:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007632:	4a19      	ldr	r2, [pc, #100]	; (8007698 <tcp_timewait_input+0xc0>)
 8007634:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007636:	8812      	ldrh	r2, [r2, #0]
 8007638:	b292      	uxth	r2, r2
 800763a:	9201      	str	r2, [sp, #4]
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	4b17      	ldr	r3, [pc, #92]	; (800769c <tcp_timewait_input+0xc4>)
 8007640:	4a17      	ldr	r2, [pc, #92]	; (80076a0 <tcp_timewait_input+0xc8>)
 8007642:	f002 fe61 	bl	800a308 <tcp_rst>
      return;
 8007646:	e01c      	b.n	8007682 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8007648:	4b0f      	ldr	r3, [pc, #60]	; (8007688 <tcp_timewait_input+0xb0>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007654:	4b13      	ldr	r3, [pc, #76]	; (80076a4 <tcp_timewait_input+0xcc>)
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800765c:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <tcp_timewait_input+0xbc>)
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00d      	beq.n	8007680 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	7e9b      	ldrb	r3, [r3, #26]
 8007668:	f043 0302 	orr.w	r3, r3, #2
 800766c:	b2da      	uxtb	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f002 fbbe 	bl	8009df4 <tcp_output>
  }
  return;
 8007678:	bf00      	nop
 800767a:	e001      	b.n	8007680 <tcp_timewait_input+0xa8>
    return;
 800767c:	bf00      	nop
 800767e:	e000      	b.n	8007682 <tcp_timewait_input+0xaa>
  return;
 8007680:	bf00      	nop
}
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	200000f0 	.word	0x200000f0
 800768c:	200000e4 	.word	0x200000e4
 8007690:	200000e8 	.word	0x200000e8
 8007694:	200000ee 	.word	0x200000ee
 8007698:	200000d4 	.word	0x200000d4
 800769c:	20003408 	.word	0x20003408
 80076a0:	2000340c 	.word	0x2000340c
 80076a4:	2000c6cc 	.word	0x2000c6cc

080076a8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08a      	sub	sp, #40	; 0x28
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80076b8:	4ba4      	ldr	r3, [pc, #656]	; (800794c <tcp_process+0x2a4>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	f003 0304 	and.w	r3, r3, #4
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d04e      	beq.n	8007762 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	7d1b      	ldrb	r3, [r3, #20]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d108      	bne.n	80076de <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076d0:	4b9f      	ldr	r3, [pc, #636]	; (8007950 <tcp_process+0x2a8>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d123      	bne.n	8007720 <tcp_process+0x78>
        acceptable = 1;
 80076d8:	2301      	movs	r3, #1
 80076da:	76fb      	strb	r3, [r7, #27]
 80076dc:	e020      	b.n	8007720 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076e2:	4b9c      	ldr	r3, [pc, #624]	; (8007954 <tcp_process+0x2ac>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d102      	bne.n	80076f0 <tcp_process+0x48>
        acceptable = 1;
 80076ea:	2301      	movs	r3, #1
 80076ec:	76fb      	strb	r3, [r7, #27]
 80076ee:	e017      	b.n	8007720 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80076f0:	4b98      	ldr	r3, [pc, #608]	; (8007954 <tcp_process+0x2ac>)
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	db10      	blt.n	8007720 <tcp_process+0x78>
 80076fe:	4b95      	ldr	r3, [pc, #596]	; (8007954 <tcp_process+0x2ac>)
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800770a:	440b      	add	r3, r1
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	dc06      	bgt.n	8007720 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	7e9b      	ldrb	r3, [r3, #26]
 8007716:	f043 0302 	orr.w	r3, r3, #2
 800771a:	b2da      	uxtb	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007720:	7efb      	ldrb	r3, [r7, #27]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d01b      	beq.n	800775e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	7d1b      	ldrb	r3, [r3, #20]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <tcp_process+0x94>
 800772e:	4b8a      	ldr	r3, [pc, #552]	; (8007958 <tcp_process+0x2b0>)
 8007730:	f240 22e7 	movw	r2, #743	; 0x2e7
 8007734:	4989      	ldr	r1, [pc, #548]	; (800795c <tcp_process+0x2b4>)
 8007736:	488a      	ldr	r0, [pc, #552]	; (8007960 <tcp_process+0x2b8>)
 8007738:	f005 fd5c 	bl	800d1f4 <iprintf>
      recv_flags |= TF_RESET;
 800773c:	4b89      	ldr	r3, [pc, #548]	; (8007964 <tcp_process+0x2bc>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	f043 0308 	orr.w	r3, r3, #8
 8007744:	b2da      	uxtb	r2, r3
 8007746:	4b87      	ldr	r3, [pc, #540]	; (8007964 <tcp_process+0x2bc>)
 8007748:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7e9b      	ldrb	r3, [r3, #26]
 800774e:	f023 0301 	bic.w	r3, r3, #1
 8007752:	b2da      	uxtb	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8007758:	f06f 030d 	mvn.w	r3, #13
 800775c:	e34d      	b.n	8007dfa <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	e34b      	b.n	8007dfa <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007762:	4b7a      	ldr	r3, [pc, #488]	; (800794c <tcp_process+0x2a4>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d010      	beq.n	8007790 <tcp_process+0xe8>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	7d1b      	ldrb	r3, [r3, #20]
 8007772:	2b02      	cmp	r3, #2
 8007774:	d00c      	beq.n	8007790 <tcp_process+0xe8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	7d1b      	ldrb	r3, [r3, #20]
 800777a:	2b03      	cmp	r3, #3
 800777c:	d008      	beq.n	8007790 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	7e9b      	ldrb	r3, [r3, #26]
 8007782:	f043 0302 	orr.w	r3, r3, #2
 8007786:	b2da      	uxtb	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	e334      	b.n	8007dfa <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	7e9b      	ldrb	r3, [r3, #26]
 8007794:	f003 0310 	and.w	r3, r3, #16
 8007798:	2b00      	cmp	r3, #0
 800779a:	d103      	bne.n	80077a4 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800779c:	4b72      	ldr	r3, [pc, #456]	; (8007968 <tcp_process+0x2c0>)
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 fbdf 	bl	8008f70 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	7d1b      	ldrb	r3, [r3, #20]
 80077b6:	3b02      	subs	r3, #2
 80077b8:	2b07      	cmp	r3, #7
 80077ba:	f200 830e 	bhi.w	8007dda <tcp_process+0x732>
 80077be:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <tcp_process+0x11c>)
 80077c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c4:	080077e5 	.word	0x080077e5
 80077c8:	080079dd 	.word	0x080079dd
 80077cc:	08007b35 	.word	0x08007b35
 80077d0:	08007b5f 	.word	0x08007b5f
 80077d4:	08007c89 	.word	0x08007c89
 80077d8:	08007b35 	.word	0x08007b35
 80077dc:	08007d15 	.word	0x08007d15
 80077e0:	08007da5 	.word	0x08007da5
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80077e4:	4b59      	ldr	r3, [pc, #356]	; (800794c <tcp_process+0x2a4>)
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	f003 0310 	and.w	r3, r3, #16
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 80cb 	beq.w	8007988 <tcp_process+0x2e0>
 80077f2:	4b56      	ldr	r3, [pc, #344]	; (800794c <tcp_process+0x2a4>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 80c4 	beq.w	8007988 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	4b52      	ldr	r3, [pc, #328]	; (8007950 <tcp_process+0x2a8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	429a      	cmp	r2, r3
 800780c:	f040 80bc 	bne.w	8007988 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8007810:	4b50      	ldr	r3, [pc, #320]	; (8007954 <tcp_process+0x2ac>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8007822:	4b4b      	ldr	r3, [pc, #300]	; (8007950 <tcp_process+0x2a8>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800782a:	4b50      	ldr	r3, [pc, #320]	; (800796c <tcp_process+0x2c4>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	89db      	ldrh	r3, [r3, #14]
 8007830:	b29a      	uxth	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007844:	4b43      	ldr	r3, [pc, #268]	; (8007954 <tcp_process+0x2ac>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	1e5a      	subs	r2, r3, #1
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2204      	movs	r2, #4
 8007852:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3304      	adds	r3, #4
 800785c:	4619      	mov	r1, r3
 800785e:	4610      	mov	r0, r2
 8007860:	f7ff f95c 	bl	8006b1c <tcp_eff_send_mss_impl>
 8007864:	4603      	mov	r3, r0
 8007866:	461a      	mov	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	f241 121c 	movw	r2, #4380	; 0x111c
 8007876:	429a      	cmp	r2, r3
 8007878:	bf38      	it	cc
 800787a:	461a      	movcc	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4293      	cmp	r3, r2
 8007884:	bf28      	it	cs
 8007886:	4613      	movcs	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007896:	2b00      	cmp	r3, #0
 8007898:	d106      	bne.n	80078a8 <tcp_process+0x200>
 800789a:	4b2f      	ldr	r3, [pc, #188]	; (8007958 <tcp_process+0x2b0>)
 800789c:	f240 321a 	movw	r2, #794	; 0x31a
 80078a0:	4933      	ldr	r1, [pc, #204]	; (8007970 <tcp_process+0x2c8>)
 80078a2:	482f      	ldr	r0, [pc, #188]	; (8007960 <tcp_process+0x2b8>)
 80078a4:	f005 fca6 	bl	800d1f4 <iprintf>
      --pcb->snd_queuelen;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80078ae:	3b01      	subs	r3, #1
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078bc:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d111      	bne.n	80078e8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078c8:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <tcp_process+0x236>
 80078d0:	4b21      	ldr	r3, [pc, #132]	; (8007958 <tcp_process+0x2b0>)
 80078d2:	f240 3222 	movw	r2, #802	; 0x322
 80078d6:	4927      	ldr	r1, [pc, #156]	; (8007974 <tcp_process+0x2cc>)
 80078d8:	4821      	ldr	r0, [pc, #132]	; (8007960 <tcp_process+0x2b8>)
 80078da:	f005 fc8b 	bl	800d1f4 <iprintf>
        pcb->unsent = rseg->next;
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	669a      	str	r2, [r3, #104]	; 0x68
 80078e6:	e003      	b.n	80078f0 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 80078f0:	69f8      	ldr	r0, [r7, #28]
 80078f2:	f7fe fddf 	bl	80064b4 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d104      	bne.n	8007908 <tcp_process+0x260>
        pcb->rtime = -1;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007904:	861a      	strh	r2, [r3, #48]	; 0x30
 8007906:	e006      	b.n	8007916 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800791c:	2b00      	cmp	r3, #0
 800791e:	d00a      	beq.n	8007936 <tcp_process+0x28e>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	6910      	ldr	r0, [r2, #16]
 800792a:	2200      	movs	r2, #0
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	4798      	blx	r3
 8007930:	4603      	mov	r3, r0
 8007932:	76bb      	strb	r3, [r7, #26]
 8007934:	e001      	b.n	800793a <tcp_process+0x292>
 8007936:	2300      	movs	r3, #0
 8007938:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800793a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800793e:	f113 0f0d 	cmn.w	r3, #13
 8007942:	d119      	bne.n	8007978 <tcp_process+0x2d0>
        return ERR_ABRT;
 8007944:	f06f 030c 	mvn.w	r3, #12
 8007948:	e257      	b.n	8007dfa <tcp_process+0x752>
 800794a:	bf00      	nop
 800794c:	200000f0 	.word	0x200000f0
 8007950:	200000e8 	.word	0x200000e8
 8007954:	200000e4 	.word	0x200000e4
 8007958:	0800ee58 	.word	0x0800ee58
 800795c:	0800f010 	.word	0x0800f010
 8007960:	0800ee9c 	.word	0x0800ee9c
 8007964:	200000f1 	.word	0x200000f1
 8007968:	2000c6cc 	.word	0x2000c6cc
 800796c:	200000d4 	.word	0x200000d4
 8007970:	0800f030 	.word	0x0800f030
 8007974:	0800f048 	.word	0x0800f048
      }
      tcp_ack_now(pcb);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	7e9b      	ldrb	r3, [r3, #26]
 800797c:	f043 0302 	orr.w	r3, r3, #2
 8007980:	b2da      	uxtb	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8007986:	e22a      	b.n	8007dde <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8007988:	4b9f      	ldr	r3, [pc, #636]	; (8007c08 <tcp_process+0x560>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 8224 	beq.w	8007dde <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007996:	4b9d      	ldr	r3, [pc, #628]	; (8007c0c <tcp_process+0x564>)
 8007998:	6818      	ldr	r0, [r3, #0]
 800799a:	4b9d      	ldr	r3, [pc, #628]	; (8007c10 <tcp_process+0x568>)
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	4b9c      	ldr	r3, [pc, #624]	; (8007c14 <tcp_process+0x56c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079a6:	4b9c      	ldr	r3, [pc, #624]	; (8007c18 <tcp_process+0x570>)
 80079a8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80079aa:	885b      	ldrh	r3, [r3, #2]
 80079ac:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80079ae:	4a9a      	ldr	r2, [pc, #616]	; (8007c18 <tcp_process+0x570>)
 80079b0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80079b2:	8812      	ldrh	r2, [r2, #0]
 80079b4:	b292      	uxth	r2, r2
 80079b6:	9201      	str	r2, [sp, #4]
 80079b8:	9300      	str	r3, [sp, #0]
 80079ba:	4b98      	ldr	r3, [pc, #608]	; (8007c1c <tcp_process+0x574>)
 80079bc:	4a98      	ldr	r2, [pc, #608]	; (8007c20 <tcp_process+0x578>)
 80079be:	f002 fca3 	bl	800a308 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079c8:	2b05      	cmp	r3, #5
 80079ca:	f200 8208 	bhi.w	8007dde <tcp_process+0x736>
        pcb->rtime = 0;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f002 fd0d 	bl	800a3f4 <tcp_rexmit_rto>
    break;
 80079da:	e200      	b.n	8007dde <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 80079dc:	4b8a      	ldr	r3, [pc, #552]	; (8007c08 <tcp_process+0x560>)
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	f003 0310 	and.w	r3, r3, #16
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 8091 	beq.w	8007b0c <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80079ea:	4b88      	ldr	r3, [pc, #544]	; (8007c0c <tcp_process+0x564>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	3b01      	subs	r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	db71      	blt.n	8007ade <tcp_process+0x436>
 80079fa:	4b84      	ldr	r3, [pc, #528]	; (8007c0c <tcp_process+0x564>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dc6a      	bgt.n	8007ade <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00b      	beq.n	8007a2e <tcp_process+0x386>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d106      	bne.n	8007a2e <tcp_process+0x386>
 8007a20:	4b80      	ldr	r3, [pc, #512]	; (8007c24 <tcp_process+0x57c>)
 8007a22:	f240 3251 	movw	r2, #849	; 0x351
 8007a26:	4980      	ldr	r1, [pc, #512]	; (8007c28 <tcp_process+0x580>)
 8007a28:	4880      	ldr	r0, [pc, #512]	; (8007c2c <tcp_process+0x584>)
 8007a2a:	f005 fbe3 	bl	800d1f4 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d102      	bne.n	8007a3c <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8007a36:	23fa      	movs	r3, #250	; 0xfa
 8007a38:	76bb      	strb	r3, [r7, #26]
 8007a3a:	e011      	b.n	8007a60 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00a      	beq.n	8007a5c <tcp_process+0x3b4>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6910      	ldr	r0, [r2, #16]
 8007a50:	2200      	movs	r2, #0
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	4798      	blx	r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	76bb      	strb	r3, [r7, #26]
 8007a5a:	e001      	b.n	8007a60 <tcp_process+0x3b8>
 8007a5c:	23f0      	movs	r3, #240	; 0xf0
 8007a5e:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8007a60:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00a      	beq.n	8007a7e <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 8007a68:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007a6c:	f113 0f0d 	cmn.w	r3, #13
 8007a70:	d002      	beq.n	8007a78 <tcp_process+0x3d0>
            tcp_abort(pcb);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fd ff36 	bl	80058e4 <tcp_abort>
          }
          return ERR_ABRT;
 8007a78:	f06f 030c 	mvn.w	r3, #12
 8007a7c:	e1bd      	b.n	8007dfa <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fa42 	bl	8007f08 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8007a84:	4b6a      	ldr	r3, [pc, #424]	; (8007c30 <tcp_process+0x588>)
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <tcp_process+0x3f0>
          recv_acked--;
 8007a8c:	4b68      	ldr	r3, [pc, #416]	; (8007c30 <tcp_process+0x588>)
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	4b66      	ldr	r3, [pc, #408]	; (8007c30 <tcp_process+0x588>)
 8007a96:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	f241 121c 	movw	r2, #4380	; 0x111c
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	bf38      	it	cc
 8007aa6:	461a      	movcc	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	bf28      	it	cs
 8007ab2:	4613      	movcs	r3, r2
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8007abc:	4b5d      	ldr	r3, [pc, #372]	; (8007c34 <tcp_process+0x58c>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d034      	beq.n	8007b32 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	7e9b      	ldrb	r3, [r3, #26]
 8007acc:	f043 0302 	orr.w	r3, r3, #2
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2207      	movs	r2, #7
 8007ada:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8007adc:	e029      	b.n	8007b32 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ade:	4b4b      	ldr	r3, [pc, #300]	; (8007c0c <tcp_process+0x564>)
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	4b4b      	ldr	r3, [pc, #300]	; (8007c10 <tcp_process+0x568>)
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4b4a      	ldr	r3, [pc, #296]	; (8007c14 <tcp_process+0x56c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007aee:	4b4a      	ldr	r3, [pc, #296]	; (8007c18 <tcp_process+0x570>)
 8007af0:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007af2:	885b      	ldrh	r3, [r3, #2]
 8007af4:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007af6:	4a48      	ldr	r2, [pc, #288]	; (8007c18 <tcp_process+0x570>)
 8007af8:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007afa:	8812      	ldrh	r2, [r2, #0]
 8007afc:	b292      	uxth	r2, r2
 8007afe:	9201      	str	r2, [sp, #4]
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	4b46      	ldr	r3, [pc, #280]	; (8007c1c <tcp_process+0x574>)
 8007b04:	4a46      	ldr	r2, [pc, #280]	; (8007c20 <tcp_process+0x578>)
 8007b06:	f002 fbff 	bl	800a308 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8007b0a:	e16a      	b.n	8007de2 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007b0c:	4b3e      	ldr	r3, [pc, #248]	; (8007c08 <tcp_process+0x560>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8164 	beq.w	8007de2 <tcp_process+0x73a>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	1e5a      	subs	r2, r3, #1
 8007b20:	4b3c      	ldr	r3, [pc, #240]	; (8007c14 <tcp_process+0x56c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	f040 815c 	bne.w	8007de2 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f002 fc98 	bl	800a460 <tcp_rexmit>
    break;
 8007b30:	e157      	b.n	8007de2 <tcp_process+0x73a>
 8007b32:	e156      	b.n	8007de2 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9e7 	bl	8007f08 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007b3a:	4b3e      	ldr	r3, [pc, #248]	; (8007c34 <tcp_process+0x58c>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 814f 	beq.w	8007de6 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7e9b      	ldrb	r3, [r3, #26]
 8007b4c:	f043 0302 	orr.w	r3, r3, #2
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2207      	movs	r2, #7
 8007b5a:	751a      	strb	r2, [r3, #20]
    }
    break;
 8007b5c:	e143      	b.n	8007de6 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f9d2 	bl	8007f08 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007b64:	4b33      	ldr	r3, [pc, #204]	; (8007c34 <tcp_process+0x58c>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d074      	beq.n	8007c5a <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b70:	4b25      	ldr	r3, [pc, #148]	; (8007c08 <tcp_process+0x560>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	f003 0310 	and.w	r3, r3, #16
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d063      	beq.n	8007c44 <tcp_process+0x59c>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b80:	4b22      	ldr	r3, [pc, #136]	; (8007c0c <tcp_process+0x564>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d15d      	bne.n	8007c44 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d159      	bne.n	8007c44 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	7e9b      	ldrb	r3, [r3, #26]
 8007b94:	f043 0302 	orr.w	r3, r3, #2
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7fe fee6 	bl	8006970 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007ba4:	4b24      	ldr	r3, [pc, #144]	; (8007c38 <tcp_process+0x590>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d105      	bne.n	8007bba <tcp_process+0x512>
 8007bae:	4b22      	ldr	r3, [pc, #136]	; (8007c38 <tcp_process+0x590>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	4a20      	ldr	r2, [pc, #128]	; (8007c38 <tcp_process+0x590>)
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	e013      	b.n	8007be2 <tcp_process+0x53a>
 8007bba:	4b1f      	ldr	r3, [pc, #124]	; (8007c38 <tcp_process+0x590>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	e00c      	b.n	8007bdc <tcp_process+0x534>
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d104      	bne.n	8007bd6 <tcp_process+0x52e>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68da      	ldr	r2, [r3, #12]
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	60da      	str	r2, [r3, #12]
 8007bd4:	e005      	b.n	8007be2 <tcp_process+0x53a>
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	617b      	str	r3, [r7, #20]
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1ef      	bne.n	8007bc2 <tcp_process+0x51a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	60da      	str	r2, [r3, #12]
 8007be8:	4b14      	ldr	r3, [pc, #80]	; (8007c3c <tcp_process+0x594>)
 8007bea:	2201      	movs	r2, #1
 8007bec:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	220a      	movs	r2, #10
 8007bf2:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007bf4:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <tcp_process+0x598>)
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	60da      	str	r2, [r3, #12]
 8007bfc:	4a10      	ldr	r2, [pc, #64]	; (8007c40 <tcp_process+0x598>)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	f002 fdd1 	bl	800a7a8 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8007c06:	e0f0      	b.n	8007dea <tcp_process+0x742>
 8007c08:	200000f0 	.word	0x200000f0
 8007c0c:	200000e8 	.word	0x200000e8
 8007c10:	200000ee 	.word	0x200000ee
 8007c14:	200000e4 	.word	0x200000e4
 8007c18:	200000d4 	.word	0x200000d4
 8007c1c:	20003408 	.word	0x20003408
 8007c20:	2000340c 	.word	0x2000340c
 8007c24:	0800ee58 	.word	0x0800ee58
 8007c28:	0800f05c 	.word	0x0800f05c
 8007c2c:	0800ee9c 	.word	0x0800ee9c
 8007c30:	200000ec 	.word	0x200000ec
 8007c34:	200000f1 	.word	0x200000f1
 8007c38:	2000c6c8 	.word	0x2000c6c8
 8007c3c:	2000c6c4 	.word	0x2000c6c4
 8007c40:	2000c6d8 	.word	0x2000c6d8
        tcp_ack_now(pcb);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7e9b      	ldrb	r3, [r3, #26]
 8007c48:	f043 0302 	orr.w	r3, r3, #2
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2208      	movs	r2, #8
 8007c56:	751a      	strb	r2, [r3, #20]
    break;
 8007c58:	e0c7      	b.n	8007dea <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c5a:	4b6a      	ldr	r3, [pc, #424]	; (8007e04 <tcp_process+0x75c>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 80c1 	beq.w	8007dea <tcp_process+0x742>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c6c:	4b66      	ldr	r3, [pc, #408]	; (8007e08 <tcp_process+0x760>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	f040 80ba 	bne.w	8007dea <tcp_process+0x742>
               pcb->unsent == NULL) {
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f040 80b5 	bne.w	8007dea <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2206      	movs	r2, #6
 8007c84:	751a      	strb	r2, [r3, #20]
    break;
 8007c86:	e0b0      	b.n	8007dea <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 f93d 	bl	8007f08 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8007c8e:	4b5f      	ldr	r3, [pc, #380]	; (8007e0c <tcp_process+0x764>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	f003 0320 	and.w	r3, r3, #32
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f000 80a9 	beq.w	8007dee <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	7e9b      	ldrb	r3, [r3, #26]
 8007ca0:	f043 0302 	orr.w	r3, r3, #2
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fe fe60 	bl	8006970 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007cb0:	4b57      	ldr	r3, [pc, #348]	; (8007e10 <tcp_process+0x768>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d105      	bne.n	8007cc6 <tcp_process+0x61e>
 8007cba:	4b55      	ldr	r3, [pc, #340]	; (8007e10 <tcp_process+0x768>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	4a53      	ldr	r2, [pc, #332]	; (8007e10 <tcp_process+0x768>)
 8007cc2:	6013      	str	r3, [r2, #0]
 8007cc4:	e013      	b.n	8007cee <tcp_process+0x646>
 8007cc6:	4b52      	ldr	r3, [pc, #328]	; (8007e10 <tcp_process+0x768>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	e00c      	b.n	8007ce8 <tcp_process+0x640>
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d104      	bne.n	8007ce2 <tcp_process+0x63a>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	60da      	str	r2, [r3, #12]
 8007ce0:	e005      	b.n	8007cee <tcp_process+0x646>
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	613b      	str	r3, [r7, #16]
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1ef      	bne.n	8007cce <tcp_process+0x626>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	60da      	str	r2, [r3, #12]
 8007cf4:	4b47      	ldr	r3, [pc, #284]	; (8007e14 <tcp_process+0x76c>)
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	220a      	movs	r2, #10
 8007cfe:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007d00:	4b45      	ldr	r3, [pc, #276]	; (8007e18 <tcp_process+0x770>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	60da      	str	r2, [r3, #12]
 8007d08:	4a43      	ldr	r2, [pc, #268]	; (8007e18 <tcp_process+0x770>)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	f002 fd4b 	bl	800a7a8 <tcp_timer_needed>
    }
    break;
 8007d12:	e06c      	b.n	8007dee <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f8f7 	bl	8007f08 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007d1a:	4b3a      	ldr	r3, [pc, #232]	; (8007e04 <tcp_process+0x75c>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d065      	beq.n	8007df2 <tcp_process+0x74a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d2a:	4b37      	ldr	r3, [pc, #220]	; (8007e08 <tcp_process+0x760>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d15f      	bne.n	8007df2 <tcp_process+0x74a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d15b      	bne.n	8007df2 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f7fe fe18 	bl	8006970 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007d40:	4b33      	ldr	r3, [pc, #204]	; (8007e10 <tcp_process+0x768>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d105      	bne.n	8007d56 <tcp_process+0x6ae>
 8007d4a:	4b31      	ldr	r3, [pc, #196]	; (8007e10 <tcp_process+0x768>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	4a2f      	ldr	r2, [pc, #188]	; (8007e10 <tcp_process+0x768>)
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	e013      	b.n	8007d7e <tcp_process+0x6d6>
 8007d56:	4b2e      	ldr	r3, [pc, #184]	; (8007e10 <tcp_process+0x768>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	e00c      	b.n	8007d78 <tcp_process+0x6d0>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d104      	bne.n	8007d72 <tcp_process+0x6ca>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	60da      	str	r2, [r3, #12]
 8007d70:	e005      	b.n	8007d7e <tcp_process+0x6d6>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	60fb      	str	r3, [r7, #12]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1ef      	bne.n	8007d5e <tcp_process+0x6b6>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	60da      	str	r2, [r3, #12]
 8007d84:	4b23      	ldr	r3, [pc, #140]	; (8007e14 <tcp_process+0x76c>)
 8007d86:	2201      	movs	r2, #1
 8007d88:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	220a      	movs	r2, #10
 8007d8e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007d90:	4b21      	ldr	r3, [pc, #132]	; (8007e18 <tcp_process+0x770>)
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	60da      	str	r2, [r3, #12]
 8007d98:	4a1f      	ldr	r2, [pc, #124]	; (8007e18 <tcp_process+0x770>)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	f002 fd03 	bl	800a7a8 <tcp_timer_needed>
    }
    break;
 8007da2:	e026      	b.n	8007df2 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f8af 	bl	8007f08 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007daa:	4b16      	ldr	r3, [pc, #88]	; (8007e04 <tcp_process+0x75c>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	f003 0310 	and.w	r3, r3, #16
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d01f      	beq.n	8007df6 <tcp_process+0x74e>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007dba:	4b13      	ldr	r3, [pc, #76]	; (8007e08 <tcp_process+0x760>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d119      	bne.n	8007df6 <tcp_process+0x74e>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d115      	bne.n	8007df6 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8007dca:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <tcp_process+0x764>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	f043 0310 	orr.w	r3, r3, #16
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	4b0d      	ldr	r3, [pc, #52]	; (8007e0c <tcp_process+0x764>)
 8007dd6:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007dd8:	e00d      	b.n	8007df6 <tcp_process+0x74e>
  default:
    break;
 8007dda:	bf00      	nop
 8007ddc:	e00c      	b.n	8007df8 <tcp_process+0x750>
    break;
 8007dde:	bf00      	nop
 8007de0:	e00a      	b.n	8007df8 <tcp_process+0x750>
    break;
 8007de2:	bf00      	nop
 8007de4:	e008      	b.n	8007df8 <tcp_process+0x750>
    break;
 8007de6:	bf00      	nop
 8007de8:	e006      	b.n	8007df8 <tcp_process+0x750>
    break;
 8007dea:	bf00      	nop
 8007dec:	e004      	b.n	8007df8 <tcp_process+0x750>
    break;
 8007dee:	bf00      	nop
 8007df0:	e002      	b.n	8007df8 <tcp_process+0x750>
    break;
 8007df2:	bf00      	nop
 8007df4:	e000      	b.n	8007df8 <tcp_process+0x750>
    break;
 8007df6:	bf00      	nop
  }
  return ERR_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3720      	adds	r7, #32
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	200000f0 	.word	0x200000f0
 8007e08:	200000e8 	.word	0x200000e8
 8007e0c:	200000f1 	.word	0x200000f1
 8007e10:	2000c6c8 	.word	0x2000c6c8
 8007e14:	2000c6c4 	.word	0x2000c6c4
 8007e18:	2000c6d8 	.word	0x2000c6d8

08007e1c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007e1c:	b590      	push	{r4, r7, lr}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	899b      	ldrh	r3, [r3, #12]
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fb fef7 	bl	8003c22 <lwip_htons>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d027      	beq.n	8007e8e <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8007e3e:	6838      	ldr	r0, [r7, #0]
 8007e40:	f7fe fb24 	bl	800648c <tcp_segs_free>
    next = NULL;
 8007e44:	2300      	movs	r3, #0
 8007e46:	603b      	str	r3, [r7, #0]
 8007e48:	e055      	b.n	8007ef6 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	899b      	ldrh	r3, [r3, #12]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fb fee5 	bl	8003c22 <lwip_htons>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f003 0301 	and.w	r3, r3, #1
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00d      	beq.n	8007e7e <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	899b      	ldrh	r3, [r3, #12]
 8007e68:	b29c      	uxth	r4, r3
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	f7fb fed9 	bl	8003c22 <lwip_htons>
 8007e70:	4603      	mov	r3, r0
 8007e72:	461a      	mov	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	4322      	orrs	r2, r4
 8007e7a:	b292      	uxth	r2, r2
 8007e7c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7fe fb13 	bl	80064b4 <tcp_seg_free>
    while (next &&
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00e      	beq.n	8007eb2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	891b      	ldrh	r3, [r3, #8]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	4b1a      	ldr	r3, [pc, #104]	; (8007f04 <tcp_oos_insert_segment+0xe8>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	441a      	add	r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	8909      	ldrh	r1, [r1, #8]
 8007eaa:	440b      	add	r3, r1
 8007eac:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	dacb      	bge.n	8007e4a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01e      	beq.n	8007ef6 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	891b      	ldrh	r3, [r3, #8]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <tcp_oos_insert_segment+0xe8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	441a      	add	r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	dd12      	ble.n	8007ef6 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	4b0a      	ldr	r3, [pc, #40]	; (8007f04 <tcp_oos_insert_segment+0xe8>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	891b      	ldrh	r3, [r3, #8]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	f7fc fe7f 	bl	8004bf4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	601a      	str	r2, [r3, #0]
}
 8007efc:	bf00      	nop
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd90      	pop	{r4, r7, pc}
 8007f04:	200000e4 	.word	0x200000e4

08007f08 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f0a:	b08d      	sub	sp, #52	; 0x34
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8007f10:	2300      	movs	r3, #0
 8007f12:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	7d1b      	ldrb	r3, [r3, #20]
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d806      	bhi.n	8007f2a <tcp_receive+0x22>
 8007f1c:	4ba6      	ldr	r3, [pc, #664]	; (80081b8 <tcp_receive+0x2b0>)
 8007f1e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8007f22:	49a6      	ldr	r1, [pc, #664]	; (80081bc <tcp_receive+0x2b4>)
 8007f24:	48a6      	ldr	r0, [pc, #664]	; (80081c0 <tcp_receive+0x2b8>)
 8007f26:	f005 f965 	bl	800d1f4 <iprintf>

  if (flags & TCP_ACK) {
 8007f2a:	4ba6      	ldr	r3, [pc, #664]	; (80081c4 <tcp_receive+0x2bc>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	f003 0310 	and.w	r3, r3, #16
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 82bf 	beq.w	80084b6 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f3e:	461a      	mov	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f44:	4413      	add	r3, r2
 8007f46:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f4c:	4b9e      	ldr	r3, [pc, #632]	; (80081c8 <tcp_receive+0x2c0>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	1ad3      	subs	r3, r2, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	db1b      	blt.n	8007f8e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f5a:	4b9b      	ldr	r3, [pc, #620]	; (80081c8 <tcp_receive+0x2c0>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d106      	bne.n	8007f70 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f66:	4b99      	ldr	r3, [pc, #612]	; (80081cc <tcp_receive+0x2c4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	db0e      	blt.n	8007f8e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f74:	4b95      	ldr	r3, [pc, #596]	; (80081cc <tcp_receive+0x2c4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d141      	bne.n	8008000 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007f7c:	4b94      	ldr	r3, [pc, #592]	; (80081d0 <tcp_receive+0x2c8>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	89db      	ldrh	r3, [r3, #14]
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d938      	bls.n	8008000 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007f8e:	4b90      	ldr	r3, [pc, #576]	; (80081d0 <tcp_receive+0x2c8>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	89db      	ldrh	r3, [r3, #14]
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d205      	bcs.n	8007fb8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8007fb8:	4b83      	ldr	r3, [pc, #524]	; (80081c8 <tcp_receive+0x2c0>)
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8007fc0:	4b82      	ldr	r3, [pc, #520]	; (80081cc <tcp_receive+0x2c4>)
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10d      	bne.n	8007fee <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d111      	bne.n	8008000 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8007fec:	e008      	b.n	8008000 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008000:	4b72      	ldr	r3, [pc, #456]	; (80081cc <tcp_receive+0x2c4>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	dc53      	bgt.n	80080b6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800800e:	4b71      	ldr	r3, [pc, #452]	; (80081d4 <tcp_receive+0x2cc>)
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d146      	bne.n	80080a4 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8008020:	4413      	add	r3, r2
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	429a      	cmp	r2, r3
 8008026:	d13d      	bne.n	80080a4 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800802e:	2b00      	cmp	r3, #0
 8008030:	db38      	blt.n	80080a4 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008036:	4b65      	ldr	r3, [pc, #404]	; (80081cc <tcp_receive+0x2c4>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	429a      	cmp	r2, r3
 800803c:	d132      	bne.n	80080a4 <tcp_receive+0x19c>
              found_dupack = 1;
 800803e:	2301      	movs	r3, #1
 8008040:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008048:	2bff      	cmp	r3, #255	; 0xff
 800804a:	d007      	beq.n	800805c <tcp_receive+0x154>
                ++pcb->dupacks;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008052:	3301      	adds	r3, #1
 8008054:	b2da      	uxtb	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008062:	2b03      	cmp	r3, #3
 8008064:	d916      	bls.n	8008094 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008070:	4413      	add	r3, r2
 8008072:	b29a      	uxth	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800807a:	429a      	cmp	r2, r3
 800807c:	d912      	bls.n	80080a4 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008088:	4413      	add	r3, r2
 800808a:	b29a      	uxth	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008092:	e007      	b.n	80080a4 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800809a:	2b03      	cmp	r3, #3
 800809c:	d102      	bne.n	80080a4 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f002 fa2e 	bl	800a500 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f040 8169 	bne.w	800837e <tcp_receive+0x476>
        pcb->dupacks = 0;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080b4:	e163      	b.n	800837e <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80080b6:	4b45      	ldr	r3, [pc, #276]	; (80081cc <tcp_receive+0x2c4>)
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	3b01      	subs	r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f2c0 8107 	blt.w	80082d6 <tcp_receive+0x3ce>
 80080c8:	4b40      	ldr	r3, [pc, #256]	; (80081cc <tcp_receive+0x2c4>)
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f300 80ff 	bgt.w	80082d6 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	7e9b      	ldrb	r3, [r3, #26]
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00c      	beq.n	80080fe <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	7e9b      	ldrb	r3, [r3, #26]
 80080e8:	f023 0304 	bic.w	r3, r3, #4
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800810c:	10db      	asrs	r3, r3, #3
 800810e:	b21b      	sxth	r3, r3
 8008110:	b29a      	uxth	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008118:	b29b      	uxth	r3, r3
 800811a:	4413      	add	r3, r2
 800811c:	b29b      	uxth	r3, r3
 800811e:	b21a      	sxth	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800812e:	4b27      	ldr	r3, [pc, #156]	; (80081cc <tcp_receive+0x2c4>)
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	7d1b      	ldrb	r3, [r3, #20]
 800813a:	2b03      	cmp	r3, #3
 800813c:	f240 8094 	bls.w	8008268 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800814c:	429a      	cmp	r2, r3
 800814e:	d216      	bcs.n	800817e <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800815a:	4413      	add	r3, r2
 800815c:	b29a      	uxth	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008164:	429a      	cmp	r2, r3
 8008166:	d97f      	bls.n	8008268 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008172:	4413      	add	r3, r2
 8008174:	b29a      	uxth	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800817c:	e074      	b.n	8008268 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008188:	4619      	mov	r1, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800818e:	fb03 f301 	mul.w	r3, r3, r1
 8008192:	6879      	ldr	r1, [r7, #4]
 8008194:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8008198:	fb93 f3f1 	sdiv	r3, r3, r1
 800819c:	b29b      	uxth	r3, r3
 800819e:	4413      	add	r3, r2
 80081a0:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80081a8:	8a7a      	ldrh	r2, [r7, #18]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d95c      	bls.n	8008268 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	8a7a      	ldrh	r2, [r7, #18]
 80081b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80081b6:	e057      	b.n	8008268 <tcp_receive+0x360>
 80081b8:	0800ee58 	.word	0x0800ee58
 80081bc:	0800f07c 	.word	0x0800f07c
 80081c0:	0800ee9c 	.word	0x0800ee9c
 80081c4:	200000f0 	.word	0x200000f0
 80081c8:	200000e4 	.word	0x200000e4
 80081cc:	200000e8 	.word	0x200000e8
 80081d0:	200000d4 	.word	0x200000d4
 80081d4:	200000ee 	.word	0x200000ee
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80081ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fc ff06 	bl	8005004 <pbuf_clen>
 80081f8:	4603      	mov	r3, r0
 80081fa:	429c      	cmp	r4, r3
 80081fc:	d206      	bcs.n	800820c <tcp_receive+0x304>
 80081fe:	4b70      	ldr	r3, [pc, #448]	; (80083c0 <tcp_receive+0x4b8>)
 8008200:	f240 429e 	movw	r2, #1182	; 0x49e
 8008204:	496f      	ldr	r1, [pc, #444]	; (80083c4 <tcp_receive+0x4bc>)
 8008206:	4870      	ldr	r0, [pc, #448]	; (80083c8 <tcp_receive+0x4c0>)
 8008208:	f004 fff4 	bl	800d1f4 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	4618      	mov	r0, r3
 8008212:	f7fc fef7 	bl	8005004 <pbuf_clen>
 8008216:	4603      	mov	r3, r0
 8008218:	461a      	mov	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008220:	1a9b      	subs	r3, r3, r2
 8008222:	b29a      	uxth	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	891a      	ldrh	r2, [r3, #8]
 800822e:	4b67      	ldr	r3, [pc, #412]	; (80083cc <tcp_receive+0x4c4>)
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	4413      	add	r3, r2
 8008234:	b29a      	uxth	r2, r3
 8008236:	4b65      	ldr	r3, [pc, #404]	; (80083cc <tcp_receive+0x4c4>)
 8008238:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800823a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800823c:	f7fe f93a 	bl	80064b4 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00e      	beq.n	8008268 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <tcp_receive+0x360>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008256:	2b00      	cmp	r3, #0
 8008258:	d106      	bne.n	8008268 <tcp_receive+0x360>
 800825a:	4b59      	ldr	r3, [pc, #356]	; (80083c0 <tcp_receive+0x4b8>)
 800825c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8008260:	495b      	ldr	r1, [pc, #364]	; (80083d0 <tcp_receive+0x4c8>)
 8008262:	4859      	ldr	r0, [pc, #356]	; (80083c8 <tcp_receive+0x4c0>)
 8008264:	f004 ffc6 	bl	800d1f4 <iprintf>
      while (pcb->unacked != NULL &&
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800826c:	2b00      	cmp	r3, #0
 800826e:	d022      	beq.n	80082b6 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	4618      	mov	r0, r3
 800827a:	f7fb fce0 	bl	8003c3e <lwip_htonl>
 800827e:	4604      	mov	r4, r0
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008284:	891b      	ldrh	r3, [r3, #8]
 8008286:	461d      	mov	r5, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	899b      	ldrh	r3, [r3, #12]
 8008290:	b29b      	uxth	r3, r3
 8008292:	4618      	mov	r0, r3
 8008294:	f7fb fcc5 	bl	8003c22 <lwip_htons>
 8008298:	4603      	mov	r3, r0
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <tcp_receive+0x39e>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e000      	b.n	80082a8 <tcp_receive+0x3a0>
 80082a6:	2300      	movs	r3, #0
 80082a8:	442b      	add	r3, r5
 80082aa:	18e2      	adds	r2, r4, r3
 80082ac:	4b49      	ldr	r3, [pc, #292]	; (80083d4 <tcp_receive+0x4cc>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	dd90      	ble.n	80081d8 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d104      	bne.n	80082c8 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082c4:	861a      	strh	r2, [r3, #48]	; 0x30
 80082c6:	e002      	b.n	80082ce <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	76da      	strb	r2, [r3, #27]
 80082d4:	e002      	b.n	80082dc <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 fd30 	bl	8009d3c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80082dc:	e04f      	b.n	800837e <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d103      	bne.n	80082fe <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8008304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	4618      	mov	r0, r3
 800830a:	f7fc fe7b 	bl	8005004 <pbuf_clen>
 800830e:	4603      	mov	r3, r0
 8008310:	429c      	cmp	r4, r3
 8008312:	d206      	bcs.n	8008322 <tcp_receive+0x41a>
 8008314:	4b2a      	ldr	r3, [pc, #168]	; (80083c0 <tcp_receive+0x4b8>)
 8008316:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800831a:	492a      	ldr	r1, [pc, #168]	; (80083c4 <tcp_receive+0x4bc>)
 800831c:	482a      	ldr	r0, [pc, #168]	; (80083c8 <tcp_receive+0x4c0>)
 800831e:	f004 ff69 	bl	800d1f4 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	4618      	mov	r0, r3
 8008328:	f7fc fe6c 	bl	8005004 <pbuf_clen>
 800832c:	4603      	mov	r3, r0
 800832e:	461a      	mov	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008336:	1a9b      	subs	r3, r3, r2
 8008338:	b29a      	uxth	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8008340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008342:	891a      	ldrh	r2, [r3, #8]
 8008344:	4b21      	ldr	r3, [pc, #132]	; (80083cc <tcp_receive+0x4c4>)
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	4413      	add	r3, r2
 800834a:	b29a      	uxth	r2, r3
 800834c:	4b1f      	ldr	r3, [pc, #124]	; (80083cc <tcp_receive+0x4c4>)
 800834e:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8008350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008352:	f7fe f8af 	bl	80064b4 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00e      	beq.n	800837e <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <tcp_receive+0x476>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800836c:	2b00      	cmp	r3, #0
 800836e:	d106      	bne.n	800837e <tcp_receive+0x476>
 8008370:	4b13      	ldr	r3, [pc, #76]	; (80083c0 <tcp_receive+0x4b8>)
 8008372:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8008376:	4916      	ldr	r1, [pc, #88]	; (80083d0 <tcp_receive+0x4c8>)
 8008378:	4813      	ldr	r0, [pc, #76]	; (80083c8 <tcp_receive+0x4c0>)
 800837a:	f004 ff3b 	bl	800d1f4 <iprintf>
    while (pcb->unsent != NULL &&
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008382:	2b00      	cmp	r3, #0
 8008384:	d036      	beq.n	80083f4 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008386:	4b13      	ldr	r3, [pc, #76]	; (80083d4 <tcp_receive+0x4cc>)
 8008388:	681c      	ldr	r4, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	4618      	mov	r0, r3
 8008394:	f7fb fc53 	bl	8003c3e <lwip_htonl>
 8008398:	4605      	mov	r5, r0
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800839e:	891b      	ldrh	r3, [r3, #8]
 80083a0:	461e      	mov	r6, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	899b      	ldrh	r3, [r3, #12]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fb fc38 	bl	8003c22 <lwip_htons>
 80083b2:	4603      	mov	r3, r0
 80083b4:	f003 0303 	and.w	r3, r3, #3
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00d      	beq.n	80083d8 <tcp_receive+0x4d0>
 80083bc:	2301      	movs	r3, #1
 80083be:	e00c      	b.n	80083da <tcp_receive+0x4d2>
 80083c0:	0800ee58 	.word	0x0800ee58
 80083c4:	0800f098 	.word	0x0800f098
 80083c8:	0800ee9c 	.word	0x0800ee9c
 80083cc:	200000ec 	.word	0x200000ec
 80083d0:	0800f0c0 	.word	0x0800f0c0
 80083d4:	200000e8 	.word	0x200000e8
 80083d8:	2300      	movs	r3, #0
 80083da:	4433      	add	r3, r6
 80083dc:	442b      	add	r3, r5
 80083de:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	db07      	blt.n	80083f4 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80083e4:	4b8d      	ldr	r3, [pc, #564]	; (800861c <tcp_receive+0x714>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f77f af75 	ble.w	80082de <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80083fa:	4b89      	ldr	r3, [pc, #548]	; (8008620 <tcp_receive+0x718>)
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	4413      	add	r3, r2
 8008400:	b29a      	uxth	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840c:	2b00      	cmp	r3, #0
 800840e:	d052      	beq.n	80084b6 <tcp_receive+0x5ae>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008414:	4b81      	ldr	r3, [pc, #516]	; (800861c <tcp_receive+0x714>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	da4b      	bge.n	80084b6 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800841e:	4b81      	ldr	r3, [pc, #516]	; (8008624 <tcp_receive+0x71c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	b29a      	uxth	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008428:	b29b      	uxth	r3, r3
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	b29b      	uxth	r3, r3
 800842e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8008430:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008438:	10db      	asrs	r3, r3, #3
 800843a:	b21b      	sxth	r3, r3
 800843c:	b29b      	uxth	r3, r3
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	b29b      	uxth	r3, r3
 8008442:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800844a:	b29a      	uxth	r2, r3
 800844c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800844e:	4413      	add	r3, r2
 8008450:	b29b      	uxth	r3, r3
 8008452:	b21a      	sxth	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008458:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800845c:	2b00      	cmp	r3, #0
 800845e:	da03      	bge.n	8008468 <tcp_receive+0x560>
        m = -m;
 8008460:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008462:	425b      	negs	r3, r3
 8008464:	b29b      	uxth	r3, r3
 8008466:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8008468:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008470:	109b      	asrs	r3, r3, #2
 8008472:	b21b      	sxth	r3, r3
 8008474:	b29b      	uxth	r3, r3
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	b29b      	uxth	r3, r3
 800847a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008482:	b29a      	uxth	r2, r3
 8008484:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008486:	4413      	add	r3, r2
 8008488:	b29b      	uxth	r3, r3
 800848a:	b21a      	sxth	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008496:	10db      	asrs	r3, r3, #3
 8008498:	b21b      	sxth	r3, r3
 800849a:	b29a      	uxth	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	4413      	add	r3, r2
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	b21a      	sxth	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80084b6:	4b5c      	ldr	r3, [pc, #368]	; (8008628 <tcp_receive+0x720>)
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 84f1 	beq.w	8008ea2 <tcp_receive+0xf9a>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	7d1b      	ldrb	r3, [r3, #20]
 80084c4:	2b06      	cmp	r3, #6
 80084c6:	f200 84ec 	bhi.w	8008ea2 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084ce:	4b57      	ldr	r3, [pc, #348]	; (800862c <tcp_receive+0x724>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	3b01      	subs	r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f2c0 80b8 	blt.w	800864c <tcp_receive+0x744>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084e0:	4b51      	ldr	r3, [pc, #324]	; (8008628 <tcp_receive+0x720>)
 80084e2:	881b      	ldrh	r3, [r3, #0]
 80084e4:	4619      	mov	r1, r3
 80084e6:	4b51      	ldr	r3, [pc, #324]	; (800862c <tcp_receive+0x724>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	440b      	add	r3, r1
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	3301      	adds	r3, #1
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f300 80ab 	bgt.w	800864c <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80084f6:	4b4e      	ldr	r3, [pc, #312]	; (8008630 <tcp_receive+0x728>)
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008500:	4b4a      	ldr	r3, [pc, #296]	; (800862c <tcp_receive+0x724>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8008508:	4b49      	ldr	r3, [pc, #292]	; (8008630 <tcp_receive+0x728>)
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d106      	bne.n	800851e <tcp_receive+0x616>
 8008510:	4b48      	ldr	r3, [pc, #288]	; (8008634 <tcp_receive+0x72c>)
 8008512:	f240 523c 	movw	r2, #1340	; 0x53c
 8008516:	4948      	ldr	r1, [pc, #288]	; (8008638 <tcp_receive+0x730>)
 8008518:	4848      	ldr	r0, [pc, #288]	; (800863c <tcp_receive+0x734>)
 800851a:	f004 fe6b 	bl	800d1f4 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008524:	4293      	cmp	r3, r2
 8008526:	dd06      	ble.n	8008536 <tcp_receive+0x62e>
 8008528:	4b42      	ldr	r3, [pc, #264]	; (8008634 <tcp_receive+0x72c>)
 800852a:	f240 523d 	movw	r2, #1341	; 0x53d
 800852e:	4944      	ldr	r1, [pc, #272]	; (8008640 <tcp_receive+0x738>)
 8008530:	4842      	ldr	r0, [pc, #264]	; (800863c <tcp_receive+0x734>)
 8008532:	f004 fe5f 	bl	800d1f4 <iprintf>
      if (inseg.p->len < off) {
 8008536:	4b3e      	ldr	r3, [pc, #248]	; (8008630 <tcp_receive+0x728>)
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	895b      	ldrh	r3, [r3, #10]
 800853c:	461a      	mov	r2, r3
 800853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008540:	4293      	cmp	r3, r2
 8008542:	dd3e      	ble.n	80085c2 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008544:	4b3a      	ldr	r3, [pc, #232]	; (8008630 <tcp_receive+0x728>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	891b      	ldrh	r3, [r3, #8]
 800854a:	461a      	mov	r2, r3
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	4293      	cmp	r3, r2
 8008550:	dd06      	ble.n	8008560 <tcp_receive+0x658>
 8008552:	4b38      	ldr	r3, [pc, #224]	; (8008634 <tcp_receive+0x72c>)
 8008554:	f240 523f 	movw	r2, #1343	; 0x53f
 8008558:	493a      	ldr	r1, [pc, #232]	; (8008644 <tcp_receive+0x73c>)
 800855a:	4838      	ldr	r0, [pc, #224]	; (800863c <tcp_receive+0x734>)
 800855c:	f004 fe4a 	bl	800d1f4 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008560:	4b33      	ldr	r3, [pc, #204]	; (8008630 <tcp_receive+0x728>)
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	891a      	ldrh	r2, [r3, #8]
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	b29b      	uxth	r3, r3
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800856e:	e00e      	b.n	800858e <tcp_receive+0x686>
          off -= p->len;
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	895b      	ldrh	r3, [r3, #10]
 8008574:	461a      	mov	r2, r3
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	1a9b      	subs	r3, r3, r2
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	8a3a      	ldrh	r2, [r7, #16]
 8008580:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	2200      	movs	r2, #0
 8008586:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	895b      	ldrh	r3, [r3, #10]
 8008592:	461a      	mov	r2, r3
 8008594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008596:	4293      	cmp	r3, r2
 8008598:	dcea      	bgt.n	8008570 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	b29b      	uxth	r3, r3
 800859e:	425b      	negs	r3, r3
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	b21b      	sxth	r3, r3
 80085a4:	4619      	mov	r1, r3
 80085a6:	69b8      	ldr	r0, [r7, #24]
 80085a8:	f7fc fc74 	bl	8004e94 <pbuf_header>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d01c      	beq.n	80085ec <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80085b2:	4b20      	ldr	r3, [pc, #128]	; (8008634 <tcp_receive+0x72c>)
 80085b4:	f240 524c 	movw	r2, #1356	; 0x54c
 80085b8:	4923      	ldr	r1, [pc, #140]	; (8008648 <tcp_receive+0x740>)
 80085ba:	4820      	ldr	r0, [pc, #128]	; (800863c <tcp_receive+0x734>)
 80085bc:	f004 fe1a 	bl	800d1f4 <iprintf>
 80085c0:	e014      	b.n	80085ec <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80085c2:	4b1b      	ldr	r3, [pc, #108]	; (8008630 <tcp_receive+0x728>)
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c8:	b292      	uxth	r2, r2
 80085ca:	4252      	negs	r2, r2
 80085cc:	b292      	uxth	r2, r2
 80085ce:	b212      	sxth	r2, r2
 80085d0:	4611      	mov	r1, r2
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fc fc5e 	bl	8004e94 <pbuf_header>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d006      	beq.n	80085ec <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80085de:	4b15      	ldr	r3, [pc, #84]	; (8008634 <tcp_receive+0x72c>)
 80085e0:	f240 5251 	movw	r2, #1361	; 0x551
 80085e4:	4918      	ldr	r1, [pc, #96]	; (8008648 <tcp_receive+0x740>)
 80085e6:	4815      	ldr	r0, [pc, #84]	; (800863c <tcp_receive+0x734>)
 80085e8:	f004 fe04 	bl	800d1f4 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80085ec:	4b10      	ldr	r3, [pc, #64]	; (8008630 <tcp_receive+0x728>)
 80085ee:	891a      	ldrh	r2, [r3, #8]
 80085f0:	4b0e      	ldr	r3, [pc, #56]	; (800862c <tcp_receive+0x724>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	b299      	uxth	r1, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	1acb      	subs	r3, r1, r3
 80085fe:	b29b      	uxth	r3, r3
 8008600:	4413      	add	r3, r2
 8008602:	b29a      	uxth	r2, r3
 8008604:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <tcp_receive+0x728>)
 8008606:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	4a07      	ldr	r2, [pc, #28]	; (800862c <tcp_receive+0x724>)
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <tcp_receive+0x728>)
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	4a05      	ldr	r2, [pc, #20]	; (800862c <tcp_receive+0x724>)
 8008616:	6812      	ldr	r2, [r2, #0]
 8008618:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800861a:	e025      	b.n	8008668 <tcp_receive+0x760>
 800861c:	200000e8 	.word	0x200000e8
 8008620:	200000ec 	.word	0x200000ec
 8008624:	2000c6cc 	.word	0x2000c6cc
 8008628:	200000ee 	.word	0x200000ee
 800862c:	200000e4 	.word	0x200000e4
 8008630:	200000c4 	.word	0x200000c4
 8008634:	0800ee58 	.word	0x0800ee58
 8008638:	0800f0e0 	.word	0x0800f0e0
 800863c:	0800ee9c 	.word	0x0800ee9c
 8008640:	0800f0f0 	.word	0x0800f0f0
 8008644:	0800f100 	.word	0x0800f100
 8008648:	0800f110 	.word	0x0800f110
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800864c:	4b87      	ldr	r3, [pc, #540]	; (800886c <tcp_receive+0x964>)
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	da06      	bge.n	8008668 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7e9b      	ldrb	r3, [r3, #26]
 800865e:	f043 0302 	orr.w	r3, r3, #2
 8008662:	b2da      	uxtb	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008668:	4b80      	ldr	r3, [pc, #512]	; (800886c <tcp_receive+0x964>)
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	f2c0 8410 	blt.w	8008e98 <tcp_receive+0xf90>
 8008678:	4b7c      	ldr	r3, [pc, #496]	; (800886c <tcp_receive+0x964>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	6879      	ldr	r1, [r7, #4]
 8008682:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008684:	440b      	add	r3, r1
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	3301      	adds	r3, #1
 800868a:	2b00      	cmp	r3, #0
 800868c:	f300 8404 	bgt.w	8008e98 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008694:	4b75      	ldr	r3, [pc, #468]	; (800886c <tcp_receive+0x964>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	f040 8287 	bne.w	8008bac <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800869e:	4b74      	ldr	r3, [pc, #464]	; (8008870 <tcp_receive+0x968>)
 80086a0:	891c      	ldrh	r4, [r3, #8]
 80086a2:	4b73      	ldr	r3, [pc, #460]	; (8008870 <tcp_receive+0x968>)
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	899b      	ldrh	r3, [r3, #12]
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fb fab9 	bl	8003c22 <lwip_htons>
 80086b0:	4603      	mov	r3, r0
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <tcp_receive+0x7b6>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e000      	b.n	80086c0 <tcp_receive+0x7b8>
 80086be:	2300      	movs	r3, #0
 80086c0:	4423      	add	r3, r4
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	4b6b      	ldr	r3, [pc, #428]	; (8008874 <tcp_receive+0x96c>)
 80086c6:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80086cc:	4b69      	ldr	r3, [pc, #420]	; (8008874 <tcp_receive+0x96c>)
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d26e      	bcs.n	80087b2 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80086d4:	4b66      	ldr	r3, [pc, #408]	; (8008870 <tcp_receive+0x968>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	899b      	ldrh	r3, [r3, #12]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fb faa0 	bl	8003c22 <lwip_htons>
 80086e2:	4603      	mov	r3, r0
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d01b      	beq.n	8008724 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80086ec:	4b60      	ldr	r3, [pc, #384]	; (8008870 <tcp_receive+0x968>)
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	899b      	ldrh	r3, [r3, #12]
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80086f8:	b29c      	uxth	r4, r3
 80086fa:	4b5d      	ldr	r3, [pc, #372]	; (8008870 <tcp_receive+0x968>)
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	899b      	ldrh	r3, [r3, #12]
 8008700:	b29b      	uxth	r3, r3
 8008702:	4618      	mov	r0, r3
 8008704:	f7fb fa8d 	bl	8003c22 <lwip_htons>
 8008708:	4603      	mov	r3, r0
 800870a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800870e:	b29b      	uxth	r3, r3
 8008710:	4618      	mov	r0, r3
 8008712:	f7fb fa86 	bl	8003c22 <lwip_htons>
 8008716:	4603      	mov	r3, r0
 8008718:	461a      	mov	r2, r3
 800871a:	4b55      	ldr	r3, [pc, #340]	; (8008870 <tcp_receive+0x968>)
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	4322      	orrs	r2, r4
 8008720:	b292      	uxth	r2, r2
 8008722:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008728:	4b51      	ldr	r3, [pc, #324]	; (8008870 <tcp_receive+0x968>)
 800872a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800872c:	4b50      	ldr	r3, [pc, #320]	; (8008870 <tcp_receive+0x968>)
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	899b      	ldrh	r3, [r3, #12]
 8008732:	b29b      	uxth	r3, r3
 8008734:	4618      	mov	r0, r3
 8008736:	f7fb fa74 	bl	8003c22 <lwip_htons>
 800873a:	4603      	mov	r3, r0
 800873c:	f003 0302 	and.w	r3, r3, #2
 8008740:	2b00      	cmp	r3, #0
 8008742:	d005      	beq.n	8008750 <tcp_receive+0x848>
            inseg.len -= 1;
 8008744:	4b4a      	ldr	r3, [pc, #296]	; (8008870 <tcp_receive+0x968>)
 8008746:	891b      	ldrh	r3, [r3, #8]
 8008748:	3b01      	subs	r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	4b48      	ldr	r3, [pc, #288]	; (8008870 <tcp_receive+0x968>)
 800874e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008750:	4b47      	ldr	r3, [pc, #284]	; (8008870 <tcp_receive+0x968>)
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	4b46      	ldr	r3, [pc, #280]	; (8008870 <tcp_receive+0x968>)
 8008756:	891b      	ldrh	r3, [r3, #8]
 8008758:	4619      	mov	r1, r3
 800875a:	4610      	mov	r0, r2
 800875c:	f7fc fa4a 	bl	8004bf4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008760:	4b43      	ldr	r3, [pc, #268]	; (8008870 <tcp_receive+0x968>)
 8008762:	891c      	ldrh	r4, [r3, #8]
 8008764:	4b42      	ldr	r3, [pc, #264]	; (8008870 <tcp_receive+0x968>)
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	899b      	ldrh	r3, [r3, #12]
 800876a:	b29b      	uxth	r3, r3
 800876c:	4618      	mov	r0, r3
 800876e:	f7fb fa58 	bl	8003c22 <lwip_htons>
 8008772:	4603      	mov	r3, r0
 8008774:	f003 0303 	and.w	r3, r3, #3
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <tcp_receive+0x878>
 800877c:	2301      	movs	r3, #1
 800877e:	e000      	b.n	8008782 <tcp_receive+0x87a>
 8008780:	2300      	movs	r3, #0
 8008782:	4423      	add	r3, r4
 8008784:	b29a      	uxth	r2, r3
 8008786:	4b3b      	ldr	r3, [pc, #236]	; (8008874 <tcp_receive+0x96c>)
 8008788:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800878a:	4b3a      	ldr	r3, [pc, #232]	; (8008874 <tcp_receive+0x96c>)
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	4b36      	ldr	r3, [pc, #216]	; (800886c <tcp_receive+0x964>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	441a      	add	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800879e:	440b      	add	r3, r1
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d006      	beq.n	80087b2 <tcp_receive+0x8aa>
 80087a4:	4b34      	ldr	r3, [pc, #208]	; (8008878 <tcp_receive+0x970>)
 80087a6:	f240 527f 	movw	r2, #1407	; 0x57f
 80087aa:	4934      	ldr	r1, [pc, #208]	; (800887c <tcp_receive+0x974>)
 80087ac:	4834      	ldr	r0, [pc, #208]	; (8008880 <tcp_receive+0x978>)
 80087ae:	f004 fd21 	bl	800d1f4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80e1 	beq.w	800897e <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80087bc:	4b2c      	ldr	r3, [pc, #176]	; (8008870 <tcp_receive+0x968>)
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	899b      	ldrh	r3, [r3, #12]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fb fa2c 	bl	8003c22 <lwip_htons>
 80087ca:	4603      	mov	r3, r0
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d010      	beq.n	80087f6 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80087d4:	e00a      	b.n	80087ec <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087da:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80087e6:	68b8      	ldr	r0, [r7, #8]
 80087e8:	f7fd fe64 	bl	80064b4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1f0      	bne.n	80087d6 <tcp_receive+0x8ce>
 80087f4:	e0c3      	b.n	800897e <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fa:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80087fc:	e04f      	b.n	800889e <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80087fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	899b      	ldrh	r3, [r3, #12]
 8008804:	b29b      	uxth	r3, r3
 8008806:	4618      	mov	r0, r3
 8008808:	f7fb fa0b 	bl	8003c22 <lwip_htons>
 800880c:	4603      	mov	r3, r0
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b00      	cmp	r3, #0
 8008814:	d03b      	beq.n	800888e <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008816:	4b16      	ldr	r3, [pc, #88]	; (8008870 <tcp_receive+0x968>)
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	899b      	ldrh	r3, [r3, #12]
 800881c:	b29b      	uxth	r3, r3
 800881e:	4618      	mov	r0, r3
 8008820:	f7fb f9ff 	bl	8003c22 <lwip_htons>
 8008824:	4603      	mov	r3, r0
 8008826:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800882a:	2b00      	cmp	r3, #0
 800882c:	d12f      	bne.n	800888e <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800882e:	4b10      	ldr	r3, [pc, #64]	; (8008870 <tcp_receive+0x968>)
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	899b      	ldrh	r3, [r3, #12]
 8008834:	b29c      	uxth	r4, r3
 8008836:	2001      	movs	r0, #1
 8008838:	f7fb f9f3 	bl	8003c22 <lwip_htons>
 800883c:	4603      	mov	r3, r0
 800883e:	461a      	mov	r2, r3
 8008840:	4b0b      	ldr	r3, [pc, #44]	; (8008870 <tcp_receive+0x968>)
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	4322      	orrs	r2, r4
 8008846:	b292      	uxth	r2, r2
 8008848:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800884a:	4b09      	ldr	r3, [pc, #36]	; (8008870 <tcp_receive+0x968>)
 800884c:	891c      	ldrh	r4, [r3, #8]
 800884e:	4b08      	ldr	r3, [pc, #32]	; (8008870 <tcp_receive+0x968>)
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	899b      	ldrh	r3, [r3, #12]
 8008854:	b29b      	uxth	r3, r3
 8008856:	4618      	mov	r0, r3
 8008858:	f7fb f9e3 	bl	8003c22 <lwip_htons>
 800885c:	4603      	mov	r3, r0
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00e      	beq.n	8008884 <tcp_receive+0x97c>
 8008866:	2301      	movs	r3, #1
 8008868:	e00d      	b.n	8008886 <tcp_receive+0x97e>
 800886a:	bf00      	nop
 800886c:	200000e4 	.word	0x200000e4
 8008870:	200000c4 	.word	0x200000c4
 8008874:	200000ee 	.word	0x200000ee
 8008878:	0800ee58 	.word	0x0800ee58
 800887c:	0800f124 	.word	0x0800f124
 8008880:	0800ee9c 	.word	0x0800ee9c
 8008884:	2300      	movs	r3, #0
 8008886:	4423      	add	r3, r4
 8008888:	b29a      	uxth	r2, r3
 800888a:	4b95      	ldr	r3, [pc, #596]	; (8008ae0 <tcp_receive+0xbd8>)
 800888c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8008898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800889a:	f7fd fe0b 	bl	80064b4 <tcp_seg_free>
            while (next &&
 800889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d00e      	beq.n	80088c2 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80088a4:	4b8e      	ldr	r3, [pc, #568]	; (8008ae0 <tcp_receive+0xbd8>)
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	461a      	mov	r2, r3
 80088aa:	4b8e      	ldr	r3, [pc, #568]	; (8008ae4 <tcp_receive+0xbdc>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	441a      	add	r2, r3
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088b8:	8909      	ldrh	r1, [r1, #8]
 80088ba:	440b      	add	r3, r1
 80088bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80088be:	2b00      	cmp	r3, #0
 80088c0:	da9d      	bge.n	80087fe <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80088c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d057      	beq.n	8008978 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 80088c8:	4b85      	ldr	r3, [pc, #532]	; (8008ae0 <tcp_receive+0xbd8>)
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	4b85      	ldr	r3, [pc, #532]	; (8008ae4 <tcp_receive+0xbdc>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	441a      	add	r2, r3
 80088d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	1ad3      	subs	r3, r2, r3
            if (next &&
 80088dc:	2b00      	cmp	r3, #0
 80088de:	dd4b      	ble.n	8008978 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80088e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	4b7e      	ldr	r3, [pc, #504]	; (8008ae4 <tcp_receive+0xbdc>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	4b7d      	ldr	r3, [pc, #500]	; (8008ae8 <tcp_receive+0xbe0>)
 80088f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80088f6:	4b7c      	ldr	r3, [pc, #496]	; (8008ae8 <tcp_receive+0xbe0>)
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	899b      	ldrh	r3, [r3, #12]
 80088fc:	b29b      	uxth	r3, r3
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fb f98f 	bl	8003c22 <lwip_htons>
 8008904:	4603      	mov	r3, r0
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d005      	beq.n	800891a <tcp_receive+0xa12>
                inseg.len -= 1;
 800890e:	4b76      	ldr	r3, [pc, #472]	; (8008ae8 <tcp_receive+0xbe0>)
 8008910:	891b      	ldrh	r3, [r3, #8]
 8008912:	3b01      	subs	r3, #1
 8008914:	b29a      	uxth	r2, r3
 8008916:	4b74      	ldr	r3, [pc, #464]	; (8008ae8 <tcp_receive+0xbe0>)
 8008918:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800891a:	4b73      	ldr	r3, [pc, #460]	; (8008ae8 <tcp_receive+0xbe0>)
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	4b72      	ldr	r3, [pc, #456]	; (8008ae8 <tcp_receive+0xbe0>)
 8008920:	891b      	ldrh	r3, [r3, #8]
 8008922:	4619      	mov	r1, r3
 8008924:	4610      	mov	r0, r2
 8008926:	f7fc f965 	bl	8004bf4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800892a:	4b6f      	ldr	r3, [pc, #444]	; (8008ae8 <tcp_receive+0xbe0>)
 800892c:	891c      	ldrh	r4, [r3, #8]
 800892e:	4b6e      	ldr	r3, [pc, #440]	; (8008ae8 <tcp_receive+0xbe0>)
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	899b      	ldrh	r3, [r3, #12]
 8008934:	b29b      	uxth	r3, r3
 8008936:	4618      	mov	r0, r3
 8008938:	f7fb f973 	bl	8003c22 <lwip_htons>
 800893c:	4603      	mov	r3, r0
 800893e:	f003 0303 	and.w	r3, r3, #3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <tcp_receive+0xa42>
 8008946:	2301      	movs	r3, #1
 8008948:	e000      	b.n	800894c <tcp_receive+0xa44>
 800894a:	2300      	movs	r3, #0
 800894c:	4423      	add	r3, r4
 800894e:	b29a      	uxth	r2, r3
 8008950:	4b63      	ldr	r3, [pc, #396]	; (8008ae0 <tcp_receive+0xbd8>)
 8008952:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008954:	4b62      	ldr	r3, [pc, #392]	; (8008ae0 <tcp_receive+0xbd8>)
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	461a      	mov	r2, r3
 800895a:	4b62      	ldr	r3, [pc, #392]	; (8008ae4 <tcp_receive+0xbdc>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	441a      	add	r2, r3
 8008960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	429a      	cmp	r2, r3
 8008968:	d006      	beq.n	8008978 <tcp_receive+0xa70>
 800896a:	4b60      	ldr	r3, [pc, #384]	; (8008aec <tcp_receive+0xbe4>)
 800896c:	f240 52af 	movw	r2, #1455	; 0x5af
 8008970:	495f      	ldr	r1, [pc, #380]	; (8008af0 <tcp_receive+0xbe8>)
 8008972:	4860      	ldr	r0, [pc, #384]	; (8008af4 <tcp_receive+0xbec>)
 8008974:	f004 fc3e 	bl	800d1f4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800897c:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800897e:	4b58      	ldr	r3, [pc, #352]	; (8008ae0 <tcp_receive+0xbd8>)
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	4b57      	ldr	r3, [pc, #348]	; (8008ae4 <tcp_receive+0xbdc>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	441a      	add	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008992:	4b53      	ldr	r3, [pc, #332]	; (8008ae0 <tcp_receive+0xbd8>)
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	429a      	cmp	r2, r3
 8008998:	d206      	bcs.n	80089a8 <tcp_receive+0xaa0>
 800899a:	4b54      	ldr	r3, [pc, #336]	; (8008aec <tcp_receive+0xbe4>)
 800899c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80089a0:	4955      	ldr	r1, [pc, #340]	; (8008af8 <tcp_receive+0xbf0>)
 80089a2:	4854      	ldr	r0, [pc, #336]	; (8008af4 <tcp_receive+0xbec>)
 80089a4:	f004 fc26 	bl	800d1f4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80089ac:	4b4c      	ldr	r3, [pc, #304]	; (8008ae0 <tcp_receive+0xbd8>)
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7fd f8eb 	bl	8005b94 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80089be:	4b4a      	ldr	r3, [pc, #296]	; (8008ae8 <tcp_receive+0xbe0>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	891b      	ldrh	r3, [r3, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d006      	beq.n	80089d6 <tcp_receive+0xace>
          recv_data = inseg.p;
 80089c8:	4b47      	ldr	r3, [pc, #284]	; (8008ae8 <tcp_receive+0xbe0>)
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	4a4b      	ldr	r2, [pc, #300]	; (8008afc <tcp_receive+0xbf4>)
 80089ce:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80089d0:	4b45      	ldr	r3, [pc, #276]	; (8008ae8 <tcp_receive+0xbe0>)
 80089d2:	2200      	movs	r2, #0
 80089d4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80089d6:	4b44      	ldr	r3, [pc, #272]	; (8008ae8 <tcp_receive+0xbe0>)
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	899b      	ldrh	r3, [r3, #12]
 80089dc:	b29b      	uxth	r3, r3
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fb f91f 	bl	8003c22 <lwip_htons>
 80089e4:	4603      	mov	r3, r0
 80089e6:	f003 0301 	and.w	r3, r3, #1
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f000 80b4 	beq.w	8008b58 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80089f0:	4b43      	ldr	r3, [pc, #268]	; (8008b00 <tcp_receive+0xbf8>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	f043 0320 	orr.w	r3, r3, #32
 80089f8:	b2da      	uxtb	r2, r3
 80089fa:	4b41      	ldr	r3, [pc, #260]	; (8008b00 <tcp_receive+0xbf8>)
 80089fc:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80089fe:	e0ab      	b.n	8008b58 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a04:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	4a35      	ldr	r2, [pc, #212]	; (8008ae4 <tcp_receive+0xbdc>)
 8008a10:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	891b      	ldrh	r3, [r3, #8]
 8008a16:	461c      	mov	r4, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	899b      	ldrh	r3, [r3, #12]
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fb f8fe 	bl	8003c22 <lwip_htons>
 8008a26:	4603      	mov	r3, r0
 8008a28:	f003 0303 	and.w	r3, r3, #3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d001      	beq.n	8008a34 <tcp_receive+0xb2c>
 8008a30:	2301      	movs	r3, #1
 8008a32:	e000      	b.n	8008a36 <tcp_receive+0xb2e>
 8008a34:	2300      	movs	r3, #0
 8008a36:	191a      	adds	r2, r3, r4
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	441a      	add	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a46:	461c      	mov	r4, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	891b      	ldrh	r3, [r3, #8]
 8008a4c:	461d      	mov	r5, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	899b      	ldrh	r3, [r3, #12]
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fb f8e3 	bl	8003c22 <lwip_htons>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	f003 0303 	and.w	r3, r3, #3
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <tcp_receive+0xb62>
 8008a66:	2301      	movs	r3, #1
 8008a68:	e000      	b.n	8008a6c <tcp_receive+0xb64>
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	442b      	add	r3, r5
 8008a6e:	429c      	cmp	r4, r3
 8008a70:	d206      	bcs.n	8008a80 <tcp_receive+0xb78>
 8008a72:	4b1e      	ldr	r3, [pc, #120]	; (8008aec <tcp_receive+0xbe4>)
 8008a74:	f240 52de 	movw	r2, #1502	; 0x5de
 8008a78:	4922      	ldr	r1, [pc, #136]	; (8008b04 <tcp_receive+0xbfc>)
 8008a7a:	481e      	ldr	r0, [pc, #120]	; (8008af4 <tcp_receive+0xbec>)
 8008a7c:	f004 fbba 	bl	800d1f4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	891b      	ldrh	r3, [r3, #8]
 8008a84:	461c      	mov	r4, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	68db      	ldr	r3, [r3, #12]
 8008a8a:	899b      	ldrh	r3, [r3, #12]
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fb f8c7 	bl	8003c22 <lwip_htons>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f003 0303 	and.w	r3, r3, #3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <tcp_receive+0xb9a>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e000      	b.n	8008aa4 <tcp_receive+0xb9c>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	1919      	adds	r1, r3, r4
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008aaa:	b28b      	uxth	r3, r1
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7fd f86d 	bl	8005b94 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	891b      	ldrh	r3, [r3, #8]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d028      	beq.n	8008b16 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008ac4:	4b0d      	ldr	r3, [pc, #52]	; (8008afc <tcp_receive+0xbf4>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d01d      	beq.n	8008b08 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8008acc:	4b0b      	ldr	r3, [pc, #44]	; (8008afc <tcp_receive+0xbf4>)
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4610      	mov	r0, r2
 8008ad8:	f7fc face 	bl	8005078 <pbuf_cat>
 8008adc:	e018      	b.n	8008b10 <tcp_receive+0xc08>
 8008ade:	bf00      	nop
 8008ae0:	200000ee 	.word	0x200000ee
 8008ae4:	200000e4 	.word	0x200000e4
 8008ae8:	200000c4 	.word	0x200000c4
 8008aec:	0800ee58 	.word	0x0800ee58
 8008af0:	0800f15c 	.word	0x0800f15c
 8008af4:	0800ee9c 	.word	0x0800ee9c
 8008af8:	0800f198 	.word	0x0800f198
 8008afc:	200000f4 	.word	0x200000f4
 8008b00:	200000f1 	.word	0x200000f1
 8008b04:	0800f1b8 	.word	0x0800f1b8
            } else {
              recv_data = cseg->p;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	4a71      	ldr	r2, [pc, #452]	; (8008cd4 <tcp_receive+0xdcc>)
 8008b0e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	899b      	ldrh	r3, [r3, #12]
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fb f87f 	bl	8003c22 <lwip_htons>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00d      	beq.n	8008b4a <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008b2e:	4b6a      	ldr	r3, [pc, #424]	; (8008cd8 <tcp_receive+0xdd0>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	f043 0320 	orr.w	r3, r3, #32
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	4b67      	ldr	r3, [pc, #412]	; (8008cd8 <tcp_receive+0xdd0>)
 8008b3a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	7d1b      	ldrb	r3, [r3, #20]
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d102      	bne.n	8008b4a <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2207      	movs	r2, #7
 8008b48:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7fd fcae 	bl	80064b4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d008      	beq.n	8008b72 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	f43f af47 	beq.w	8008a00 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	7e9b      	ldrb	r3, [r3, #26]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00e      	beq.n	8008b9c <tcp_receive+0xc94>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	7e9b      	ldrb	r3, [r3, #26]
 8008b82:	f023 0301 	bic.w	r3, r3, #1
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	769a      	strb	r2, [r3, #26]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	7e9b      	ldrb	r3, [r3, #26]
 8008b90:	f043 0302 	orr.w	r3, r3, #2
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008b9a:	e181      	b.n	8008ea0 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	7e9b      	ldrb	r3, [r3, #26]
 8008ba0:	f043 0301 	orr.w	r3, r3, #1
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008baa:	e179      	b.n	8008ea0 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 f8c5 	bl	8009d3c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008bba:	4848      	ldr	r0, [pc, #288]	; (8008cdc <tcp_receive+0xdd4>)
 8008bbc:	f7fd fca1 	bl	8006502 <tcp_seg_copy>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8008bc6:	e16b      	b.n	8008ea0 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd2:	e150      	b.n	8008e76 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8008bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	4b41      	ldr	r3, [pc, #260]	; (8008ce0 <tcp_receive+0xdd8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d11d      	bne.n	8008c1e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8008be2:	4b3e      	ldr	r3, [pc, #248]	; (8008cdc <tcp_receive+0xdd4>)
 8008be4:	891a      	ldrh	r2, [r3, #8]
 8008be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be8:	891b      	ldrh	r3, [r3, #8]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	f240 8148 	bls.w	8008e80 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8008bf0:	483a      	ldr	r0, [pc, #232]	; (8008cdc <tcp_receive+0xdd4>)
 8008bf2:	f7fd fc86 	bl	8006502 <tcp_seg_copy>
 8008bf6:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 8142 	beq.w	8008e84 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <tcp_receive+0xd06>
                    prev->next = cseg;
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	e002      	b.n	8008c14 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8008c14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f7ff f900 	bl	8007e1c <tcp_oos_insert_segment>
                }
                break;
 8008c1c:	e132      	b.n	8008e84 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d117      	bne.n	8008c54 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008c24:	4b2e      	ldr	r3, [pc, #184]	; (8008ce0 <tcp_receive+0xdd8>)
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	da57      	bge.n	8008ce4 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8008c34:	4829      	ldr	r0, [pc, #164]	; (8008cdc <tcp_receive+0xdd4>)
 8008c36:	f7fd fc64 	bl	8006502 <tcp_seg_copy>
 8008c3a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 8122 	beq.w	8008e88 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 8008c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f7ff f8e5 	bl	8007e1c <tcp_oos_insert_segment>
                  }
                  break;
 8008c52:	e119      	b.n	8008e88 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8008c54:	4b22      	ldr	r3, [pc, #136]	; (8008ce0 <tcp_receive+0xdd8>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	1ad3      	subs	r3, r2, r3
 8008c60:	3b01      	subs	r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	db3e      	blt.n	8008ce4 <tcp_receive+0xddc>
 8008c66:	4b1e      	ldr	r3, [pc, #120]	; (8008ce0 <tcp_receive+0xdd8>)
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	3301      	adds	r3, #1
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	dc35      	bgt.n	8008ce4 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8008c78:	4818      	ldr	r0, [pc, #96]	; (8008cdc <tcp_receive+0xdd4>)
 8008c7a:	f7fd fc42 	bl	8006502 <tcp_seg_copy>
 8008c7e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	f000 8102 	beq.w	8008e8c <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c90:	8912      	ldrh	r2, [r2, #8]
 8008c92:	441a      	add	r2, r3
 8008c94:	4b12      	ldr	r3, [pc, #72]	; (8008ce0 <tcp_receive+0xdd8>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	dd12      	ble.n	8008cc4 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008c9e:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <tcp_receive+0xdd8>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	891b      	ldrh	r3, [r3, #8]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4610      	mov	r0, r2
 8008cc0:	f7fb ff98 	bl	8004bf4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8008cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f7ff f8a5 	bl	8007e1c <tcp_oos_insert_segment>
                  }
                  break;
 8008cd2:	e0db      	b.n	8008e8c <tcp_receive+0xf84>
 8008cd4:	200000f4 	.word	0x200000f4
 8008cd8:	200000f1 	.word	0x200000f1
 8008cdc:	200000c4 	.word	0x200000c4
 8008ce0:	200000e4 	.word	0x200000e4
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8008ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f040 80bf 	bne.w	8008e6c <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008cee:	4b7c      	ldr	r3, [pc, #496]	; (8008ee0 <tcp_receive+0xfd8>)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	685b      	ldr	r3, [r3, #4]
 8008cf8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f340 80b6 	ble.w	8008e6c <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	899b      	ldrh	r3, [r3, #12]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fa ff8a 	bl	8003c22 <lwip_htons>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f040 80bb 	bne.w	8008e90 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008d1a:	4872      	ldr	r0, [pc, #456]	; (8008ee4 <tcp_receive+0xfdc>)
 8008d1c:	f7fd fbf1 	bl	8006502 <tcp_seg_copy>
 8008d20:	4602      	mov	r2, r0
 8008d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d24:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8008d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 80b2 	beq.w	8008e94 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d38:	8912      	ldrh	r2, [r2, #8]
 8008d3a:	441a      	add	r2, r3
 8008d3c:	4b68      	ldr	r3, [pc, #416]	; (8008ee0 <tcp_receive+0xfd8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dd12      	ble.n	8008d6c <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008d46:	4b66      	ldr	r3, [pc, #408]	; (8008ee0 <tcp_receive+0xfd8>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	b29a      	uxth	r2, r3
 8008d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8008d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	891b      	ldrh	r3, [r3, #8]
 8008d64:	4619      	mov	r1, r3
 8008d66:	4610      	mov	r0, r2
 8008d68:	f7fb ff44 	bl	8004bf4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008d6c:	4b5e      	ldr	r3, [pc, #376]	; (8008ee8 <tcp_receive+0xfe0>)
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	461a      	mov	r2, r3
 8008d72:	4b5b      	ldr	r3, [pc, #364]	; (8008ee0 <tcp_receive+0xfd8>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	441a      	add	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008d80:	440b      	add	r3, r1
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f340 8085 	ble.w	8008e94 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	899b      	ldrh	r3, [r3, #12]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fa ff44 	bl	8003c22 <lwip_htons>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01e      	beq.n	8008de2 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	899b      	ldrh	r3, [r3, #12]
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008db2:	b29c      	uxth	r4, r3
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68db      	ldr	r3, [r3, #12]
 8008dba:	899b      	ldrh	r3, [r3, #12]
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7fa ff2f 	bl	8003c22 <lwip_htons>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fa ff28 	bl	8003c22 <lwip_htons>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	4322      	orrs	r2, r4
 8008dde:	b292      	uxth	r2, r2
 8008de0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dec:	4413      	add	r3, r2
 8008dee:	b299      	uxth	r1, r3
 8008df0:	4b3b      	ldr	r3, [pc, #236]	; (8008ee0 <tcp_receive+0xfd8>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	1a8a      	subs	r2, r1, r2
 8008dfc:	b292      	uxth	r2, r2
 8008dfe:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	891b      	ldrh	r3, [r3, #8]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4610      	mov	r0, r2
 8008e10:	f7fb fef0 	bl	8004bf4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	891c      	ldrh	r4, [r3, #8]
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	899b      	ldrh	r3, [r3, #12]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fa fefc 	bl	8003c22 <lwip_htons>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <tcp_receive+0xf30>
 8008e34:	2301      	movs	r3, #1
 8008e36:	e000      	b.n	8008e3a <tcp_receive+0xf32>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	4423      	add	r3, r4
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	4b2a      	ldr	r3, [pc, #168]	; (8008ee8 <tcp_receive+0xfe0>)
 8008e40:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008e42:	4b29      	ldr	r3, [pc, #164]	; (8008ee8 <tcp_receive+0xfe0>)
 8008e44:	881b      	ldrh	r3, [r3, #0]
 8008e46:	461a      	mov	r2, r3
 8008e48:	4b25      	ldr	r3, [pc, #148]	; (8008ee0 <tcp_receive+0xfd8>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	441a      	add	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008e56:	440b      	add	r3, r1
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d01b      	beq.n	8008e94 <tcp_receive+0xf8c>
 8008e5c:	4b23      	ldr	r3, [pc, #140]	; (8008eec <tcp_receive+0xfe4>)
 8008e5e:	f240 627b 	movw	r2, #1659	; 0x67b
 8008e62:	4923      	ldr	r1, [pc, #140]	; (8008ef0 <tcp_receive+0xfe8>)
 8008e64:	4823      	ldr	r0, [pc, #140]	; (8008ef4 <tcp_receive+0xfec>)
 8008e66:	f004 f9c5 	bl	800d1f4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8008e6a:	e013      	b.n	8008e94 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f47f aeab 	bne.w	8008bd4 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8008e7e:	e00f      	b.n	8008ea0 <tcp_receive+0xf98>
                break;
 8008e80:	bf00      	nop
 8008e82:	e00d      	b.n	8008ea0 <tcp_receive+0xf98>
                break;
 8008e84:	bf00      	nop
 8008e86:	e00b      	b.n	8008ea0 <tcp_receive+0xf98>
                  break;
 8008e88:	bf00      	nop
 8008e8a:	e009      	b.n	8008ea0 <tcp_receive+0xf98>
                  break;
 8008e8c:	bf00      	nop
 8008e8e:	e007      	b.n	8008ea0 <tcp_receive+0xf98>
                  break;
 8008e90:	bf00      	nop
 8008e92:	e005      	b.n	8008ea0 <tcp_receive+0xf98>
                break;
 8008e94:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8008e96:	e003      	b.n	8008ea0 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 ff4f 	bl	8009d3c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008e9e:	e01a      	b.n	8008ed6 <tcp_receive+0xfce>
 8008ea0:	e019      	b.n	8008ed6 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008ea2:	4b0f      	ldr	r3, [pc, #60]	; (8008ee0 <tcp_receive+0xfd8>)
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	db0a      	blt.n	8008ec6 <tcp_receive+0xfbe>
 8008eb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <tcp_receive+0xfd8>)
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008ebc:	440b      	add	r3, r1
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	dd07      	ble.n	8008ed6 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	7e9b      	ldrb	r3, [r3, #26]
 8008eca:	f043 0302 	orr.w	r3, r3, #2
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8008ed4:	e7ff      	b.n	8008ed6 <tcp_receive+0xfce>
 8008ed6:	bf00      	nop
 8008ed8:	3734      	adds	r7, #52	; 0x34
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	200000e4 	.word	0x200000e4
 8008ee4:	200000c4 	.word	0x200000c4
 8008ee8:	200000ee 	.word	0x200000ee
 8008eec:	0800ee58 	.word	0x0800ee58
 8008ef0:	0800f124 	.word	0x0800f124
 8008ef4:	0800ee9c 	.word	0x0800ee9c

08008ef8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008efe:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <tcp_getoptbyte+0x68>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d005      	beq.n	8008f12 <tcp_getoptbyte+0x1a>
 8008f06:	4b17      	ldr	r3, [pc, #92]	; (8008f64 <tcp_getoptbyte+0x6c>)
 8008f08:	881a      	ldrh	r2, [r3, #0]
 8008f0a:	4b17      	ldr	r3, [pc, #92]	; (8008f68 <tcp_getoptbyte+0x70>)
 8008f0c:	881b      	ldrh	r3, [r3, #0]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d20e      	bcs.n	8008f30 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008f12:	4b16      	ldr	r3, [pc, #88]	; (8008f6c <tcp_getoptbyte+0x74>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3314      	adds	r3, #20
 8008f18:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8008f1a:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <tcp_getoptbyte+0x6c>)
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	1c5a      	adds	r2, r3, #1
 8008f20:	b291      	uxth	r1, r2
 8008f22:	4a10      	ldr	r2, [pc, #64]	; (8008f64 <tcp_getoptbyte+0x6c>)
 8008f24:	8011      	strh	r1, [r2, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	e010      	b.n	8008f52 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008f30:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <tcp_getoptbyte+0x6c>)
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	1c5a      	adds	r2, r3, #1
 8008f36:	b291      	uxth	r1, r2
 8008f38:	4a0a      	ldr	r2, [pc, #40]	; (8008f64 <tcp_getoptbyte+0x6c>)
 8008f3a:	8011      	strh	r1, [r2, #0]
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <tcp_getoptbyte+0x70>)
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8008f48:	4b05      	ldr	r3, [pc, #20]	; (8008f60 <tcp_getoptbyte+0x68>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	4413      	add	r3, r2
 8008f50:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	370c      	adds	r7, #12
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	200000dc 	.word	0x200000dc
 8008f64:	200000e0 	.word	0x200000e0
 8008f68:	200000da 	.word	0x200000da
 8008f6c:	200000d4 	.word	0x200000d4

08008f70 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8008f78:	4b2d      	ldr	r3, [pc, #180]	; (8009030 <tcp_parseopt+0xc0>)
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d054      	beq.n	800902a <tcp_parseopt+0xba>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008f80:	4b2c      	ldr	r3, [pc, #176]	; (8009034 <tcp_parseopt+0xc4>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	801a      	strh	r2, [r3, #0]
 8008f86:	e044      	b.n	8009012 <tcp_parseopt+0xa2>
      u8_t opt = tcp_getoptbyte();
 8008f88:	f7ff ffb6 	bl	8008ef8 <tcp_getoptbyte>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8008f90:	7bfb      	ldrb	r3, [r7, #15]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d03d      	beq.n	8009012 <tcp_parseopt+0xa2>
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d002      	beq.n	8008fa0 <tcp_parseopt+0x30>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d040      	beq.n	8009020 <tcp_parseopt+0xb0>
 8008f9e:	e027      	b.n	8008ff0 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008fa0:	f7ff ffaa 	bl	8008ef8 <tcp_getoptbyte>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b04      	cmp	r3, #4
 8008fa8:	d13c      	bne.n	8009024 <tcp_parseopt+0xb4>
 8008faa:	4b22      	ldr	r3, [pc, #136]	; (8009034 <tcp_parseopt+0xc4>)
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	3302      	adds	r3, #2
 8008fb0:	4a1f      	ldr	r2, [pc, #124]	; (8009030 <tcp_parseopt+0xc0>)
 8008fb2:	8812      	ldrh	r2, [r2, #0]
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	dc35      	bgt.n	8009024 <tcp_parseopt+0xb4>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8008fb8:	f7ff ff9e 	bl	8008ef8 <tcp_getoptbyte>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	021b      	lsls	r3, r3, #8
 8008fc2:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8008fc4:	f7ff ff98 	bl	8008ef8 <tcp_getoptbyte>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	89bb      	ldrh	r3, [r7, #12]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008fd2:	89bb      	ldrh	r3, [r7, #12]
 8008fd4:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d804      	bhi.n	8008fe6 <tcp_parseopt+0x76>
 8008fdc:	89bb      	ldrh	r3, [r7, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <tcp_parseopt+0x76>
 8008fe2:	89ba      	ldrh	r2, [r7, #12]
 8008fe4:	e001      	b.n	8008fea <tcp_parseopt+0x7a>
 8008fe6:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8008fee:	e010      	b.n	8009012 <tcp_parseopt+0xa2>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008ff0:	f7ff ff82 	bl	8008ef8 <tcp_getoptbyte>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8008ff8:	7afb      	ldrb	r3, [r7, #11]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d914      	bls.n	8009028 <tcp_parseopt+0xb8>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008ffe:	7afb      	ldrb	r3, [r7, #11]
 8009000:	b29a      	uxth	r2, r3
 8009002:	4b0c      	ldr	r3, [pc, #48]	; (8009034 <tcp_parseopt+0xc4>)
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	4413      	add	r3, r2
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b02      	subs	r3, #2
 800900c:	b29a      	uxth	r2, r3
 800900e:	4b09      	ldr	r3, [pc, #36]	; (8009034 <tcp_parseopt+0xc4>)
 8009010:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009012:	4b08      	ldr	r3, [pc, #32]	; (8009034 <tcp_parseopt+0xc4>)
 8009014:	881a      	ldrh	r2, [r3, #0]
 8009016:	4b06      	ldr	r3, [pc, #24]	; (8009030 <tcp_parseopt+0xc0>)
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	429a      	cmp	r2, r3
 800901c:	d3b4      	bcc.n	8008f88 <tcp_parseopt+0x18>
 800901e:	e004      	b.n	800902a <tcp_parseopt+0xba>
        return;
 8009020:	bf00      	nop
 8009022:	e002      	b.n	800902a <tcp_parseopt+0xba>
          return;
 8009024:	bf00      	nop
 8009026:	e000      	b.n	800902a <tcp_parseopt+0xba>
          return;
 8009028:	bf00      	nop
      }
    }
  }
}
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	200000d8 	.word	0x200000d8
 8009034:	200000e0 	.word	0x200000e0

08009038 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009038:	b480      	push	{r7}
 800903a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800903c:	4b05      	ldr	r3, [pc, #20]	; (8009054 <tcp_trigger_input_pcb_close+0x1c>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f043 0310 	orr.w	r3, r3, #16
 8009044:	b2da      	uxtb	r2, r3
 8009046:	4b03      	ldr	r3, [pc, #12]	; (8009054 <tcp_trigger_input_pcb_close+0x1c>)
 8009048:	701a      	strb	r2, [r3, #0]
}
 800904a:	bf00      	nop
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	200000f1 	.word	0x200000f1

08009058 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b086      	sub	sp, #24
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	607b      	str	r3, [r7, #4]
 8009062:	460b      	mov	r3, r1
 8009064:	817b      	strh	r3, [r7, #10]
 8009066:	4613      	mov	r3, r2
 8009068:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800906a:	897a      	ldrh	r2, [r7, #10]
 800906c:	893b      	ldrh	r3, [r7, #8]
 800906e:	4413      	add	r3, r2
 8009070:	b29b      	uxth	r3, r3
 8009072:	3314      	adds	r3, #20
 8009074:	b29b      	uxth	r3, r3
 8009076:	2200      	movs	r2, #0
 8009078:	4619      	mov	r1, r3
 800907a:	2001      	movs	r0, #1
 800907c:	f7fb fbba 	bl	80047f4 <pbuf_alloc>
 8009080:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d057      	beq.n	8009138 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	895b      	ldrh	r3, [r3, #10]
 800908c:	461a      	mov	r2, r3
 800908e:	897b      	ldrh	r3, [r7, #10]
 8009090:	3314      	adds	r3, #20
 8009092:	429a      	cmp	r2, r3
 8009094:	da05      	bge.n	80090a2 <tcp_output_alloc_header+0x4a>
 8009096:	4b2b      	ldr	r3, [pc, #172]	; (8009144 <tcp_output_alloc_header+0xec>)
 8009098:	2273      	movs	r2, #115	; 0x73
 800909a:	492b      	ldr	r1, [pc, #172]	; (8009148 <tcp_output_alloc_header+0xf0>)
 800909c:	482b      	ldr	r0, [pc, #172]	; (800914c <tcp_output_alloc_header+0xf4>)
 800909e:	f004 f8a9 	bl	800d1f4 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	8adb      	ldrh	r3, [r3, #22]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fa fdb8 	bl	8003c22 <lwip_htons>
 80090b2:	4603      	mov	r3, r0
 80090b4:	461a      	mov	r2, r3
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	8b1b      	ldrh	r3, [r3, #24]
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fa fdaf 	bl	8003c22 <lwip_htons>
 80090c4:	4603      	mov	r3, r0
 80090c6:	461a      	mov	r2, r3
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fa fdb1 	bl	8003c3e <lwip_htonl>
 80090dc:	4602      	mov	r2, r0
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80090e2:	897b      	ldrh	r3, [r7, #10]
 80090e4:	089b      	lsrs	r3, r3, #2
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	3305      	adds	r3, #5
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	031b      	lsls	r3, r3, #12
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	f043 0310 	orr.w	r3, r3, #16
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fa fd93 	bl	8003c22 <lwip_htons>
 80090fc:	4603      	mov	r3, r0
 80090fe:	461a      	mov	r2, r3
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009108:	4618      	mov	r0, r3
 800910a:	f7fa fd8a 	bl	8003c22 <lwip_htons>
 800910e:	4603      	mov	r3, r0
 8009110:	461a      	mov	r2, r3
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	2200      	movs	r2, #0
 800911a:	741a      	strb	r2, [r3, #16]
 800911c:	2200      	movs	r2, #0
 800911e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2200      	movs	r2, #0
 8009124:	749a      	strb	r2, [r3, #18]
 8009126:	2200      	movs	r2, #0
 8009128:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8009132:	441a      	add	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8009138:	697b      	ldr	r3, [r7, #20]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3718      	adds	r7, #24
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	0800f1e0 	.word	0x0800f1e0
 8009148:	0800f214 	.word	0x0800f214
 800914c:	0800f244 	.word	0x0800f244

08009150 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009150:	b590      	push	{r4, r7, lr}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800915c:	2b00      	cmp	r3, #0
 800915e:	d02d      	beq.n	80091bc <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	e002      	b.n	800916e <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1f8      	bne.n	8009168 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	899b      	ldrh	r3, [r3, #12]
 800917c:	b29b      	uxth	r3, r3
 800917e:	4618      	mov	r0, r3
 8009180:	f7fa fd4f 	bl	8003c22 <lwip_htons>
 8009184:	4603      	mov	r3, r0
 8009186:	f003 0307 	and.w	r3, r3, #7
 800918a:	2b00      	cmp	r3, #0
 800918c:	d116      	bne.n	80091bc <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	899b      	ldrh	r3, [r3, #12]
 8009194:	b29c      	uxth	r4, r3
 8009196:	2001      	movs	r0, #1
 8009198:	f7fa fd43 	bl	8003c22 <lwip_htons>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	4322      	orrs	r2, r4
 80091a6:	b292      	uxth	r2, r2
 80091a8:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7e9b      	ldrb	r3, [r3, #26]
 80091ae:	f043 0320 	orr.w	r3, r3, #32
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	e004      	b.n	80091c6 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80091bc:	2101      	movs	r1, #1
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fcc0 	bl	8009b44 <tcp_enqueue_flags>
 80091c4:	4603      	mov	r3, r0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd90      	pop	{r4, r7, pc}
	...

080091d0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80091d0:	b590      	push	{r4, r7, lr}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	603b      	str	r3, [r7, #0]
 80091dc:	4613      	mov	r3, r2
 80091de:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80091e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80091ee:	2003      	movs	r0, #3
 80091f0:	f7fb f8cc 	bl	800438c <memp_malloc>
 80091f4:	6138      	str	r0, [r7, #16]
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80091fc:	68b8      	ldr	r0, [r7, #8]
 80091fe:	f7fb fe6d 	bl	8004edc <pbuf_free>
    return NULL;
 8009202:	2300      	movs	r3, #0
 8009204:	e061      	b.n	80092ca <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800920c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	891a      	ldrh	r2, [r3, #8]
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	b29b      	uxth	r3, r3
 8009222:	429a      	cmp	r2, r3
 8009224:	d205      	bcs.n	8009232 <tcp_create_segment+0x62>
 8009226:	4b2b      	ldr	r3, [pc, #172]	; (80092d4 <tcp_create_segment+0x104>)
 8009228:	22ba      	movs	r2, #186	; 0xba
 800922a:	492b      	ldr	r1, [pc, #172]	; (80092d8 <tcp_create_segment+0x108>)
 800922c:	482b      	ldr	r0, [pc, #172]	; (80092dc <tcp_create_segment+0x10c>)
 800922e:	f003 ffe1 	bl	800d1f4 <iprintf>
  seg->len = p->tot_len - optlen;
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	891a      	ldrh	r2, [r3, #8]
 8009236:	7dfb      	ldrb	r3, [r7, #23]
 8009238:	b29b      	uxth	r3, r3
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	b29a      	uxth	r2, r3
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8009242:	2114      	movs	r1, #20
 8009244:	68b8      	ldr	r0, [r7, #8]
 8009246:	f7fb fe25 	bl	8004e94 <pbuf_header>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d004      	beq.n	800925a <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009250:	6938      	ldr	r0, [r7, #16]
 8009252:	f7fd f92f 	bl	80064b4 <tcp_seg_free>
    return NULL;
 8009256:	2300      	movs	r3, #0
 8009258:	e037      	b.n	80092ca <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8ada      	ldrh	r2, [r3, #22]
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	68dc      	ldr	r4, [r3, #12]
 800926c:	4610      	mov	r0, r2
 800926e:	f7fa fcd8 	bl	8003c22 <lwip_htons>
 8009272:	4603      	mov	r3, r0
 8009274:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	8b1a      	ldrh	r2, [r3, #24]
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	68dc      	ldr	r4, [r3, #12]
 800927e:	4610      	mov	r0, r2
 8009280:	f7fa fccf 	bl	8003c22 <lwip_htons>
 8009284:	4603      	mov	r3, r0
 8009286:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	68dc      	ldr	r4, [r3, #12]
 800928c:	6838      	ldr	r0, [r7, #0]
 800928e:	f7fa fcd6 	bl	8003c3e <lwip_htonl>
 8009292:	4603      	mov	r3, r0
 8009294:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009296:	7dfb      	ldrb	r3, [r7, #23]
 8009298:	089b      	lsrs	r3, r3, #2
 800929a:	b2db      	uxtb	r3, r3
 800929c:	b29b      	uxth	r3, r3
 800929e:	3305      	adds	r3, #5
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	031b      	lsls	r3, r3, #12
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	4313      	orrs	r3, r2
 80092ac:	b29a      	uxth	r2, r3
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	68dc      	ldr	r4, [r3, #12]
 80092b2:	4610      	mov	r0, r2
 80092b4:	f7fa fcb5 	bl	8003c22 <lwip_htons>
 80092b8:	4603      	mov	r3, r0
 80092ba:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	749a      	strb	r2, [r3, #18]
 80092c4:	2200      	movs	r2, #0
 80092c6:	74da      	strb	r2, [r3, #19]
  return seg;
 80092c8:	693b      	ldr	r3, [r7, #16]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	371c      	adds	r7, #28
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd90      	pop	{r4, r7, pc}
 80092d2:	bf00      	nop
 80092d4:	0800f1e0 	.word	0x0800f1e0
 80092d8:	0800f26c 	.word	0x0800f26c
 80092dc:	0800f244 	.word	0x0800f244

080092e0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	607b      	str	r3, [r7, #4]
 80092e8:	4603      	mov	r3, r0
 80092ea:	73fb      	strb	r3, [r7, #15]
 80092ec:	460b      	mov	r3, r1
 80092ee:	81bb      	strh	r3, [r7, #12]
 80092f0:	4613      	mov	r3, r2
 80092f2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80092f4:	89bb      	ldrh	r3, [r7, #12]
 80092f6:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80092f8:	89ba      	ldrh	r2, [r7, #12]
 80092fa:	897b      	ldrh	r3, [r7, #10]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d221      	bcs.n	8009344 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009300:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009304:	f003 0302 	and.w	r3, r3, #2
 8009308:	2b00      	cmp	r3, #0
 800930a:	d111      	bne.n	8009330 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	7e9b      	ldrb	r3, [r3, #26]
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009314:	2b00      	cmp	r3, #0
 8009316:	d115      	bne.n	8009344 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8009318:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800931c:	2b00      	cmp	r3, #0
 800931e:	d007      	beq.n	8009330 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8009324:	2b00      	cmp	r3, #0
 8009326:	d103      	bne.n	8009330 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800932c:	2b00      	cmp	r3, #0
 800932e:	d009      	beq.n	8009344 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009330:	89bb      	ldrh	r3, [r7, #12]
 8009332:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8009336:	f023 0203 	bic.w	r2, r3, #3
 800933a:	897b      	ldrh	r3, [r7, #10]
 800933c:	4293      	cmp	r3, r2
 800933e:	bf28      	it	cs
 8009340:	4613      	movcs	r3, r2
 8009342:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009344:	8af9      	ldrh	r1, [r7, #22]
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	2200      	movs	r2, #0
 800934a:	4618      	mov	r0, r3
 800934c:	f7fb fa52 	bl	80047f4 <pbuf_alloc>
 8009350:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8009358:	2300      	movs	r3, #0
 800935a:	e019      	b.n	8009390 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d006      	beq.n	8009372 <tcp_pbuf_prealloc+0x92>
 8009364:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <tcp_pbuf_prealloc+0xb8>)
 8009366:	f44f 7288 	mov.w	r2, #272	; 0x110
 800936a:	490c      	ldr	r1, [pc, #48]	; (800939c <tcp_pbuf_prealloc+0xbc>)
 800936c:	480c      	ldr	r0, [pc, #48]	; (80093a0 <tcp_pbuf_prealloc+0xc0>)
 800936e:	f003 ff41 	bl	800d1f4 <iprintf>
  *oversize = p->len - length;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	895a      	ldrh	r2, [r3, #10]
 8009376:	89bb      	ldrh	r3, [r7, #12]
 8009378:	1ad3      	subs	r3, r2, r3
 800937a:	b29a      	uxth	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	89ba      	ldrh	r2, [r7, #12]
 8009384:	811a      	strh	r2, [r3, #8]
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	891a      	ldrh	r2, [r3, #8]
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	815a      	strh	r2, [r3, #10]
  return p;
 800938e:	693b      	ldr	r3, [r7, #16]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3718      	adds	r7, #24
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	0800f1e0 	.word	0x0800f1e0
 800939c:	0800f284 	.word	0x0800f284
 80093a0:	0800f244 	.word	0x0800f244

080093a4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7d1b      	ldrb	r3, [r3, #20]
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	d00e      	beq.n	80093d6 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80093bc:	2b07      	cmp	r3, #7
 80093be:	d00a      	beq.n	80093d6 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d006      	beq.n	80093d6 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80093cc:	2b03      	cmp	r3, #3
 80093ce:	d002      	beq.n	80093d6 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80093d0:	f06f 030a 	mvn.w	r3, #10
 80093d4:	e04f      	b.n	8009476 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 80093d6:	887b      	ldrh	r3, [r7, #2]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <tcp_write_checks+0x3c>
    return ERR_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	e04a      	b.n	8009476 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093e6:	887a      	ldrh	r2, [r7, #2]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d909      	bls.n	8009400 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	7e9b      	ldrb	r3, [r3, #26]
 80093f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80093fa:	f04f 33ff 	mov.w	r3, #4294967295
 80093fe:	e03a      	b.n	8009476 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009406:	2b0f      	cmp	r3, #15
 8009408:	d806      	bhi.n	8009418 <tcp_write_checks+0x74>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009410:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8009414:	4293      	cmp	r3, r2
 8009416:	d909      	bls.n	800942c <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	7e9b      	ldrb	r3, [r3, #26]
 800941c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009420:	b2da      	uxtb	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009426:	f04f 33ff 	mov.w	r3, #4294967295
 800942a:	e024      	b.n	8009476 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00f      	beq.n	8009456 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800943a:	2b00      	cmp	r3, #0
 800943c:	d11a      	bne.n	8009474 <tcp_write_checks+0xd0>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009442:	2b00      	cmp	r3, #0
 8009444:	d116      	bne.n	8009474 <tcp_write_checks+0xd0>
 8009446:	4b0e      	ldr	r3, [pc, #56]	; (8009480 <tcp_write_checks+0xdc>)
 8009448:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800944c:	490d      	ldr	r1, [pc, #52]	; (8009484 <tcp_write_checks+0xe0>)
 800944e:	480e      	ldr	r0, [pc, #56]	; (8009488 <tcp_write_checks+0xe4>)
 8009450:	f003 fed0 	bl	800d1f4 <iprintf>
 8009454:	e00e      	b.n	8009474 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800945a:	2b00      	cmp	r3, #0
 800945c:	d103      	bne.n	8009466 <tcp_write_checks+0xc2>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009462:	2b00      	cmp	r3, #0
 8009464:	d006      	beq.n	8009474 <tcp_write_checks+0xd0>
 8009466:	4b06      	ldr	r3, [pc, #24]	; (8009480 <tcp_write_checks+0xdc>)
 8009468:	f240 1259 	movw	r2, #345	; 0x159
 800946c:	4907      	ldr	r1, [pc, #28]	; (800948c <tcp_write_checks+0xe8>)
 800946e:	4806      	ldr	r0, [pc, #24]	; (8009488 <tcp_write_checks+0xe4>)
 8009470:	f003 fec0 	bl	800d1f4 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	0800f1e0 	.word	0x0800f1e0
 8009484:	0800f298 	.word	0x0800f298
 8009488:	0800f244 	.word	0x0800f244
 800948c:	0800f2d4 	.word	0x0800f2d4

08009490 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8009490:	b590      	push	{r4, r7, lr}
 8009492:	b09b      	sub	sp, #108	; 0x6c
 8009494:	af04      	add	r7, sp, #16
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	4611      	mov	r1, r2
 800949c:	461a      	mov	r2, r3
 800949e:	460b      	mov	r3, r1
 80094a0:	80fb      	strh	r3, [r7, #6]
 80094a2:	4613      	mov	r3, r2
 80094a4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80094aa:	2300      	movs	r3, #0
 80094ac:	653b      	str	r3, [r7, #80]	; 0x50
 80094ae:	2300      	movs	r3, #0
 80094b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094b2:	2300      	movs	r3, #0
 80094b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80094b6:	2300      	movs	r3, #0
 80094b8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80094ba:	2300      	movs	r3, #0
 80094bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 80094c0:	2300      	movs	r3, #0
 80094c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094de:	085b      	lsrs	r3, r3, #1
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094e6:	4293      	cmp	r3, r2
 80094e8:	bf28      	it	cs
 80094ea:	4613      	movcs	r3, r2
 80094ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80094ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d102      	bne.n	80094fa <tcp_write+0x6a>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094f8:	e000      	b.n	80094fc <tcp_write+0x6c>
 80094fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80094fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d109      	bne.n	8009518 <tcp_write+0x88>
 8009504:	4b92      	ldr	r3, [pc, #584]	; (8009750 <tcp_write+0x2c0>)
 8009506:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800950a:	4992      	ldr	r1, [pc, #584]	; (8009754 <tcp_write+0x2c4>)
 800950c:	4892      	ldr	r0, [pc, #584]	; (8009758 <tcp_write+0x2c8>)
 800950e:	f003 fe71 	bl	800d1f4 <iprintf>
 8009512:	f06f 030f 	mvn.w	r3, #15
 8009516:	e30a      	b.n	8009b2e <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8009518:	88fb      	ldrh	r3, [r7, #6]
 800951a:	4619      	mov	r1, r3
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f7ff ff41 	bl	80093a4 <tcp_write_checks>
 8009522:	4603      	mov	r3, r0
 8009524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8009528:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <tcp_write+0xa6>
    return err;
 8009530:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8009534:	e2fb      	b.n	8009b2e <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800953c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 80f5 	beq.w	8009734 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800954e:	653b      	str	r3, [r7, #80]	; 0x50
 8009550:	e002      	b.n	8009558 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8009552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1f8      	bne.n	8009552 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8009560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009562:	7a9b      	ldrb	r3, [r3, #10]
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	b29b      	uxth	r3, r3
 8009568:	f003 0304 	and.w	r3, r3, #4
 800956c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800956e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009572:	891b      	ldrh	r3, [r3, #8]
 8009574:	4619      	mov	r1, r3
 8009576:	8c3b      	ldrh	r3, [r7, #32]
 8009578:	440b      	add	r3, r1
 800957a:	429a      	cmp	r2, r3
 800957c:	da06      	bge.n	800958c <tcp_write+0xfc>
 800957e:	4b74      	ldr	r3, [pc, #464]	; (8009750 <tcp_write+0x2c0>)
 8009580:	f240 12c7 	movw	r2, #455	; 0x1c7
 8009584:	4975      	ldr	r1, [pc, #468]	; (800975c <tcp_write+0x2cc>)
 8009586:	4874      	ldr	r0, [pc, #464]	; (8009758 <tcp_write+0x2c8>)
 8009588:	f003 fe34 	bl	800d1f4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800958c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800958e:	891a      	ldrh	r2, [r3, #8]
 8009590:	8c3b      	ldrh	r3, [r7, #32]
 8009592:	4413      	add	r3, r2
 8009594:	b29b      	uxth	r3, r3
 8009596:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009598:	1ad3      	subs	r3, r2, r3
 800959a:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80095a2:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80095a4:	8a7b      	ldrh	r3, [r7, #18]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d027      	beq.n	80095fa <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80095aa:	8a7b      	ldrh	r3, [r7, #18]
 80095ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d206      	bcs.n	80095c0 <tcp_write+0x130>
 80095b2:	4b67      	ldr	r3, [pc, #412]	; (8009750 <tcp_write+0x2c0>)
 80095b4:	f240 12d9 	movw	r2, #473	; 0x1d9
 80095b8:	4969      	ldr	r1, [pc, #420]	; (8009760 <tcp_write+0x2d0>)
 80095ba:	4867      	ldr	r0, [pc, #412]	; (8009758 <tcp_write+0x2c8>)
 80095bc:	f003 fe1a 	bl	800d1f4 <iprintf>
      seg = last_unsent;
 80095c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80095c4:	8a7b      	ldrh	r3, [r7, #18]
 80095c6:	88fa      	ldrh	r2, [r7, #6]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d901      	bls.n	80095d0 <tcp_write+0x140>
 80095cc:	8a7b      	ldrh	r3, [r7, #18]
 80095ce:	e000      	b.n	80095d2 <tcp_write+0x142>
 80095d0:	88fb      	ldrh	r3, [r7, #6]
 80095d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80095d4:	4293      	cmp	r3, r2
 80095d6:	bfa8      	it	ge
 80095d8:	4613      	movge	r3, r2
 80095da:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80095dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80095e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80095e2:	4413      	add	r3, r2
 80095e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80095e8:	8a7a      	ldrh	r2, [r7, #18]
 80095ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80095f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80095f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80095fa:	8a7b      	ldrh	r3, [r7, #18]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00b      	beq.n	8009618 <tcp_write+0x188>
 8009600:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009604:	88fb      	ldrh	r3, [r7, #6]
 8009606:	429a      	cmp	r2, r3
 8009608:	d006      	beq.n	8009618 <tcp_write+0x188>
 800960a:	4b51      	ldr	r3, [pc, #324]	; (8009750 <tcp_write+0x2c0>)
 800960c:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009610:	4954      	ldr	r1, [pc, #336]	; (8009764 <tcp_write+0x2d4>)
 8009612:	4851      	ldr	r0, [pc, #324]	; (8009758 <tcp_write+0x2c8>)
 8009614:	f003 fdee 	bl	800d1f4 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8009618:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800961c:	88fb      	ldrh	r3, [r7, #6]
 800961e:	429a      	cmp	r2, r3
 8009620:	f080 8168 	bcs.w	80098f4 <tcp_write+0x464>
 8009624:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009626:	2b00      	cmp	r3, #0
 8009628:	f000 8164 	beq.w	80098f4 <tcp_write+0x464>
 800962c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800962e:	891b      	ldrh	r3, [r3, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	f000 815f 	beq.w	80098f4 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8009636:	88fa      	ldrh	r2, [r7, #6]
 8009638:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800963c:	1ad2      	subs	r2, r2, r3
 800963e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009640:	4293      	cmp	r3, r2
 8009642:	bfa8      	it	ge
 8009644:	4613      	movge	r3, r2
 8009646:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8009648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800964a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800964c:	797b      	ldrb	r3, [r7, #5]
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d027      	beq.n	80096a6 <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8009656:	f107 0012 	add.w	r0, r7, #18
 800965a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800965c:	8bf9      	ldrh	r1, [r7, #30]
 800965e:	2301      	movs	r3, #1
 8009660:	9302      	str	r3, [sp, #8]
 8009662:	797b      	ldrb	r3, [r7, #5]
 8009664:	9301      	str	r3, [sp, #4]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	4603      	mov	r3, r0
 800966c:	2004      	movs	r0, #4
 800966e:	f7ff fe37 	bl	80092e0 <tcp_pbuf_prealloc>
 8009672:	6578      	str	r0, [r7, #84]	; 0x54
 8009674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 8227 	beq.w	8009aca <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800967c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800967e:	6858      	ldr	r0, [r3, #4]
 8009680:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	4413      	add	r3, r2
 8009688:	8bfa      	ldrh	r2, [r7, #30]
 800968a:	4619      	mov	r1, r3
 800968c:	f003 fd9f 	bl	800d1ce <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8009690:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009692:	f7fb fcb7 	bl	8005004 <pbuf_clen>
 8009696:	4603      	mov	r3, r0
 8009698:	461a      	mov	r2, r3
 800969a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800969e:	4413      	add	r3, r2
 80096a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80096a4:	e03f      	b.n	8009726 <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80096a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
 80096ac:	e002      	b.n	80096b4 <tcp_write+0x224>
 80096ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	637b      	str	r3, [r7, #52]	; 0x34
 80096b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1f8      	bne.n	80096ae <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80096bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096be:	7b1b      	ldrb	r3, [r3, #12]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d115      	bne.n	80096f0 <tcp_write+0x260>
 80096c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096ca:	8952      	ldrh	r2, [r2, #10]
 80096cc:	4413      	add	r3, r2
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d10d      	bne.n	80096f0 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80096d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d006      	beq.n	80096ea <tcp_write+0x25a>
 80096dc:	4b1c      	ldr	r3, [pc, #112]	; (8009750 <tcp_write+0x2c0>)
 80096de:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80096e2:	4921      	ldr	r1, [pc, #132]	; (8009768 <tcp_write+0x2d8>)
 80096e4:	481c      	ldr	r0, [pc, #112]	; (8009758 <tcp_write+0x2c8>)
 80096e6:	f003 fd85 	bl	800d1f4 <iprintf>
          extendlen = seglen;
 80096ea:	8bfb      	ldrh	r3, [r7, #30]
 80096ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80096ee:	e01a      	b.n	8009726 <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80096f0:	8bfb      	ldrh	r3, [r7, #30]
 80096f2:	2201      	movs	r2, #1
 80096f4:	4619      	mov	r1, r3
 80096f6:	2004      	movs	r0, #4
 80096f8:	f7fb f87c 	bl	80047f4 <pbuf_alloc>
 80096fc:	6578      	str	r0, [r7, #84]	; 0x54
 80096fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 81e4 	beq.w	8009ace <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8009706:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	441a      	add	r2, r3
 800970e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009710:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8009712:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009714:	f7fb fc76 	bl	8005004 <pbuf_clen>
 8009718:	4603      	mov	r3, r0
 800971a:	461a      	mov	r2, r3
 800971c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009720:	4413      	add	r3, r2
 8009722:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8009726:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800972a:	8bfb      	ldrh	r3, [r7, #30]
 800972c:	4413      	add	r3, r2
 800972e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009732:	e0df      	b.n	80098f4 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 80da 	beq.w	80098f4 <tcp_write+0x464>
 8009740:	4b03      	ldr	r3, [pc, #12]	; (8009750 <tcp_write+0x2c0>)
 8009742:	f240 2225 	movw	r2, #549	; 0x225
 8009746:	4909      	ldr	r1, [pc, #36]	; (800976c <tcp_write+0x2dc>)
 8009748:	4803      	ldr	r0, [pc, #12]	; (8009758 <tcp_write+0x2c8>)
 800974a:	f003 fd53 	bl	800d1f4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800974e:	e0d1      	b.n	80098f4 <tcp_write+0x464>
 8009750:	0800f1e0 	.word	0x0800f1e0
 8009754:	0800f308 	.word	0x0800f308
 8009758:	0800f244 	.word	0x0800f244
 800975c:	0800f33c 	.word	0x0800f33c
 8009760:	0800f354 	.word	0x0800f354
 8009764:	0800f374 	.word	0x0800f374
 8009768:	0800f394 	.word	0x0800f394
 800976c:	0800f3c0 	.word	0x0800f3c0
    struct pbuf *p;
    u16_t left = len - pos;
 8009770:	88fa      	ldrh	r2, [r7, #6]
 8009772:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800977a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800977e:	b29b      	uxth	r3, r3
 8009780:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8009786:	8b7a      	ldrh	r2, [r7, #26]
 8009788:	8bbb      	ldrh	r3, [r7, #28]
 800978a:	4293      	cmp	r3, r2
 800978c:	bf28      	it	cs
 800978e:	4613      	movcs	r3, r2
 8009790:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8009792:	797b      	ldrb	r3, [r7, #5]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	d036      	beq.n	800980a <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800979c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	8b3b      	ldrh	r3, [r7, #24]
 80097a4:	4413      	add	r3, r2
 80097a6:	b299      	uxth	r1, r3
 80097a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	bf0c      	ite	eq
 80097ae:	2301      	moveq	r3, #1
 80097b0:	2300      	movne	r3, #0
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	f107 0012 	add.w	r0, r7, #18
 80097b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80097ba:	9302      	str	r3, [sp, #8]
 80097bc:	797b      	ldrb	r3, [r7, #5]
 80097be:	9301      	str	r3, [sp, #4]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	4603      	mov	r3, r0
 80097c6:	2000      	movs	r0, #0
 80097c8:	f7ff fd8a 	bl	80092e0 <tcp_pbuf_prealloc>
 80097cc:	6338      	str	r0, [r7, #48]	; 0x30
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 817e 	beq.w	8009ad2 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	895b      	ldrh	r3, [r3, #10]
 80097da:	8b3a      	ldrh	r2, [r7, #24]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d906      	bls.n	80097ee <tcp_write+0x35e>
 80097e0:	4b8f      	ldr	r3, [pc, #572]	; (8009a20 <tcp_write+0x590>)
 80097e2:	f240 2241 	movw	r2, #577	; 0x241
 80097e6:	498f      	ldr	r1, [pc, #572]	; (8009a24 <tcp_write+0x594>)
 80097e8:	488f      	ldr	r0, [pc, #572]	; (8009a28 <tcp_write+0x598>)
 80097ea:	f003 fd03 	bl	800d1f4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	685a      	ldr	r2, [r3, #4]
 80097f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097f6:	18d0      	adds	r0, r2, r3
 80097f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	4413      	add	r3, r2
 8009800:	8b3a      	ldrh	r2, [r7, #24]
 8009802:	4619      	mov	r1, r3
 8009804:	f003 fce3 	bl	800d1ce <memcpy>
 8009808:	e02e      	b.n	8009868 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800980a:	8a7b      	ldrh	r3, [r7, #18]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d006      	beq.n	800981e <tcp_write+0x38e>
 8009810:	4b83      	ldr	r3, [pc, #524]	; (8009a20 <tcp_write+0x590>)
 8009812:	f240 224b 	movw	r2, #587	; 0x24b
 8009816:	4985      	ldr	r1, [pc, #532]	; (8009a2c <tcp_write+0x59c>)
 8009818:	4883      	ldr	r0, [pc, #524]	; (8009a28 <tcp_write+0x598>)
 800981a:	f003 fceb 	bl	800d1f4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800981e:	8b3b      	ldrh	r3, [r7, #24]
 8009820:	2201      	movs	r2, #1
 8009822:	4619      	mov	r1, r3
 8009824:	2000      	movs	r0, #0
 8009826:	f7fa ffe5 	bl	80047f4 <pbuf_alloc>
 800982a:	6178      	str	r0, [r7, #20]
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2b00      	cmp	r3, #0
 8009830:	f000 8151 	beq.w	8009ad6 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8009834:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	441a      	add	r2, r3
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009844:	b29b      	uxth	r3, r3
 8009846:	2200      	movs	r2, #0
 8009848:	4619      	mov	r1, r3
 800984a:	2000      	movs	r0, #0
 800984c:	f7fa ffd2 	bl	80047f4 <pbuf_alloc>
 8009850:	6338      	str	r0, [r7, #48]	; 0x30
 8009852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009854:	2b00      	cmp	r3, #0
 8009856:	d103      	bne.n	8009860 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8009858:	6978      	ldr	r0, [r7, #20]
 800985a:	f7fb fb3f 	bl	8004edc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800985e:	e13d      	b.n	8009adc <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8009860:	6979      	ldr	r1, [r7, #20]
 8009862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009864:	f7fb fc08 	bl	8005078 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8009868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800986a:	f7fb fbcb 	bl	8005004 <pbuf_clen>
 800986e:	4603      	mov	r3, r0
 8009870:	461a      	mov	r2, r3
 8009872:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009876:	4413      	add	r3, r2
 8009878:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800987c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009880:	2b10      	cmp	r3, #16
 8009882:	d805      	bhi.n	8009890 <tcp_write+0x400>
 8009884:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009888:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800988c:	4293      	cmp	r3, r2
 800988e:	d903      	bls.n	8009898 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8009890:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009892:	f7fb fb23 	bl	8004edc <pbuf_free>
      goto memerr;
 8009896:	e121      	b.n	8009adc <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800989c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80098a0:	441a      	add	r2, r3
 80098a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	4613      	mov	r3, r2
 80098aa:	2200      	movs	r2, #0
 80098ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7ff fc8e 	bl	80091d0 <tcp_create_segment>
 80098b4:	64f8      	str	r0, [r7, #76]	; 0x4c
 80098b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f000 810e 	beq.w	8009ada <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80098be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d102      	bne.n	80098ca <tcp_write+0x43a>
      queue = seg;
 80098c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c6:	647b      	str	r3, [r7, #68]	; 0x44
 80098c8:	e00c      	b.n	80098e4 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80098ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d106      	bne.n	80098de <tcp_write+0x44e>
 80098d0:	4b53      	ldr	r3, [pc, #332]	; (8009a20 <tcp_write+0x590>)
 80098d2:	f240 2285 	movw	r2, #645	; 0x285
 80098d6:	4956      	ldr	r1, [pc, #344]	; (8009a30 <tcp_write+0x5a0>)
 80098d8:	4853      	ldr	r0, [pc, #332]	; (8009a28 <tcp_write+0x598>)
 80098da:	f003 fc8b 	bl	800d1f4 <iprintf>
      prev_seg->next = seg;
 80098de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098e2:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80098e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098e6:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80098e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80098ec:	8b3b      	ldrh	r3, [r7, #24]
 80098ee:	4413      	add	r3, r2
 80098f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80098f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80098f8:	88fb      	ldrh	r3, [r7, #6]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	f4ff af38 	bcc.w	8009770 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8009900:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009902:	2b00      	cmp	r3, #0
 8009904:	d02c      	beq.n	8009960 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8009906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800990c:	e01e      	b.n	800994c <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800990e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009910:	891a      	ldrh	r2, [r3, #8]
 8009912:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009914:	4413      	add	r3, r2
 8009916:	b29a      	uxth	r2, r3
 8009918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d110      	bne.n	8009946 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8009924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800992a:	8952      	ldrh	r2, [r2, #10]
 800992c:	4413      	add	r3, r2
 800992e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8009930:	68b9      	ldr	r1, [r7, #8]
 8009932:	4618      	mov	r0, r3
 8009934:	f003 fc4b 	bl	800d1ce <memcpy>
        p->len += oversize_used;
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	895a      	ldrh	r2, [r3, #10]
 800993c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800993e:	4413      	add	r3, r2
 8009940:	b29a      	uxth	r2, r3
 8009942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009944:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1dd      	bne.n	800990e <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8009952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009954:	891a      	ldrh	r2, [r3, #8]
 8009956:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009958:	4413      	add	r3, r2
 800995a:	b29a      	uxth	r2, r3
 800995c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800995e:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8009960:	8a7a      	ldrh	r2, [r7, #18]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8009968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800996a:	2b00      	cmp	r3, #0
 800996c:	d018      	beq.n	80099a0 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800996e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009970:	2b00      	cmp	r3, #0
 8009972:	d106      	bne.n	8009982 <tcp_write+0x4f2>
 8009974:	4b2a      	ldr	r3, [pc, #168]	; (8009a20 <tcp_write+0x590>)
 8009976:	f240 22bb 	movw	r2, #699	; 0x2bb
 800997a:	492e      	ldr	r1, [pc, #184]	; (8009a34 <tcp_write+0x5a4>)
 800997c:	482a      	ldr	r0, [pc, #168]	; (8009a28 <tcp_write+0x598>)
 800997e:	f003 fc39 	bl	800d1f4 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8009982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009988:	4618      	mov	r0, r3
 800998a:	f7fb fb75 	bl	8005078 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800998e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009990:	891a      	ldrh	r2, [r3, #8]
 8009992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009994:	891b      	ldrh	r3, [r3, #8]
 8009996:	4413      	add	r3, r2
 8009998:	b29a      	uxth	r2, r3
 800999a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800999c:	811a      	strh	r2, [r3, #8]
 800999e:	e037      	b.n	8009a10 <tcp_write+0x580>
  } else if (extendlen > 0) {
 80099a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d034      	beq.n	8009a10 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80099a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <tcp_write+0x524>
 80099ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d106      	bne.n	80099c2 <tcp_write+0x532>
 80099b4:	4b1a      	ldr	r3, [pc, #104]	; (8009a20 <tcp_write+0x590>)
 80099b6:	f240 22c1 	movw	r2, #705	; 0x2c1
 80099ba:	491f      	ldr	r1, [pc, #124]	; (8009a38 <tcp_write+0x5a8>)
 80099bc:	481a      	ldr	r0, [pc, #104]	; (8009a28 <tcp_write+0x598>)
 80099be:	f003 fc19 	bl	800d1f4 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80099c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80099c8:	e009      	b.n	80099de <tcp_write+0x54e>
      p->tot_len += extendlen;
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	891a      	ldrh	r2, [r3, #8]
 80099ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80099d0:	4413      	add	r3, r2
 80099d2:	b29a      	uxth	r2, r3
 80099d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d6:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80099de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1f1      	bne.n	80099ca <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	891a      	ldrh	r2, [r3, #8]
 80099ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80099ec:	4413      	add	r3, r2
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80099f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f6:	895a      	ldrh	r2, [r3, #10]
 80099f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80099fa:	4413      	add	r3, r2
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a00:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8009a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a04:	891a      	ldrh	r2, [r3, #8]
 8009a06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009a08:	4413      	add	r3, r2
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a0e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8009a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d112      	bne.n	8009a3c <tcp_write+0x5ac>
    pcb->unsent = queue;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a1a:	669a      	str	r2, [r3, #104]	; 0x68
 8009a1c:	e011      	b.n	8009a42 <tcp_write+0x5b2>
 8009a1e:	bf00      	nop
 8009a20:	0800f1e0 	.word	0x0800f1e0
 8009a24:	0800f3f0 	.word	0x0800f3f0
 8009a28:	0800f244 	.word	0x0800f244
 8009a2c:	0800f430 	.word	0x0800f430
 8009a30:	0800f440 	.word	0x0800f440
 8009a34:	0800f454 	.word	0x0800f454
 8009a38:	0800f48c 	.word	0x0800f48c
  } else {
    last_unsent->next = queue;
 8009a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a40:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a46:	88fb      	ldrh	r3, [r7, #6]
 8009a48:	441a      	add	r2, r3
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009a54:	88fb      	ldrh	r3, [r7, #6]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009a66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00e      	beq.n	8009a92 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10a      	bne.n	8009a92 <tcp_write+0x602>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d106      	bne.n	8009a92 <tcp_write+0x602>
 8009a84:	4b2c      	ldr	r3, [pc, #176]	; (8009b38 <tcp_write+0x6a8>)
 8009a86:	f240 22ed 	movw	r2, #749	; 0x2ed
 8009a8a:	492c      	ldr	r1, [pc, #176]	; (8009b3c <tcp_write+0x6ac>)
 8009a8c:	482c      	ldr	r0, [pc, #176]	; (8009b40 <tcp_write+0x6b0>)
 8009a8e:	f003 fbb1 	bl	800d1f4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8009a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d016      	beq.n	8009ac6 <tcp_write+0x636>
 8009a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d012      	beq.n	8009ac6 <tcp_write+0x636>
 8009aa0:	797b      	ldrb	r3, [r7, #5]
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10d      	bne.n	8009ac6 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8009aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	899b      	ldrh	r3, [r3, #12]
 8009ab0:	b29c      	uxth	r4, r3
 8009ab2:	2008      	movs	r0, #8
 8009ab4:	f7fa f8b5 	bl	8003c22 <lwip_htons>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	461a      	mov	r2, r3
 8009abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	4322      	orrs	r2, r4
 8009ac2:	b292      	uxth	r2, r2
 8009ac4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	e031      	b.n	8009b2e <tcp_write+0x69e>
          goto memerr;
 8009aca:	bf00      	nop
 8009acc:	e006      	b.n	8009adc <tcp_write+0x64c>
            goto memerr;
 8009ace:	bf00      	nop
 8009ad0:	e004      	b.n	8009adc <tcp_write+0x64c>
        goto memerr;
 8009ad2:	bf00      	nop
 8009ad4:	e002      	b.n	8009adc <tcp_write+0x64c>
        goto memerr;
 8009ad6:	bf00      	nop
 8009ad8:	e000      	b.n	8009adc <tcp_write+0x64c>
      goto memerr;
 8009ada:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	7e9b      	ldrb	r3, [r3, #26]
 8009ae0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ae4:	b2da      	uxtb	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8009aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d002      	beq.n	8009af6 <tcp_write+0x666>
    pbuf_free(concat_p);
 8009af0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009af2:	f7fb f9f3 	bl	8004edc <pbuf_free>
  }
  if (queue != NULL) {
 8009af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <tcp_write+0x672>
    tcp_segs_free(queue);
 8009afc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009afe:	f7fc fcc5 	bl	800648c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00e      	beq.n	8009b2a <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10a      	bne.n	8009b2a <tcp_write+0x69a>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d106      	bne.n	8009b2a <tcp_write+0x69a>
 8009b1c:	4b06      	ldr	r3, [pc, #24]	; (8009b38 <tcp_write+0x6a8>)
 8009b1e:	f240 3202 	movw	r2, #770	; 0x302
 8009b22:	4906      	ldr	r1, [pc, #24]	; (8009b3c <tcp_write+0x6ac>)
 8009b24:	4806      	ldr	r0, [pc, #24]	; (8009b40 <tcp_write+0x6b0>)
 8009b26:	f003 fb65 	bl	800d1f4 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8009b2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	375c      	adds	r7, #92	; 0x5c
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd90      	pop	{r4, r7, pc}
 8009b36:	bf00      	nop
 8009b38:	0800f1e0 	.word	0x0800f1e0
 8009b3c:	0800f4c4 	.word	0x0800f4c4
 8009b40:	0800f244 	.word	0x0800f244

08009b44 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b08a      	sub	sp, #40	; 0x28
 8009b48:	af02      	add	r7, sp, #8
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009b58:	78fb      	ldrb	r3, [r7, #3]
 8009b5a:	f003 0303 	and.w	r3, r3, #3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d106      	bne.n	8009b70 <tcp_enqueue_flags+0x2c>
 8009b62:	4b6f      	ldr	r3, [pc, #444]	; (8009d20 <tcp_enqueue_flags+0x1dc>)
 8009b64:	f240 321b 	movw	r2, #795	; 0x31b
 8009b68:	496e      	ldr	r1, [pc, #440]	; (8009d24 <tcp_enqueue_flags+0x1e0>)
 8009b6a:	486f      	ldr	r0, [pc, #444]	; (8009d28 <tcp_enqueue_flags+0x1e4>)
 8009b6c:	f003 fb42 	bl	800d1f4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b76:	2b0f      	cmp	r3, #15
 8009b78:	d806      	bhi.n	8009b88 <tcp_enqueue_flags+0x44>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b80:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d90e      	bls.n	8009ba6 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8009b88:	78fb      	ldrb	r3, [r7, #3]
 8009b8a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d109      	bne.n	8009ba6 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	7e9b      	ldrb	r3, [r3, #26]
 8009b96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8009ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba4:	e0b7      	b.n	8009d16 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009bb4:	7ffb      	ldrb	r3, [r7, #31]
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	b2db      	uxtb	r3, r3
 8009bba:	f003 0304 	and.w	r3, r3, #4
 8009bbe:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	2000      	movs	r0, #0
 8009bca:	f7fa fe13 	bl	80047f4 <pbuf_alloc>
 8009bce:	6138      	str	r0, [r7, #16]
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d109      	bne.n	8009bea <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	7e9b      	ldrb	r3, [r3, #26]
 8009bda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009be4:	f04f 33ff 	mov.w	r3, #4294967295
 8009be8:	e095      	b.n	8009d16 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	895a      	ldrh	r2, [r3, #10]
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d206      	bcs.n	8009c04 <tcp_enqueue_flags+0xc0>
 8009bf6:	4b4a      	ldr	r3, [pc, #296]	; (8009d20 <tcp_enqueue_flags+0x1dc>)
 8009bf8:	f240 3241 	movw	r2, #833	; 0x341
 8009bfc:	494b      	ldr	r1, [pc, #300]	; (8009d2c <tcp_enqueue_flags+0x1e8>)
 8009bfe:	484a      	ldr	r0, [pc, #296]	; (8009d28 <tcp_enqueue_flags+0x1e4>)
 8009c00:	f003 faf8 	bl	800d1f4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	7ffb      	ldrb	r3, [r7, #31]
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	460b      	mov	r3, r1
 8009c10:	6939      	ldr	r1, [r7, #16]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7ff fadc 	bl	80091d0 <tcp_create_segment>
 8009c18:	60f8      	str	r0, [r7, #12]
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d109      	bne.n	8009c34 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	7e9b      	ldrb	r3, [r3, #26]
 8009c24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c32:	e070      	b.n	8009d16 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	f003 0303 	and.w	r3, r3, #3
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d006      	beq.n	8009c4e <tcp_enqueue_flags+0x10a>
 8009c40:	4b37      	ldr	r3, [pc, #220]	; (8009d20 <tcp_enqueue_flags+0x1dc>)
 8009c42:	f240 3249 	movw	r2, #841	; 0x349
 8009c46:	493a      	ldr	r1, [pc, #232]	; (8009d30 <tcp_enqueue_flags+0x1ec>)
 8009c48:	4837      	ldr	r0, [pc, #220]	; (8009d28 <tcp_enqueue_flags+0x1e4>)
 8009c4a:	f003 fad3 	bl	800d1f4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	891b      	ldrh	r3, [r3, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d006      	beq.n	8009c64 <tcp_enqueue_flags+0x120>
 8009c56:	4b32      	ldr	r3, [pc, #200]	; (8009d20 <tcp_enqueue_flags+0x1dc>)
 8009c58:	f240 324a 	movw	r2, #842	; 0x34a
 8009c5c:	4935      	ldr	r1, [pc, #212]	; (8009d34 <tcp_enqueue_flags+0x1f0>)
 8009c5e:	4832      	ldr	r0, [pc, #200]	; (8009d28 <tcp_enqueue_flags+0x1e4>)
 8009c60:	f003 fac8 	bl	800d1f4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d103      	bne.n	8009c74 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	669a      	str	r2, [r3, #104]	; 0x68
 8009c72:	e00d      	b.n	8009c90 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c78:	61bb      	str	r3, [r7, #24]
 8009c7a:	e002      	b.n	8009c82 <tcp_enqueue_flags+0x13e>
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	61bb      	str	r3, [r7, #24]
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1f8      	bne.n	8009c7c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009c98:	78fb      	ldrb	r3, [r7, #3]
 8009c9a:	f003 0302 	and.w	r3, r3, #2
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d104      	bne.n	8009cac <tcp_enqueue_flags+0x168>
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	f003 0301 	and.w	r3, r3, #1
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d004      	beq.n	8009cb6 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cb0:	1c5a      	adds	r2, r3, #1
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009cb6:	78fb      	ldrb	r3, [r7, #3]
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d006      	beq.n	8009cce <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	7e9b      	ldrb	r3, [r3, #26]
 8009cc4:	f043 0320 	orr.w	r3, r3, #32
 8009cc8:	b2da      	uxtb	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fb f996 	bl	8005004 <pbuf_clen>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	461a      	mov	r2, r3
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ce2:	4413      	add	r3, r2
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00e      	beq.n	8009d14 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <tcp_enqueue_flags+0x1d0>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d106      	bne.n	8009d14 <tcp_enqueue_flags+0x1d0>
 8009d06:	4b06      	ldr	r3, [pc, #24]	; (8009d20 <tcp_enqueue_flags+0x1dc>)
 8009d08:	f240 326d 	movw	r2, #877	; 0x36d
 8009d0c:	490a      	ldr	r1, [pc, #40]	; (8009d38 <tcp_enqueue_flags+0x1f4>)
 8009d0e:	4806      	ldr	r0, [pc, #24]	; (8009d28 <tcp_enqueue_flags+0x1e4>)
 8009d10:	f003 fa70 	bl	800d1f4 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3720      	adds	r7, #32
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	0800f1e0 	.word	0x0800f1e0
 8009d24:	0800f4e4 	.word	0x0800f4e4
 8009d28:	0800f244 	.word	0x0800f244
 8009d2c:	0800f53c 	.word	0x0800f53c
 8009d30:	0800f578 	.word	0x0800f578
 8009d34:	0800f590 	.word	0x0800f590
 8009d38:	0800f5bc 	.word	0x0800f5bc

08009d3c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009d3c:	b590      	push	{r4, r7, lr}
 8009d3e:	b08b      	sub	sp, #44	; 0x2c
 8009d40:	af04      	add	r7, sp, #16
 8009d42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8009d44:	2300      	movs	r3, #0
 8009d46:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009d48:	7dbb      	ldrb	r3, [r7, #22]
 8009d4a:	b29c      	uxth	r4, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7f9 ff74 	bl	8003c3e <lwip_htonl>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2200      	movs	r2, #0
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7ff f97b 	bl	8009058 <tcp_output_alloc_header>
 8009d62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d109      	bne.n	8009d7e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	7e9b      	ldrb	r3, [r3, #26]
 8009d6e:	f043 0303 	orr.w	r3, r3, #3
 8009d72:	b2da      	uxtb	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009d78:	f06f 0301 	mvn.w	r3, #1
 8009d7c:	e036      	b.n	8009dec <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	3304      	adds	r3, #4
 8009d82:	4618      	mov	r0, r3
 8009d84:	f002 f862 	bl	800be4c <ip4_route>
 8009d88:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d102      	bne.n	8009d96 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8009d90:	23fc      	movs	r3, #252	; 0xfc
 8009d92:	75fb      	strb	r3, [r7, #23]
 8009d94:	e012      	b.n	8009dbc <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	1d18      	adds	r0, r3, #4
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	7a9c      	ldrb	r4, [r3, #10]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	7a5b      	ldrb	r3, [r3, #9]
 8009da4:	68fa      	ldr	r2, [r7, #12]
 8009da6:	9202      	str	r2, [sp, #8]
 8009da8:	2206      	movs	r2, #6
 8009daa:	9201      	str	r2, [sp, #4]
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	4623      	mov	r3, r4
 8009db0:	4602      	mov	r2, r0
 8009db2:	6938      	ldr	r0, [r7, #16]
 8009db4:	f002 f9f2 	bl	800c19c <ip4_output_if>
 8009db8:	4603      	mov	r3, r0
 8009dba:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009dbc:	6938      	ldr	r0, [r7, #16]
 8009dbe:	f7fb f88d 	bl	8004edc <pbuf_free>

  if (err != ERR_OK) {
 8009dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d007      	beq.n	8009dda <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	7e9b      	ldrb	r3, [r3, #26]
 8009dce:	f043 0303 	orr.w	r3, r3, #3
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	769a      	strb	r2, [r3, #26]
 8009dd8:	e006      	b.n	8009de8 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	7e9b      	ldrb	r3, [r3, #26]
 8009dde:	f023 0303 	bic.w	r3, r3, #3
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8009de8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	371c      	adds	r7, #28
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd90      	pop	{r4, r7, pc}

08009df4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009df4:	b5b0      	push	{r4, r5, r7, lr}
 8009df6:	b08a      	sub	sp, #40	; 0x28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	7d1b      	ldrb	r3, [r3, #20]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d106      	bne.n	8009e12 <tcp_output+0x1e>
 8009e04:	4b9b      	ldr	r3, [pc, #620]	; (800a074 <tcp_output+0x280>)
 8009e06:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8009e0a:	499b      	ldr	r1, [pc, #620]	; (800a078 <tcp_output+0x284>)
 8009e0c:	489b      	ldr	r0, [pc, #620]	; (800a07c <tcp_output+0x288>)
 8009e0e:	f003 f9f1 	bl	800d1f4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009e12:	4b9b      	ldr	r3, [pc, #620]	; (800a080 <tcp_output+0x28c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d101      	bne.n	8009e20 <tcp_output+0x2c>
    return ERR_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	e1cf      	b.n	800a1c0 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d203      	bcs.n	8009e38 <tcp_output+0x44>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e36:	e002      	b.n	8009e3e <tcp_output+0x4a>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009e3e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e44:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	7e9b      	ldrb	r3, [r3, #26]
 8009e4a:	f003 0302 	and.w	r3, r3, #2
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d017      	beq.n	8009e82 <tcp_output+0x8e>
 8009e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00f      	beq.n	8009e78 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7f9 feed 	bl	8003c3e <lwip_htonl>
 8009e64:	4602      	mov	r2, r0
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6e:	8912      	ldrh	r2, [r2, #8]
 8009e70:	4413      	add	r3, r2
     (seg == NULL ||
 8009e72:	69ba      	ldr	r2, [r7, #24]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d204      	bcs.n	8009e82 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff ff5f 	bl	8009d3c <tcp_send_empty_ack>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	e19e      	b.n	800a1c0 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e86:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d007      	beq.n	8009e9e <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8009e8e:	e002      	b.n	8009e96 <tcp_output+0xa2>
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	623b      	str	r3, [r7, #32]
 8009e96:	6a3b      	ldr	r3, [r7, #32]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1f8      	bne.n	8009e90 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f001 ffd2 	bl	800be4c <ip4_route>
 8009ea8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d102      	bne.n	8009eb6 <tcp_output+0xc2>
    return ERR_RTE;
 8009eb0:	f06f 0303 	mvn.w	r3, #3
 8009eb4:	e184      	b.n	800a1c0 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d003      	beq.n	8009ec4 <tcp_output+0xd0>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d111      	bne.n	8009ee8 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <tcp_output+0xdc>
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	e000      	b.n	8009ed2 <tcp_output+0xde>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d102      	bne.n	8009ee0 <tcp_output+0xec>
      return ERR_RTE;
 8009eda:	f06f 0303 	mvn.w	r3, #3
 8009ede:	e16f      	b.n	800a1c0 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f000 813e 	beq.w	800a16c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7f9 fea1 	bl	8003c3e <lwip_htonl>
 8009efc:	4602      	mov	r2, r0
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f06:	8912      	ldrh	r2, [r2, #8]
 8009f08:	4413      	add	r3, r2
  if (seg != NULL &&
 8009f0a:	69ba      	ldr	r2, [r7, #24]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	f080 812d 	bcs.w	800a16c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 8129 	beq.w	800a16c <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f20:	461a      	mov	r2, r3
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	4293      	cmp	r3, r2
 8009f26:	f040 8121 	bne.w	800a16c <tcp_output+0x378>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f040 811c 	bne.w	800a16c <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f040 812b 	bne.w	800a196 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8009f50:	e121      	b.n	800a196 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	899b      	ldrh	r3, [r3, #12]
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7f9 fe61 	bl	8003c22 <lwip_htons>
 8009f60:	4603      	mov	r3, r0
 8009f62:	f003 0304 	and.w	r3, r3, #4
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d006      	beq.n	8009f78 <tcp_output+0x184>
 8009f6a:	4b42      	ldr	r3, [pc, #264]	; (800a074 <tcp_output+0x280>)
 8009f6c:	f240 4246 	movw	r2, #1094	; 0x446
 8009f70:	4944      	ldr	r1, [pc, #272]	; (800a084 <tcp_output+0x290>)
 8009f72:	4842      	ldr	r0, [pc, #264]	; (800a07c <tcp_output+0x288>)
 8009f74:	f003 f93e 	bl	800d1f4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d01f      	beq.n	8009fc0 <tcp_output+0x1cc>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	7e9b      	ldrb	r3, [r3, #26]
 8009f84:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d119      	bne.n	8009fc0 <tcp_output+0x1cc>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d00b      	beq.n	8009fac <tcp_output+0x1b8>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d110      	bne.n	8009fc0 <tcp_output+0x1cc>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fa2:	891a      	ldrh	r2, [r3, #8]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d209      	bcs.n	8009fc0 <tcp_output+0x1cc>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d004      	beq.n	8009fc0 <tcp_output+0x1cc>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fbc:	2b0f      	cmp	r3, #15
 8009fbe:	d901      	bls.n	8009fc4 <tcp_output+0x1d0>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e000      	b.n	8009fc6 <tcp_output+0x1d2>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d106      	bne.n	8009fd8 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	7e9b      	ldrb	r3, [r3, #26]
 8009fce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f000 80e1 	beq.w	800a19a <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	7d1b      	ldrb	r3, [r3, #20]
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d00d      	beq.n	8009ffc <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	899b      	ldrh	r3, [r3, #12]
 8009fe6:	b29c      	uxth	r4, r3
 8009fe8:	2010      	movs	r0, #16
 8009fea:	f7f9 fe1a 	bl	8003c22 <lwip_htons>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	4322      	orrs	r2, r4
 8009ff8:	b292      	uxth	r2, r2
 8009ffa:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	6879      	ldr	r1, [r7, #4]
 800a000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a002:	f000 f8e1 	bl	800a1c8 <tcp_output_segment>
 800a006:	4603      	mov	r3, r0
 800a008:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a00a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d009      	beq.n	800a026 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	7e9b      	ldrb	r3, [r3, #26]
 800a016:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a01a:	b2da      	uxtb	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	769a      	strb	r2, [r3, #26]
      return err;
 800a020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a024:	e0cc      	b.n	800a1c0 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800a026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	7d1b      	ldrb	r3, [r3, #20]
 800a032:	2b02      	cmp	r3, #2
 800a034:	d006      	beq.n	800a044 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	7e9b      	ldrb	r3, [r3, #26]
 800a03a:	f023 0303 	bic.w	r3, r3, #3
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7f9 fdf7 	bl	8003c3e <lwip_htonl>
 800a050:	4604      	mov	r4, r0
 800a052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a054:	891b      	ldrh	r3, [r3, #8]
 800a056:	461d      	mov	r5, r3
 800a058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	899b      	ldrh	r3, [r3, #12]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	4618      	mov	r0, r3
 800a062:	f7f9 fdde 	bl	8003c22 <lwip_htons>
 800a066:	4603      	mov	r3, r0
 800a068:	f003 0303 	and.w	r3, r3, #3
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <tcp_output+0x294>
 800a070:	2301      	movs	r3, #1
 800a072:	e00a      	b.n	800a08a <tcp_output+0x296>
 800a074:	0800f1e0 	.word	0x0800f1e0
 800a078:	0800f5e4 	.word	0x0800f5e4
 800a07c:	0800f244 	.word	0x0800f244
 800a080:	2000c6dc 	.word	0x2000c6dc
 800a084:	0800f60c 	.word	0x0800f60c
 800a088:	2300      	movs	r3, #0
 800a08a:	442b      	add	r3, r5
 800a08c:	4423      	add	r3, r4
 800a08e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	2b00      	cmp	r3, #0
 800a09a:	da02      	bge.n	800a0a2 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	891b      	ldrh	r3, [r3, #8]
 800a0a6:	461c      	mov	r4, r3
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	899b      	ldrh	r3, [r3, #12]
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7f9 fdb6 	bl	8003c22 <lwip_htons>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	f003 0303 	and.w	r3, r3, #3
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <tcp_output+0x2d0>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e000      	b.n	800a0c6 <tcp_output+0x2d2>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	4423      	add	r3, r4
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d049      	beq.n	800a160 <tcp_output+0x36c>
      seg->next = NULL;
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d105      	bne.n	800a0e6 <tcp_output+0x2f2>
        pcb->unacked = seg;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0de:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e2:	623b      	str	r3, [r7, #32]
 800a0e4:	e03f      	b.n	800a166 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7f9 fda6 	bl	8003c3e <lwip_htonl>
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7f9 fd9f 	bl	8003c3e <lwip_htonl>
 800a100:	4603      	mov	r3, r0
 800a102:	1ae3      	subs	r3, r4, r3
 800a104:	2b00      	cmp	r3, #0
 800a106:	da24      	bge.n	800a152 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	336c      	adds	r3, #108	; 0x6c
 800a10c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a10e:	e002      	b.n	800a116 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800a110:	69fb      	ldr	r3, [r7, #28]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d011      	beq.n	800a142 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	4618      	mov	r0, r3
 800a128:	f7f9 fd89 	bl	8003c3e <lwip_htonl>
 800a12c:	4604      	mov	r4, r0
 800a12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	4618      	mov	r0, r3
 800a136:	f7f9 fd82 	bl	8003c3e <lwip_htonl>
 800a13a:	4603      	mov	r3, r0
 800a13c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a13e:	2b00      	cmp	r3, #0
 800a140:	dbe6      	blt.n	800a110 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14e:	601a      	str	r2, [r3, #0]
 800a150:	e009      	b.n	800a166 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a156:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	623b      	str	r3, [r7, #32]
 800a15e:	e002      	b.n	800a166 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a160:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a162:	f7fc f9a7 	bl	80064b4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a16a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d015      	beq.n	800a19e <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	4618      	mov	r0, r3
 800a17a:	f7f9 fd60 	bl	8003c3e <lwip_htonl>
 800a17e:	4602      	mov	r2, r0
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a188:	8912      	ldrh	r2, [r2, #8]
 800a18a:	4413      	add	r3, r2
  while (seg != NULL &&
 800a18c:	69ba      	ldr	r2, [r7, #24]
 800a18e:	429a      	cmp	r2, r3
 800a190:	f4bf aedf 	bcs.w	8009f52 <tcp_output+0x15e>
  }
output_done:
 800a194:	e003      	b.n	800a19e <tcp_output+0x3aa>
    goto output_done;
 800a196:	bf00      	nop
 800a198:	e002      	b.n	800a1a0 <tcp_output+0x3ac>
      break;
 800a19a:	bf00      	nop
 800a19c:	e000      	b.n	800a1a0 <tcp_output+0x3ac>
output_done:
 800a19e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d103      	bne.n	800a1b0 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	7e9b      	ldrb	r3, [r3, #26]
 800a1b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3728      	adds	r7, #40	; 0x28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bdb0      	pop	{r4, r5, r7, pc}

0800a1c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800a1c8:	b5b0      	push	{r4, r5, r7, lr}
 800a1ca:	b08c      	sub	sp, #48	; 0x30
 800a1cc:	af04      	add	r7, sp, #16
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	89db      	ldrh	r3, [r3, #14]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d001      	beq.n	800a1e2 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	e08b      	b.n	800a2fa <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	68dc      	ldr	r4, [r3, #12]
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	f7f9 fd27 	bl	8003c3e <lwip_htonl>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	68dc      	ldr	r4, [r3, #12]
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	f7f9 fd10 	bl	8003c22 <lwip_htons>
 800a202:	4603      	mov	r3, r0
 800a204:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a20e:	441a      	add	r2, r3
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	3314      	adds	r3, #20
 800a21a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	7a9b      	ldrb	r3, [r3, #10]
 800a220:	f003 0301 	and.w	r3, r3, #1
 800a224:	2b00      	cmp	r3, #0
 800a226:	d014      	beq.n	800a252 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	3304      	adds	r3, #4
 800a22c:	4619      	mov	r1, r3
 800a22e:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800a232:	f7fc fc73 	bl	8006b1c <tcp_eff_send_mss_impl>
 800a236:	4603      	mov	r3, r0
 800a238:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a23a:	8b7b      	ldrh	r3, [r7, #26]
 800a23c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a240:	4618      	mov	r0, r3
 800a242:	f7f9 fcfc 	bl	8003c3e <lwip_htonl>
 800a246:	4602      	mov	r2, r0
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	3304      	adds	r3, #4
 800a250:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a258:	2b00      	cmp	r3, #0
 800a25a:	da02      	bge.n	800a262 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2200      	movs	r2, #0
 800a260:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10c      	bne.n	800a284 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800a26a:	4b26      	ldr	r3, [pc, #152]	; (800a304 <tcp_output_segment+0x13c>)
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	4618      	mov	r0, r3
 800a27a:	f7f9 fce0 	bl	8003c3e <lwip_htonl>
 800a27e:	4602      	mov	r2, r0
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	461a      	mov	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	1ad3      	subs	r3, r2, r3
 800a292:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	8959      	ldrh	r1, [r3, #10]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	8b3a      	ldrh	r2, [r7, #24]
 800a2a0:	1a8a      	subs	r2, r1, r2
 800a2a2:	b292      	uxth	r2, r2
 800a2a4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	8919      	ldrh	r1, [r3, #8]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	8b3a      	ldrh	r2, [r7, #24]
 800a2b2:	1a8a      	subs	r2, r1, r2
 800a2b4:	b292      	uxth	r2, r2
 800a2b6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	68d2      	ldr	r2, [r2, #12]
 800a2c0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	741a      	strb	r2, [r3, #16]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6858      	ldr	r0, [r3, #4]
 800a2d2:	68b9      	ldr	r1, [r7, #8]
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	1d1c      	adds	r4, r3, #4
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	7a9d      	ldrb	r5, [r3, #10]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	7a5b      	ldrb	r3, [r3, #9]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	9202      	str	r2, [sp, #8]
 800a2e4:	2206      	movs	r2, #6
 800a2e6:	9201      	str	r2, [sp, #4]
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	4622      	mov	r2, r4
 800a2ee:	f001 ff55 	bl	800c19c <ip4_output_if>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800a2f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3720      	adds	r7, #32
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bdb0      	pop	{r4, r5, r7, pc}
 800a302:	bf00      	nop
 800a304:	2000c6cc 	.word	0x2000c6cc

0800a308 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08c      	sub	sp, #48	; 0x30
 800a30c:	af04      	add	r7, sp, #16
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800a316:	2200      	movs	r2, #0
 800a318:	2114      	movs	r1, #20
 800a31a:	2001      	movs	r0, #1
 800a31c:	f7fa fa6a 	bl	80047f4 <pbuf_alloc>
 800a320:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d05b      	beq.n	800a3e0 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	895b      	ldrh	r3, [r3, #10]
 800a32c:	2b13      	cmp	r3, #19
 800a32e:	d806      	bhi.n	800a33e <tcp_rst+0x36>
 800a330:	4b2d      	ldr	r3, [pc, #180]	; (800a3e8 <tcp_rst+0xe0>)
 800a332:	f240 524d 	movw	r2, #1357	; 0x54d
 800a336:	492d      	ldr	r1, [pc, #180]	; (800a3ec <tcp_rst+0xe4>)
 800a338:	482d      	ldr	r0, [pc, #180]	; (800a3f0 <tcp_rst+0xe8>)
 800a33a:	f002 ff5b 	bl	800d1f4 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800a344:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a346:	4618      	mov	r0, r3
 800a348:	f7f9 fc6b 	bl	8003c22 <lwip_htons>
 800a34c:	4603      	mov	r3, r0
 800a34e:	461a      	mov	r2, r3
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800a354:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a356:	4618      	mov	r0, r3
 800a358:	f7f9 fc63 	bl	8003c22 <lwip_htons>
 800a35c:	4603      	mov	r3, r0
 800a35e:	461a      	mov	r2, r3
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f7f9 fc6a 	bl	8003c3e <lwip_htonl>
 800a36a:	4602      	mov	r2, r0
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800a370:	68b8      	ldr	r0, [r7, #8]
 800a372:	f7f9 fc64 	bl	8003c3e <lwip_htonl>
 800a376:	4602      	mov	r2, r0
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800a37c:	f245 0014 	movw	r0, #20500	; 0x5014
 800a380:	f7f9 fc4f 	bl	8003c22 <lwip_htons>
 800a384:	4603      	mov	r3, r0
 800a386:	461a      	mov	r2, r3
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	2200      	movs	r2, #0
 800a390:	f042 0216 	orr.w	r2, r2, #22
 800a394:	739a      	strb	r2, [r3, #14]
 800a396:	2200      	movs	r2, #0
 800a398:	f062 022f 	orn	r2, r2, #47	; 0x2f
 800a39c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	741a      	strb	r2, [r3, #16]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800a3a8:	69bb      	ldr	r3, [r7, #24]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	749a      	strb	r2, [r3, #18]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800a3b2:	6838      	ldr	r0, [r7, #0]
 800a3b4:	f001 fd4a 	bl	800be4c <ip4_route>
 800a3b8:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00b      	beq.n	800a3d8 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	9302      	str	r3, [sp, #8]
 800a3c4:	2306      	movs	r3, #6
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	23ff      	movs	r3, #255	; 0xff
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	69f8      	ldr	r0, [r7, #28]
 800a3d4:	f001 fee2 	bl	800c19c <ip4_output_if>
  }
  pbuf_free(p);
 800a3d8:	69f8      	ldr	r0, [r7, #28]
 800a3da:	f7fa fd7f 	bl	8004edc <pbuf_free>
 800a3de:	e000      	b.n	800a3e2 <tcp_rst+0xda>
    return;
 800a3e0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a3e2:	3720      	adds	r7, #32
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	0800f1e0 	.word	0x0800f1e0
 800a3ec:	0800f214 	.word	0x0800f214
 800a3f0:	0800f244 	.word	0x0800f244

0800a3f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a400:	2b00      	cmp	r3, #0
 800a402:	d029      	beq.n	800a458 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	e002      	b.n	800a412 <tcp_rexmit_rto+0x1e>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	60fb      	str	r3, [r7, #12]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1f8      	bne.n	800a40c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a436:	2bff      	cmp	r3, #255	; 0xff
 800a438:	d007      	beq.n	800a44a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a440:	3301      	adds	r3, #1
 800a442:	b2da      	uxtb	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2200      	movs	r2, #0
 800a44e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f7ff fccf 	bl	8009df4 <tcp_output>
 800a456:	e000      	b.n	800a45a <tcp_rexmit_rto+0x66>
    return;
 800a458:	bf00      	nop
}
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a460:	b590      	push	{r4, r7, lr}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d043      	beq.n	800a4f8 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a474:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3368      	adds	r3, #104	; 0x68
 800a482:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a484:	e002      	b.n	800a48c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d011      	beq.n	800a4b8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7f9 fbce 	bl	8003c3e <lwip_htonl>
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	68db      	ldr	r3, [r3, #12]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7f9 fbc7 	bl	8003c3e <lwip_htonl>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	dbe6      	blt.n	800a486 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d103      	bne.n	800a4d6 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4dc:	2bff      	cmp	r3, #255	; 0xff
 800a4de:	d007      	beq.n	800a4f0 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	635a      	str	r2, [r3, #52]	; 0x34
 800a4f6:	e000      	b.n	800a4fa <tcp_rexmit+0x9a>
    return;
 800a4f8:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd90      	pop	{r4, r7, pc}

0800a500 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d04a      	beq.n	800a5a6 <tcp_rexmit_fast+0xa6>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	7e9b      	ldrb	r3, [r3, #26]
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d144      	bne.n	800a5a6 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f7ff ff9f 	bl	800a460 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a52e:	429a      	cmp	r2, r3
 800a530:	d207      	bcs.n	800a542 <tcp_rexmit_fast+0x42>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a538:	0fda      	lsrs	r2, r3, #31
 800a53a:	4413      	add	r3, r2
 800a53c:	105b      	asrs	r3, r3, #1
 800a53e:	b29b      	uxth	r3, r3
 800a540:	e006      	b.n	800a550 <tcp_rexmit_fast+0x50>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a548:	0fda      	lsrs	r2, r3, #31
 800a54a:	4413      	add	r3, r2
 800a54c:	105b      	asrs	r3, r3, #1
 800a54e:	b29b      	uxth	r3, r3
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a55c:	461a      	mov	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a562:	005b      	lsls	r3, r3, #1
 800a564:	429a      	cmp	r2, r3
 800a566:	d206      	bcs.n	800a576 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a56c:	005b      	lsls	r3, r3, #1
 800a56e:	b29a      	uxth	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a580:	4619      	mov	r1, r3
 800a582:	0049      	lsls	r1, r1, #1
 800a584:	440b      	add	r3, r1
 800a586:	b29b      	uxth	r3, r3
 800a588:	4413      	add	r3, r2
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	7e9b      	ldrb	r3, [r3, #26]
 800a596:	f043 0304 	orr.w	r3, r3, #4
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800a5a6:	bf00      	nop
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b08a      	sub	sp, #40	; 0x28
 800a5b2:	af04      	add	r7, sp, #16
 800a5b4:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7f9 fb3e 	bl	8003c3e <lwip_htonl>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7fe fd45 	bl	8009058 <tcp_output_alloc_header>
 800a5ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d102      	bne.n	800a5dc <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5da:	e021      	b.n	800a620 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3304      	adds	r3, #4
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f001 fc33 	bl	800be4c <ip4_route>
 800a5e6:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d102      	bne.n	800a5f4 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800a5ee:	23fc      	movs	r3, #252	; 0xfc
 800a5f0:	75fb      	strb	r3, [r7, #23]
 800a5f2:	e010      	b.n	800a616 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800a5f4:	6879      	ldr	r1, [r7, #4]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	1d1a      	adds	r2, r3, #4
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	7a98      	ldrb	r0, [r3, #10]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	9302      	str	r3, [sp, #8]
 800a602:	2306      	movs	r3, #6
 800a604:	9301      	str	r3, [sp, #4]
 800a606:	2300      	movs	r3, #0
 800a608:	9300      	str	r3, [sp, #0]
 800a60a:	4603      	mov	r3, r0
 800a60c:	6938      	ldr	r0, [r7, #16]
 800a60e:	f001 fdc5 	bl	800c19c <ip4_output_if>
 800a612:	4603      	mov	r3, r0
 800a614:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a616:	6938      	ldr	r0, [r7, #16]
 800a618:	f7fa fc60 	bl	8004edc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a61c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a628:	b590      	push	{r4, r7, lr}
 800a62a:	b08f      	sub	sp, #60	; 0x3c
 800a62c:	af04      	add	r7, sp, #16
 800a62e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a634:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800a636:	6a3b      	ldr	r3, [r7, #32]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d102      	bne.n	800a642 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a640:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800a648:	2300      	movs	r3, #0
 800a64a:	e085      	b.n	800a758 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a64c:	6a3b      	ldr	r3, [r7, #32]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	899b      	ldrh	r3, [r3, #12]
 800a652:	b29b      	uxth	r3, r3
 800a654:	4618      	mov	r0, r3
 800a656:	f7f9 fae4 	bl	8003c22 <lwip_htons>
 800a65a:	4603      	mov	r3, r0
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	d005      	beq.n	800a670 <tcp_zero_window_probe+0x48>
 800a664:	6a3b      	ldr	r3, [r7, #32]
 800a666:	891b      	ldrh	r3, [r3, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <tcp_zero_window_probe+0x48>
 800a66c:	2301      	movs	r3, #1
 800a66e:	e000      	b.n	800a672 <tcp_zero_window_probe+0x4a>
 800a670:	2300      	movs	r3, #0
 800a672:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a674:	7ffb      	ldrb	r3, [r7, #31]
 800a676:	2b00      	cmp	r3, #0
 800a678:	bf0c      	ite	eq
 800a67a:	2301      	moveq	r3, #1
 800a67c:	2300      	movne	r3, #0
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	8bba      	ldrh	r2, [r7, #28]
 800a68a:	2100      	movs	r1, #0
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f7fe fce3 	bl	8009058 <tcp_output_alloc_header>
 800a692:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d102      	bne.n	800a6a0 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a69a:	f04f 33ff 	mov.w	r3, #4294967295
 800a69e:	e05b      	b.n	800a758 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a6a6:	7ffb      	ldrb	r3, [r7, #31]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00e      	beq.n	800a6ca <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	899b      	ldrh	r3, [r3, #12]
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6b6:	b29c      	uxth	r4, r3
 800a6b8:	2011      	movs	r0, #17
 800a6ba:	f7f9 fab2 	bl	8003c22 <lwip_htons>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	4323      	orrs	r3, r4
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	819a      	strh	r2, [r3, #12]
 800a6c8:	e010      	b.n	800a6ec <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	3314      	adds	r3, #20
 800a6d0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a6d2:	6a3b      	ldr	r3, [r7, #32]
 800a6d4:	6858      	ldr	r0, [r3, #4]
 800a6d6:	6a3b      	ldr	r3, [r7, #32]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	891a      	ldrh	r2, [r3, #8]
 800a6dc:	6a3b      	ldr	r3, [r7, #32]
 800a6de:	891b      	ldrh	r3, [r3, #8]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	6939      	ldr	r1, [r7, #16]
 800a6e8:	f7fa fdf8 	bl	80052dc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7f9 faa3 	bl	8003c3e <lwip_htonl>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	2b00      	cmp	r3, #0
 800a708:	da02      	bge.n	800a710 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3304      	adds	r3, #4
 800a714:	4618      	mov	r0, r3
 800a716:	f001 fb99 	bl	800be4c <ip4_route>
 800a71a:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d103      	bne.n	800a72a <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800a722:	23fc      	movs	r3, #252	; 0xfc
 800a724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a728:	e011      	b.n	800a74e <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a72a:	6879      	ldr	r1, [r7, #4]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	1d1a      	adds	r2, r3, #4
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	7a98      	ldrb	r0, [r3, #10]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	9302      	str	r3, [sp, #8]
 800a738:	2306      	movs	r3, #6
 800a73a:	9301      	str	r3, [sp, #4]
 800a73c:	2300      	movs	r3, #0
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	4603      	mov	r3, r0
 800a742:	69b8      	ldr	r0, [r7, #24]
 800a744:	f001 fd2a 	bl	800c19c <ip4_output_if>
 800a748:	4603      	mov	r3, r0
 800a74a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800a74e:	69b8      	ldr	r0, [r7, #24]
 800a750:	f7fa fbc4 	bl	8004edc <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a758:	4618      	mov	r0, r3
 800a75a:	372c      	adds	r7, #44	; 0x2c
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd90      	pop	{r4, r7, pc}

0800a760 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800a768:	f7fa fe3a 	bl	80053e0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a76c:	4b0a      	ldr	r3, [pc, #40]	; (800a798 <tcpip_tcp_timer+0x38>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d103      	bne.n	800a77c <tcpip_tcp_timer+0x1c>
 800a774:	4b09      	ldr	r3, [pc, #36]	; (800a79c <tcpip_tcp_timer+0x3c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d005      	beq.n	800a788 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a77c:	2200      	movs	r2, #0
 800a77e:	4908      	ldr	r1, [pc, #32]	; (800a7a0 <tcpip_tcp_timer+0x40>)
 800a780:	20fa      	movs	r0, #250	; 0xfa
 800a782:	f000 f86f 	bl	800a864 <sys_timeout>
 800a786:	e002      	b.n	800a78e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800a788:	4b06      	ldr	r3, [pc, #24]	; (800a7a4 <tcpip_tcp_timer+0x44>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]
  }
}
 800a78e:	bf00      	nop
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	2000c6c8 	.word	0x2000c6c8
 800a79c:	2000c6d8 	.word	0x2000c6d8
 800a7a0:	0800a761 	.word	0x0800a761
 800a7a4:	20000100 	.word	0x20000100

0800a7a8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a7ac:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <tcp_timer_needed+0x30>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10f      	bne.n	800a7d4 <tcp_timer_needed+0x2c>
 800a7b4:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <tcp_timer_needed+0x34>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d103      	bne.n	800a7c4 <tcp_timer_needed+0x1c>
 800a7bc:	4b08      	ldr	r3, [pc, #32]	; (800a7e0 <tcp_timer_needed+0x38>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d007      	beq.n	800a7d4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800a7c4:	4b04      	ldr	r3, [pc, #16]	; (800a7d8 <tcp_timer_needed+0x30>)
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	4905      	ldr	r1, [pc, #20]	; (800a7e4 <tcp_timer_needed+0x3c>)
 800a7ce:	20fa      	movs	r0, #250	; 0xfa
 800a7d0:	f000 f848 	bl	800a864 <sys_timeout>
  }
}
 800a7d4:	bf00      	nop
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20000100 	.word	0x20000100
 800a7dc:	2000c6c8 	.word	0x2000c6c8
 800a7e0:	2000c6d8 	.word	0x2000c6d8
 800a7e4:	0800a761 	.word	0x0800a761

0800a7e8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	4903      	ldr	r1, [pc, #12]	; (800a810 <cyclic_timer+0x28>)
 800a802:	4618      	mov	r0, r3
 800a804:	f000 f82e 	bl	800a864 <sys_timeout>
}
 800a808:	bf00      	nop
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	0800a7e9 	.word	0x0800a7e9

0800a814 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a81a:	2301      	movs	r3, #1
 800a81c:	607b      	str	r3, [r7, #4]
 800a81e:	e00e      	b.n	800a83e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a820:	4a0d      	ldr	r2, [pc, #52]	; (800a858 <sys_timeouts_init+0x44>)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	00db      	lsls	r3, r3, #3
 800a82c:	4a0a      	ldr	r2, [pc, #40]	; (800a858 <sys_timeouts_init+0x44>)
 800a82e:	4413      	add	r3, r2
 800a830:	461a      	mov	r2, r3
 800a832:	490a      	ldr	r1, [pc, #40]	; (800a85c <sys_timeouts_init+0x48>)
 800a834:	f000 f816 	bl	800a864 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3301      	adds	r3, #1
 800a83c:	607b      	str	r3, [r7, #4]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2b02      	cmp	r3, #2
 800a842:	d9ed      	bls.n	800a820 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800a844:	f7f8 ff2c 	bl	80036a0 <sys_now>
 800a848:	4602      	mov	r2, r0
 800a84a:	4b05      	ldr	r3, [pc, #20]	; (800a860 <sys_timeouts_init+0x4c>)
 800a84c:	601a      	str	r2, [r3, #0]
}
 800a84e:	bf00      	nop
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	0800fea8 	.word	0x0800fea8
 800a85c:	0800a7e9 	.word	0x0800a7e9
 800a860:	200000fc 	.word	0x200000fc

0800a864 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b088      	sub	sp, #32
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a870:	2006      	movs	r0, #6
 800a872:	f7f9 fd8b 	bl	800438c <memp_malloc>
 800a876:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10a      	bne.n	800a894 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2b00      	cmp	r3, #0
 800a882:	f040 8084 	bne.w	800a98e <sys_timeout+0x12a>
 800a886:	4b44      	ldr	r3, [pc, #272]	; (800a998 <sys_timeout+0x134>)
 800a888:	22d4      	movs	r2, #212	; 0xd4
 800a88a:	4944      	ldr	r1, [pc, #272]	; (800a99c <sys_timeout+0x138>)
 800a88c:	4844      	ldr	r0, [pc, #272]	; (800a9a0 <sys_timeout+0x13c>)
 800a88e:	f002 fcb1 	bl	800d1f4 <iprintf>
    return;
 800a892:	e07c      	b.n	800a98e <sys_timeout+0x12a>
  }

  now = sys_now();
 800a894:	f7f8 ff04 	bl	80036a0 <sys_now>
 800a898:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800a89a:	4b42      	ldr	r3, [pc, #264]	; (800a9a4 <sys_timeout+0x140>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d105      	bne.n	800a8ae <sys_timeout+0x4a>
    diff = 0;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800a8a6:	4a40      	ldr	r2, [pc, #256]	; (800a9a8 <sys_timeout+0x144>)
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	6013      	str	r3, [r2, #0]
 800a8ac:	e004      	b.n	800a8b8 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800a8ae:	4b3e      	ldr	r3, [pc, #248]	; (800a9a8 <sys_timeout+0x144>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	441a      	add	r2, r3
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800a8d4:	4b33      	ldr	r3, [pc, #204]	; (800a9a4 <sys_timeout+0x140>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d103      	bne.n	800a8e4 <sys_timeout+0x80>
    next_timeout = timeout;
 800a8dc:	4a31      	ldr	r2, [pc, #196]	; (800a9a4 <sys_timeout+0x140>)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	6013      	str	r3, [r2, #0]
    return;
 800a8e2:	e055      	b.n	800a990 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800a8e4:	4b2f      	ldr	r3, [pc, #188]	; (800a9a4 <sys_timeout+0x140>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d20f      	bcs.n	800a910 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800a8f0:	4b2c      	ldr	r3, [pc, #176]	; (800a9a4 <sys_timeout+0x140>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6859      	ldr	r1, [r3, #4]
 800a8f6:	4b2b      	ldr	r3, [pc, #172]	; (800a9a4 <sys_timeout+0x140>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	1a8a      	subs	r2, r1, r2
 800a8fe:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800a900:	4b28      	ldr	r3, [pc, #160]	; (800a9a4 <sys_timeout+0x140>)
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800a908:	4a26      	ldr	r2, [pc, #152]	; (800a9a4 <sys_timeout+0x140>)
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	6013      	str	r3, [r2, #0]
 800a90e:	e03f      	b.n	800a990 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800a910:	4b24      	ldr	r3, [pc, #144]	; (800a9a4 <sys_timeout+0x140>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	61fb      	str	r3, [r7, #28]
 800a916:	e036      	b.n	800a986 <sys_timeout+0x122>
      timeout->time -= t->time;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	685a      	ldr	r2, [r3, #4]
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	1ad2      	subs	r2, r2, r3
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d006      	beq.n	800a93c <sys_timeout+0xd8>
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d921      	bls.n	800a980 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d009      	beq.n	800a958 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6859      	ldr	r1, [r3, #4]
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	685a      	ldr	r2, [r3, #4]
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	1a8a      	subs	r2, r1, r2
 800a954:	605a      	str	r2, [r3, #4]
 800a956:	e00b      	b.n	800a970 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d206      	bcs.n	800a970 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800a962:	4b10      	ldr	r3, [pc, #64]	; (800a9a4 <sys_timeout+0x140>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	441a      	add	r2, r3
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	601a      	str	r2, [r3, #0]
        break;
 800a97e:	e007      	b.n	800a990 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	61fb      	str	r3, [r7, #28]
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1c5      	bne.n	800a918 <sys_timeout+0xb4>
 800a98c:	e000      	b.n	800a990 <sys_timeout+0x12c>
    return;
 800a98e:	bf00      	nop
      }
    }
  }
}
 800a990:	3720      	adds	r7, #32
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	0800f624 	.word	0x0800f624
 800a99c:	0800f658 	.word	0x0800f658
 800a9a0:	0800f698 	.word	0x0800f698
 800a9a4:	200000f8 	.word	0x200000f8
 800a9a8:	200000fc 	.word	0x200000fc

0800a9ac <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800a9b2:	4b24      	ldr	r3, [pc, #144]	; (800aa44 <sys_check_timeouts+0x98>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d040      	beq.n	800aa3c <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800a9ba:	f7f8 fe71 	bl	80036a0 <sys_now>
 800a9be:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800a9c0:	4b21      	ldr	r3, [pc, #132]	; (800aa48 <sys_check_timeouts+0x9c>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 800a9ca:	4b20      	ldr	r3, [pc, #128]	; (800aa4c <sys_check_timeouts+0xa0>)
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d001      	beq.n	800a9d8 <sys_check_timeouts+0x2c>
 800a9d4:	f7f9 fede 	bl	8004794 <pbuf_free_ooseq>
      had_one = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800a9dc:	4b19      	ldr	r3, [pc, #100]	; (800aa44 <sys_check_timeouts+0x98>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d026      	beq.n	800aa36 <sys_check_timeouts+0x8a>
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d321      	bcc.n	800aa36 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	4b13      	ldr	r3, [pc, #76]	; (800aa48 <sys_check_timeouts+0x9c>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4413      	add	r3, r2
 800aa00:	4a11      	ldr	r2, [pc, #68]	; (800aa48 <sys_check_timeouts+0x9c>)
 800aa02:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a0c      	ldr	r2, [pc, #48]	; (800aa44 <sys_check_timeouts+0x98>)
 800aa14:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800aa22:	68b9      	ldr	r1, [r7, #8]
 800aa24:	2006      	movs	r0, #6
 800aa26:	f7f9 fcfd 	bl	8004424 <memp_free>
        if (handler != NULL) {
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d002      	beq.n	800aa36 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6838      	ldr	r0, [r7, #0]
 800aa34:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800aa36:	7cfb      	ldrb	r3, [r7, #19]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1c6      	bne.n	800a9ca <sys_check_timeouts+0x1e>
  }
}
 800aa3c:	bf00      	nop
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	200000f8 	.word	0x200000f8
 800aa48:	200000fc 	.word	0x200000fc
 800aa4c:	2000c6c0 	.word	0x2000c6c0

0800aa50 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800aa50:	b480      	push	{r7}
 800aa52:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800aa54:	bf00      	nop
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
	...

0800aa60 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800aa6e:	79fb      	ldrb	r3, [r7, #7]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d018      	beq.n	800aaa6 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d013      	beq.n	800aaa2 <udp_input_local_match+0x42>
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00f      	beq.n	800aaa2 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800aa82:	4b14      	ldr	r3, [pc, #80]	; (800aad4 <udp_input_local_match+0x74>)
 800aa84:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800aa86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa8a:	d00a      	beq.n	800aaa2 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	4b10      	ldr	r3, [pc, #64]	; (800aad4 <udp_input_local_match+0x74>)
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	405a      	eors	r2, r3
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	3308      	adds	r3, #8
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d110      	bne.n	800aac4 <udp_input_local_match+0x64>
          return 1;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e00f      	b.n	800aac6 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d009      	beq.n	800aac0 <udp_input_local_match+0x60>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d005      	beq.n	800aac0 <udp_input_local_match+0x60>
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	4b06      	ldr	r3, [pc, #24]	; (800aad4 <udp_input_local_match+0x74>)
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d101      	bne.n	800aac4 <udp_input_local_match+0x64>
      return 1;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e000      	b.n	800aac6 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	200033f8 	.word	0x200033f8

0800aad8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800aad8:	b590      	push	{r4, r7, lr}
 800aada:	b08d      	sub	sp, #52	; 0x34
 800aadc:	af02      	add	r7, sp, #8
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	895b      	ldrh	r3, [r3, #10]
 800aaea:	2b07      	cmp	r3, #7
 800aaec:	d803      	bhi.n	800aaf6 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f7fa f9f4 	bl	8004edc <pbuf_free>
    goto end;
 800aaf4:	e0c6      	b.n	800ac84 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800aafc:	4b63      	ldr	r3, [pc, #396]	; (800ac8c <udp_input+0x1b4>)
 800aafe:	695a      	ldr	r2, [r3, #20]
 800ab00:	4b62      	ldr	r3, [pc, #392]	; (800ac8c <udp_input+0x1b4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4619      	mov	r1, r3
 800ab06:	4610      	mov	r0, r2
 800ab08:	f001 fc1a 	bl	800c340 <ip4_addr_isbroadcast_u32>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	881b      	ldrh	r3, [r3, #0]
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7f9 f883 	bl	8003c22 <lwip_htons>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	885b      	ldrh	r3, [r3, #2]
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7f9 f87b 	bl	8003c22 <lwip_htons>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ab30:	2300      	movs	r3, #0
 800ab32:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ab34:	2300      	movs	r3, #0
 800ab36:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab3c:	4b54      	ldr	r3, [pc, #336]	; (800ac90 <udp_input+0x1b8>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	627b      	str	r3, [r7, #36]	; 0x24
 800ab42:	e03b      	b.n	800abbc <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	8a5b      	ldrh	r3, [r3, #18]
 800ab48:	89fa      	ldrh	r2, [r7, #14]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d131      	bne.n	800abb2 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ab4e:	7cfb      	ldrb	r3, [r7, #19]
 800ab50:	461a      	mov	r2, r3
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab56:	f7ff ff83 	bl	800aa60 <udp_input_local_match>
 800ab5a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d028      	beq.n	800abb2 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	7c1b      	ldrb	r3, [r3, #16]
 800ab64:	f003 0304 	and.w	r3, r3, #4
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d104      	bne.n	800ab76 <udp_input+0x9e>
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ab76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab78:	8a9b      	ldrh	r3, [r3, #20]
 800ab7a:	8a3a      	ldrh	r2, [r7, #16]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d118      	bne.n	800abb2 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ab80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab82:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d005      	beq.n	800ab94 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ab88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	4b3f      	ldr	r3, [pc, #252]	; (800ac8c <udp_input+0x1b4>)
 800ab8e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d10e      	bne.n	800abb2 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ab94:	6a3b      	ldr	r3, [r7, #32]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d014      	beq.n	800abc4 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ab9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9c:	68da      	ldr	r2, [r3, #12]
 800ab9e:	6a3b      	ldr	r3, [r7, #32]
 800aba0:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800aba2:	4b3b      	ldr	r3, [pc, #236]	; (800ac90 <udp_input+0x1b8>)
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba8:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800abaa:	4a39      	ldr	r2, [pc, #228]	; (800ac90 <udp_input+0x1b8>)
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abae:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800abb0:	e008      	b.n	800abc4 <udp_input+0xec>
      }
    }

    prev = pcb;
 800abb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb4:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800abb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	627b      	str	r3, [r7, #36]	; 0x24
 800abbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1c0      	bne.n	800ab44 <udp_input+0x6c>
 800abc2:	e000      	b.n	800abc6 <udp_input+0xee>
        break;
 800abc4:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d101      	bne.n	800abd0 <udp_input+0xf8>
    pcb = uncon_pcb;
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d002      	beq.n	800abdc <udp_input+0x104>
    for_us = 1;
 800abd6:	2301      	movs	r3, #1
 800abd8:	76fb      	strb	r3, [r7, #27]
 800abda:	e00a      	b.n	800abf2 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	3304      	adds	r3, #4
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	4b2a      	ldr	r3, [pc, #168]	; (800ac8c <udp_input+0x1b4>)
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	bf0c      	ite	eq
 800abea:	2301      	moveq	r3, #1
 800abec:	2300      	movne	r3, #0
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800abf2:	7efb      	ldrb	r3, [r7, #27]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d042      	beq.n	800ac7e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800abf8:	f06f 0107 	mvn.w	r1, #7
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f7fa f949 	bl	8004e94 <pbuf_header>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d00a      	beq.n	800ac1e <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800ac08:	4b22      	ldr	r3, [pc, #136]	; (800ac94 <udp_input+0x1bc>)
 800ac0a:	f240 1255 	movw	r2, #341	; 0x155
 800ac0e:	4922      	ldr	r1, [pc, #136]	; (800ac98 <udp_input+0x1c0>)
 800ac10:	4822      	ldr	r0, [pc, #136]	; (800ac9c <udp_input+0x1c4>)
 800ac12:	f002 faef 	bl	800d1f4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7fa f960 	bl	8004edc <pbuf_free>
      goto end;
 800ac1c:	e032      	b.n	800ac84 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d012      	beq.n	800ac4a <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ac24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00a      	beq.n	800ac42 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2e:	699c      	ldr	r4, [r3, #24]
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	69d8      	ldr	r0, [r3, #28]
 800ac34:	8a3b      	ldrh	r3, [r7, #16]
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	4b19      	ldr	r3, [pc, #100]	; (800aca0 <udp_input+0x1c8>)
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac3e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ac40:	e021      	b.n	800ac86 <udp_input+0x1ae>
        pbuf_free(p);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7fa f94a 	bl	8004edc <pbuf_free>
        goto end;
 800ac48:	e01c      	b.n	800ac84 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ac4a:	7cfb      	ldrb	r3, [r7, #19]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d112      	bne.n	800ac76 <udp_input+0x19e>
 800ac50:	4b0e      	ldr	r3, [pc, #56]	; (800ac8c <udp_input+0x1b4>)
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac58:	2be0      	cmp	r3, #224	; 0xe0
 800ac5a:	d00c      	beq.n	800ac76 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ac5c:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <udp_input+0x1b4>)
 800ac5e:	899b      	ldrh	r3, [r3, #12]
 800ac60:	3308      	adds	r3, #8
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	b21b      	sxth	r3, r3
 800ac66:	4619      	mov	r1, r3
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f7fa f925 	bl	8004eb8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ac6e:	2103      	movs	r1, #3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f001 f863 	bl	800bd3c <icmp_dest_unreach>
      pbuf_free(p);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7fa f930 	bl	8004edc <pbuf_free>
  return;
 800ac7c:	e003      	b.n	800ac86 <udp_input+0x1ae>
    pbuf_free(p);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7fa f92c 	bl	8004edc <pbuf_free>
  return;
 800ac84:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ac86:	372c      	adds	r7, #44	; 0x2c
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd90      	pop	{r4, r7, pc}
 800ac8c:	200033f8 	.word	0x200033f8
 800ac90:	2000c6e0 	.word	0x2000c6e0
 800ac94:	0800f6c0 	.word	0x0800f6c0
 800ac98:	0800f6f0 	.word	0x0800f6f0
 800ac9c:	0800f704 	.word	0x0800f704
 800aca0:	20003408 	.word	0x20003408

0800aca4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d01e      	beq.n	800acf2 <udp_netif_ip_addr_changed+0x4e>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d01a      	beq.n	800acf2 <udp_netif_ip_addr_changed+0x4e>
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d017      	beq.n	800acf2 <udp_netif_ip_addr_changed+0x4e>
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d013      	beq.n	800acf2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800acca:	4b0d      	ldr	r3, [pc, #52]	; (800ad00 <udp_netif_ip_addr_changed+0x5c>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	60fb      	str	r3, [r7, #12]
 800acd0:	e00c      	b.n	800acec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d103      	bne.n	800ace6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	68db      	ldr	r3, [r3, #12]
 800acea:	60fb      	str	r3, [r7, #12]
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1ef      	bne.n	800acd2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800acf2:	bf00      	nop
 800acf4:	3714      	adds	r7, #20
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	2000c6e0 	.word	0x2000c6e0

0800ad04 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ad0c:	4915      	ldr	r1, [pc, #84]	; (800ad64 <etharp_free_entry+0x60>)
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	4613      	mov	r3, r2
 800ad12:	005b      	lsls	r3, r3, #1
 800ad14:	4413      	add	r3, r2
 800ad16:	00db      	lsls	r3, r3, #3
 800ad18:	440b      	add	r3, r1
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d013      	beq.n	800ad48 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ad20:	4910      	ldr	r1, [pc, #64]	; (800ad64 <etharp_free_entry+0x60>)
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	4613      	mov	r3, r2
 800ad26:	005b      	lsls	r3, r3, #1
 800ad28:	4413      	add	r3, r2
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	440b      	add	r3, r1
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fa f8d3 	bl	8004edc <pbuf_free>
    arp_table[i].q = NULL;
 800ad36:	490b      	ldr	r1, [pc, #44]	; (800ad64 <etharp_free_entry+0x60>)
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	005b      	lsls	r3, r3, #1
 800ad3e:	4413      	add	r3, r2
 800ad40:	00db      	lsls	r3, r3, #3
 800ad42:	440b      	add	r3, r1
 800ad44:	2200      	movs	r2, #0
 800ad46:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ad48:	4906      	ldr	r1, [pc, #24]	; (800ad64 <etharp_free_entry+0x60>)
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	005b      	lsls	r3, r3, #1
 800ad50:	4413      	add	r3, r2
 800ad52:	00db      	lsls	r3, r3, #3
 800ad54:	440b      	add	r3, r1
 800ad56:	3314      	adds	r3, #20
 800ad58:	2200      	movs	r2, #0
 800ad5a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ad5c:	bf00      	nop
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	20000104 	.word	0x20000104

0800ad68 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ad6e:	2300      	movs	r3, #0
 800ad70:	71fb      	strb	r3, [r7, #7]
 800ad72:	e096      	b.n	800aea2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ad74:	79fa      	ldrb	r2, [r7, #7]
 800ad76:	494f      	ldr	r1, [pc, #316]	; (800aeb4 <etharp_tmr+0x14c>)
 800ad78:	4613      	mov	r3, r2
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	4413      	add	r3, r2
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	440b      	add	r3, r1
 800ad82:	3314      	adds	r3, #20
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800ad88:	79bb      	ldrb	r3, [r7, #6]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f000 8086 	beq.w	800ae9c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800ad90:	79fa      	ldrb	r2, [r7, #7]
 800ad92:	4948      	ldr	r1, [pc, #288]	; (800aeb4 <etharp_tmr+0x14c>)
 800ad94:	4613      	mov	r3, r2
 800ad96:	005b      	lsls	r3, r3, #1
 800ad98:	4413      	add	r3, r2
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	440b      	add	r3, r1
 800ad9e:	3312      	adds	r3, #18
 800ada0:	881b      	ldrh	r3, [r3, #0]
 800ada2:	3301      	adds	r3, #1
 800ada4:	b298      	uxth	r0, r3
 800ada6:	4943      	ldr	r1, [pc, #268]	; (800aeb4 <etharp_tmr+0x14c>)
 800ada8:	4613      	mov	r3, r2
 800adaa:	005b      	lsls	r3, r3, #1
 800adac:	4413      	add	r3, r2
 800adae:	00db      	lsls	r3, r3, #3
 800adb0:	440b      	add	r3, r1
 800adb2:	3312      	adds	r3, #18
 800adb4:	4602      	mov	r2, r0
 800adb6:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800adb8:	79fa      	ldrb	r2, [r7, #7]
 800adba:	493e      	ldr	r1, [pc, #248]	; (800aeb4 <etharp_tmr+0x14c>)
 800adbc:	4613      	mov	r3, r2
 800adbe:	005b      	lsls	r3, r3, #1
 800adc0:	4413      	add	r3, r2
 800adc2:	00db      	lsls	r3, r3, #3
 800adc4:	440b      	add	r3, r1
 800adc6:	3312      	adds	r3, #18
 800adc8:	881b      	ldrh	r3, [r3, #0]
 800adca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800adce:	d215      	bcs.n	800adfc <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800add0:	79fa      	ldrb	r2, [r7, #7]
 800add2:	4938      	ldr	r1, [pc, #224]	; (800aeb4 <etharp_tmr+0x14c>)
 800add4:	4613      	mov	r3, r2
 800add6:	005b      	lsls	r3, r3, #1
 800add8:	4413      	add	r3, r2
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	440b      	add	r3, r1
 800adde:	3314      	adds	r3, #20
 800ade0:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d10f      	bne.n	800ae06 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ade6:	79fa      	ldrb	r2, [r7, #7]
 800ade8:	4932      	ldr	r1, [pc, #200]	; (800aeb4 <etharp_tmr+0x14c>)
 800adea:	4613      	mov	r3, r2
 800adec:	005b      	lsls	r3, r3, #1
 800adee:	4413      	add	r3, r2
 800adf0:	00db      	lsls	r3, r3, #3
 800adf2:	440b      	add	r3, r1
 800adf4:	3312      	adds	r3, #18
 800adf6:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800adf8:	2b04      	cmp	r3, #4
 800adfa:	d904      	bls.n	800ae06 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800adfc:	79fb      	ldrb	r3, [r7, #7]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7ff ff80 	bl	800ad04 <etharp_free_entry>
 800ae04:	e04a      	b.n	800ae9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ae06:	79fa      	ldrb	r2, [r7, #7]
 800ae08:	492a      	ldr	r1, [pc, #168]	; (800aeb4 <etharp_tmr+0x14c>)
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	005b      	lsls	r3, r3, #1
 800ae0e:	4413      	add	r3, r2
 800ae10:	00db      	lsls	r3, r3, #3
 800ae12:	440b      	add	r3, r1
 800ae14:	3314      	adds	r3, #20
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	2b03      	cmp	r3, #3
 800ae1a:	d10a      	bne.n	800ae32 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ae1c:	79fa      	ldrb	r2, [r7, #7]
 800ae1e:	4925      	ldr	r1, [pc, #148]	; (800aeb4 <etharp_tmr+0x14c>)
 800ae20:	4613      	mov	r3, r2
 800ae22:	005b      	lsls	r3, r3, #1
 800ae24:	4413      	add	r3, r2
 800ae26:	00db      	lsls	r3, r3, #3
 800ae28:	440b      	add	r3, r1
 800ae2a:	3314      	adds	r3, #20
 800ae2c:	2204      	movs	r2, #4
 800ae2e:	701a      	strb	r2, [r3, #0]
 800ae30:	e034      	b.n	800ae9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ae32:	79fa      	ldrb	r2, [r7, #7]
 800ae34:	491f      	ldr	r1, [pc, #124]	; (800aeb4 <etharp_tmr+0x14c>)
 800ae36:	4613      	mov	r3, r2
 800ae38:	005b      	lsls	r3, r3, #1
 800ae3a:	4413      	add	r3, r2
 800ae3c:	00db      	lsls	r3, r3, #3
 800ae3e:	440b      	add	r3, r1
 800ae40:	3314      	adds	r3, #20
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	2b04      	cmp	r3, #4
 800ae46:	d10a      	bne.n	800ae5e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ae48:	79fa      	ldrb	r2, [r7, #7]
 800ae4a:	491a      	ldr	r1, [pc, #104]	; (800aeb4 <etharp_tmr+0x14c>)
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	005b      	lsls	r3, r3, #1
 800ae50:	4413      	add	r3, r2
 800ae52:	00db      	lsls	r3, r3, #3
 800ae54:	440b      	add	r3, r1
 800ae56:	3314      	adds	r3, #20
 800ae58:	2202      	movs	r2, #2
 800ae5a:	701a      	strb	r2, [r3, #0]
 800ae5c:	e01e      	b.n	800ae9c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ae5e:	79fa      	ldrb	r2, [r7, #7]
 800ae60:	4914      	ldr	r1, [pc, #80]	; (800aeb4 <etharp_tmr+0x14c>)
 800ae62:	4613      	mov	r3, r2
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	4413      	add	r3, r2
 800ae68:	00db      	lsls	r3, r3, #3
 800ae6a:	440b      	add	r3, r1
 800ae6c:	3314      	adds	r3, #20
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d113      	bne.n	800ae9c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ae74:	79fa      	ldrb	r2, [r7, #7]
 800ae76:	490f      	ldr	r1, [pc, #60]	; (800aeb4 <etharp_tmr+0x14c>)
 800ae78:	4613      	mov	r3, r2
 800ae7a:	005b      	lsls	r3, r3, #1
 800ae7c:	4413      	add	r3, r2
 800ae7e:	00db      	lsls	r3, r3, #3
 800ae80:	440b      	add	r3, r1
 800ae82:	3308      	adds	r3, #8
 800ae84:	6818      	ldr	r0, [r3, #0]
 800ae86:	79fa      	ldrb	r2, [r7, #7]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	4413      	add	r3, r2
 800ae8e:	00db      	lsls	r3, r3, #3
 800ae90:	4a08      	ldr	r2, [pc, #32]	; (800aeb4 <etharp_tmr+0x14c>)
 800ae92:	4413      	add	r3, r2
 800ae94:	3304      	adds	r3, #4
 800ae96:	4619      	mov	r1, r3
 800ae98:	f000 fe38 	bl	800bb0c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ae9c:	79fb      	ldrb	r3, [r7, #7]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	71fb      	strb	r3, [r7, #7]
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	2b09      	cmp	r3, #9
 800aea6:	f67f af65 	bls.w	800ad74 <etharp_tmr+0xc>
      }
    }
  }
}
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20000104 	.word	0x20000104

0800aeb8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	460b      	mov	r3, r1
 800aec2:	607a      	str	r2, [r7, #4]
 800aec4:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800aec6:	230a      	movs	r3, #10
 800aec8:	77fb      	strb	r3, [r7, #31]
 800aeca:	230a      	movs	r3, #10
 800aecc:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800aece:	230a      	movs	r3, #10
 800aed0:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800aed6:	230a      	movs	r3, #10
 800aed8:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800aeda:	2300      	movs	r3, #0
 800aedc:	833b      	strh	r3, [r7, #24]
 800aede:	2300      	movs	r3, #0
 800aee0:	82fb      	strh	r3, [r7, #22]
 800aee2:	2300      	movs	r3, #0
 800aee4:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800aee6:	2300      	movs	r3, #0
 800aee8:	773b      	strb	r3, [r7, #28]
 800aeea:	e093      	b.n	800b014 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800aeec:	7f3a      	ldrb	r2, [r7, #28]
 800aeee:	4990      	ldr	r1, [pc, #576]	; (800b130 <etharp_find_entry+0x278>)
 800aef0:	4613      	mov	r3, r2
 800aef2:	005b      	lsls	r3, r3, #1
 800aef4:	4413      	add	r3, r2
 800aef6:	00db      	lsls	r3, r3, #3
 800aef8:	440b      	add	r3, r1
 800aefa:	3314      	adds	r3, #20
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800af00:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800af04:	2b0a      	cmp	r3, #10
 800af06:	d105      	bne.n	800af14 <etharp_find_entry+0x5c>
 800af08:	7cfb      	ldrb	r3, [r7, #19]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d102      	bne.n	800af14 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800af0e:	7f3b      	ldrb	r3, [r7, #28]
 800af10:	777b      	strb	r3, [r7, #29]
 800af12:	e07c      	b.n	800b00e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800af14:	7cfb      	ldrb	r3, [r7, #19]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d079      	beq.n	800b00e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800af1a:	7cfb      	ldrb	r3, [r7, #19]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d009      	beq.n	800af34 <etharp_find_entry+0x7c>
 800af20:	7cfb      	ldrb	r3, [r7, #19]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d806      	bhi.n	800af34 <etharp_find_entry+0x7c>
 800af26:	4b83      	ldr	r3, [pc, #524]	; (800b134 <etharp_find_entry+0x27c>)
 800af28:	f44f 7293 	mov.w	r2, #294	; 0x126
 800af2c:	4982      	ldr	r1, [pc, #520]	; (800b138 <etharp_find_entry+0x280>)
 800af2e:	4883      	ldr	r0, [pc, #524]	; (800b13c <etharp_find_entry+0x284>)
 800af30:	f002 f960 	bl	800d1f4 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00f      	beq.n	800af5a <etharp_find_entry+0xa2>
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6819      	ldr	r1, [r3, #0]
 800af3e:	7f3a      	ldrb	r2, [r7, #28]
 800af40:	487b      	ldr	r0, [pc, #492]	; (800b130 <etharp_find_entry+0x278>)
 800af42:	4613      	mov	r3, r2
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	4413      	add	r3, r2
 800af48:	00db      	lsls	r3, r3, #3
 800af4a:	4403      	add	r3, r0
 800af4c:	3304      	adds	r3, #4
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4299      	cmp	r1, r3
 800af52:	d102      	bne.n	800af5a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800af54:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800af58:	e0e5      	b.n	800b126 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800af5a:	7cfb      	ldrb	r3, [r7, #19]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d13b      	bne.n	800afd8 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800af60:	7f3a      	ldrb	r2, [r7, #28]
 800af62:	4973      	ldr	r1, [pc, #460]	; (800b130 <etharp_find_entry+0x278>)
 800af64:	4613      	mov	r3, r2
 800af66:	005b      	lsls	r3, r3, #1
 800af68:	4413      	add	r3, r2
 800af6a:	00db      	lsls	r3, r3, #3
 800af6c:	440b      	add	r3, r1
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d018      	beq.n	800afa6 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800af74:	7f3a      	ldrb	r2, [r7, #28]
 800af76:	496e      	ldr	r1, [pc, #440]	; (800b130 <etharp_find_entry+0x278>)
 800af78:	4613      	mov	r3, r2
 800af7a:	005b      	lsls	r3, r3, #1
 800af7c:	4413      	add	r3, r2
 800af7e:	00db      	lsls	r3, r3, #3
 800af80:	440b      	add	r3, r1
 800af82:	3312      	adds	r3, #18
 800af84:	881b      	ldrh	r3, [r3, #0]
 800af86:	8b3a      	ldrh	r2, [r7, #24]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d840      	bhi.n	800b00e <etharp_find_entry+0x156>
            old_queue = i;
 800af8c:	7f3b      	ldrb	r3, [r7, #28]
 800af8e:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800af90:	7f3a      	ldrb	r2, [r7, #28]
 800af92:	4967      	ldr	r1, [pc, #412]	; (800b130 <etharp_find_entry+0x278>)
 800af94:	4613      	mov	r3, r2
 800af96:	005b      	lsls	r3, r3, #1
 800af98:	4413      	add	r3, r2
 800af9a:	00db      	lsls	r3, r3, #3
 800af9c:	440b      	add	r3, r1
 800af9e:	3312      	adds	r3, #18
 800afa0:	881b      	ldrh	r3, [r3, #0]
 800afa2:	833b      	strh	r3, [r7, #24]
 800afa4:	e033      	b.n	800b00e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800afa6:	7f3a      	ldrb	r2, [r7, #28]
 800afa8:	4961      	ldr	r1, [pc, #388]	; (800b130 <etharp_find_entry+0x278>)
 800afaa:	4613      	mov	r3, r2
 800afac:	005b      	lsls	r3, r3, #1
 800afae:	4413      	add	r3, r2
 800afb0:	00db      	lsls	r3, r3, #3
 800afb2:	440b      	add	r3, r1
 800afb4:	3312      	adds	r3, #18
 800afb6:	881b      	ldrh	r3, [r3, #0]
 800afb8:	8afa      	ldrh	r2, [r7, #22]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d827      	bhi.n	800b00e <etharp_find_entry+0x156>
            old_pending = i;
 800afbe:	7f3b      	ldrb	r3, [r7, #28]
 800afc0:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800afc2:	7f3a      	ldrb	r2, [r7, #28]
 800afc4:	495a      	ldr	r1, [pc, #360]	; (800b130 <etharp_find_entry+0x278>)
 800afc6:	4613      	mov	r3, r2
 800afc8:	005b      	lsls	r3, r3, #1
 800afca:	4413      	add	r3, r2
 800afcc:	00db      	lsls	r3, r3, #3
 800afce:	440b      	add	r3, r1
 800afd0:	3312      	adds	r3, #18
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	82fb      	strh	r3, [r7, #22]
 800afd6:	e01a      	b.n	800b00e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800afd8:	7cfb      	ldrb	r3, [r7, #19]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d917      	bls.n	800b00e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800afde:	7f3a      	ldrb	r2, [r7, #28]
 800afe0:	4953      	ldr	r1, [pc, #332]	; (800b130 <etharp_find_entry+0x278>)
 800afe2:	4613      	mov	r3, r2
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	4413      	add	r3, r2
 800afe8:	00db      	lsls	r3, r3, #3
 800afea:	440b      	add	r3, r1
 800afec:	3312      	adds	r3, #18
 800afee:	881b      	ldrh	r3, [r3, #0]
 800aff0:	8aba      	ldrh	r2, [r7, #20]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d80b      	bhi.n	800b00e <etharp_find_entry+0x156>
            old_stable = i;
 800aff6:	7f3b      	ldrb	r3, [r7, #28]
 800aff8:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800affa:	7f3a      	ldrb	r2, [r7, #28]
 800affc:	494c      	ldr	r1, [pc, #304]	; (800b130 <etharp_find_entry+0x278>)
 800affe:	4613      	mov	r3, r2
 800b000:	005b      	lsls	r3, r3, #1
 800b002:	4413      	add	r3, r2
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	440b      	add	r3, r1
 800b008:	3312      	adds	r3, #18
 800b00a:	881b      	ldrh	r3, [r3, #0]
 800b00c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b00e:	7f3b      	ldrb	r3, [r7, #28]
 800b010:	3301      	adds	r3, #1
 800b012:	773b      	strb	r3, [r7, #28]
 800b014:	7f3b      	ldrb	r3, [r7, #28]
 800b016:	2b09      	cmp	r3, #9
 800b018:	f67f af68 	bls.w	800aeec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b01c:	7afb      	ldrb	r3, [r7, #11]
 800b01e:	f003 0302 	and.w	r3, r3, #2
 800b022:	2b00      	cmp	r3, #0
 800b024:	d108      	bne.n	800b038 <etharp_find_entry+0x180>
 800b026:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b02a:	2b0a      	cmp	r3, #10
 800b02c:	d107      	bne.n	800b03e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b02e:	7afb      	ldrb	r3, [r7, #11]
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	2b00      	cmp	r3, #0
 800b036:	d102      	bne.n	800b03e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800b038:	f04f 33ff 	mov.w	r3, #4294967295
 800b03c:	e073      	b.n	800b126 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b03e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b042:	2b09      	cmp	r3, #9
 800b044:	dc02      	bgt.n	800b04c <etharp_find_entry+0x194>
    i = empty;
 800b046:	7f7b      	ldrb	r3, [r7, #29]
 800b048:	773b      	strb	r3, [r7, #28]
 800b04a:	e036      	b.n	800b0ba <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b04c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800b050:	2b09      	cmp	r3, #9
 800b052:	dc13      	bgt.n	800b07c <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800b054:	7fbb      	ldrb	r3, [r7, #30]
 800b056:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b058:	7f3a      	ldrb	r2, [r7, #28]
 800b05a:	4935      	ldr	r1, [pc, #212]	; (800b130 <etharp_find_entry+0x278>)
 800b05c:	4613      	mov	r3, r2
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	4413      	add	r3, r2
 800b062:	00db      	lsls	r3, r3, #3
 800b064:	440b      	add	r3, r1
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d018      	beq.n	800b09e <etharp_find_entry+0x1e6>
 800b06c:	4b31      	ldr	r3, [pc, #196]	; (800b134 <etharp_find_entry+0x27c>)
 800b06e:	f240 126f 	movw	r2, #367	; 0x16f
 800b072:	4933      	ldr	r1, [pc, #204]	; (800b140 <etharp_find_entry+0x288>)
 800b074:	4831      	ldr	r0, [pc, #196]	; (800b13c <etharp_find_entry+0x284>)
 800b076:	f002 f8bd 	bl	800d1f4 <iprintf>
 800b07a:	e010      	b.n	800b09e <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b07c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b080:	2b09      	cmp	r3, #9
 800b082:	dc02      	bgt.n	800b08a <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800b084:	7ffb      	ldrb	r3, [r7, #31]
 800b086:	773b      	strb	r3, [r7, #28]
 800b088:	e009      	b.n	800b09e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b08a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b08e:	2b09      	cmp	r3, #9
 800b090:	dc02      	bgt.n	800b098 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b092:	7efb      	ldrb	r3, [r7, #27]
 800b094:	773b      	strb	r3, [r7, #28]
 800b096:	e002      	b.n	800b09e <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800b098:	f04f 33ff 	mov.w	r3, #4294967295
 800b09c:	e043      	b.n	800b126 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b09e:	7f3b      	ldrb	r3, [r7, #28]
 800b0a0:	2b09      	cmp	r3, #9
 800b0a2:	d906      	bls.n	800b0b2 <etharp_find_entry+0x1fa>
 800b0a4:	4b23      	ldr	r3, [pc, #140]	; (800b134 <etharp_find_entry+0x27c>)
 800b0a6:	f240 1281 	movw	r2, #385	; 0x181
 800b0aa:	4926      	ldr	r1, [pc, #152]	; (800b144 <etharp_find_entry+0x28c>)
 800b0ac:	4823      	ldr	r0, [pc, #140]	; (800b13c <etharp_find_entry+0x284>)
 800b0ae:	f002 f8a1 	bl	800d1f4 <iprintf>
    etharp_free_entry(i);
 800b0b2:	7f3b      	ldrb	r3, [r7, #28]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7ff fe25 	bl	800ad04 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b0ba:	7f3b      	ldrb	r3, [r7, #28]
 800b0bc:	2b09      	cmp	r3, #9
 800b0be:	d906      	bls.n	800b0ce <etharp_find_entry+0x216>
 800b0c0:	4b1c      	ldr	r3, [pc, #112]	; (800b134 <etharp_find_entry+0x27c>)
 800b0c2:	f240 1285 	movw	r2, #389	; 0x185
 800b0c6:	491f      	ldr	r1, [pc, #124]	; (800b144 <etharp_find_entry+0x28c>)
 800b0c8:	481c      	ldr	r0, [pc, #112]	; (800b13c <etharp_find_entry+0x284>)
 800b0ca:	f002 f893 	bl	800d1f4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b0ce:	7f3a      	ldrb	r2, [r7, #28]
 800b0d0:	4917      	ldr	r1, [pc, #92]	; (800b130 <etharp_find_entry+0x278>)
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	005b      	lsls	r3, r3, #1
 800b0d6:	4413      	add	r3, r2
 800b0d8:	00db      	lsls	r3, r3, #3
 800b0da:	440b      	add	r3, r1
 800b0dc:	3314      	adds	r3, #20
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d006      	beq.n	800b0f2 <etharp_find_entry+0x23a>
 800b0e4:	4b13      	ldr	r3, [pc, #76]	; (800b134 <etharp_find_entry+0x27c>)
 800b0e6:	f240 1287 	movw	r2, #391	; 0x187
 800b0ea:	4917      	ldr	r1, [pc, #92]	; (800b148 <etharp_find_entry+0x290>)
 800b0ec:	4813      	ldr	r0, [pc, #76]	; (800b13c <etharp_find_entry+0x284>)
 800b0ee:	f002 f881 	bl	800d1f4 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d00a      	beq.n	800b10e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b0f8:	7f3a      	ldrb	r2, [r7, #28]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6819      	ldr	r1, [r3, #0]
 800b0fe:	480c      	ldr	r0, [pc, #48]	; (800b130 <etharp_find_entry+0x278>)
 800b100:	4613      	mov	r3, r2
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	4413      	add	r3, r2
 800b106:	00db      	lsls	r3, r3, #3
 800b108:	4403      	add	r3, r0
 800b10a:	3304      	adds	r3, #4
 800b10c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b10e:	7f3a      	ldrb	r2, [r7, #28]
 800b110:	4907      	ldr	r1, [pc, #28]	; (800b130 <etharp_find_entry+0x278>)
 800b112:	4613      	mov	r3, r2
 800b114:	005b      	lsls	r3, r3, #1
 800b116:	4413      	add	r3, r2
 800b118:	00db      	lsls	r3, r3, #3
 800b11a:	440b      	add	r3, r1
 800b11c:	3312      	adds	r3, #18
 800b11e:	2200      	movs	r2, #0
 800b120:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800b122:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3720      	adds	r7, #32
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	20000104 	.word	0x20000104
 800b134:	0800f75c 	.word	0x0800f75c
 800b138:	0800f794 	.word	0x0800f794
 800b13c:	0800f7d4 	.word	0x0800f7d4
 800b140:	0800f7fc 	.word	0x0800f7fc
 800b144:	0800f814 	.word	0x0800f814
 800b148:	0800f828 	.word	0x0800f828

0800b14c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af02      	add	r7, sp, #8
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	607a      	str	r2, [r7, #4]
 800b158:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b160:	2b06      	cmp	r3, #6
 800b162:	d006      	beq.n	800b172 <etharp_update_arp_entry+0x26>
 800b164:	4b48      	ldr	r3, [pc, #288]	; (800b288 <etharp_update_arp_entry+0x13c>)
 800b166:	f240 12ab 	movw	r2, #427	; 0x1ab
 800b16a:	4948      	ldr	r1, [pc, #288]	; (800b28c <etharp_update_arp_entry+0x140>)
 800b16c:	4848      	ldr	r0, [pc, #288]	; (800b290 <etharp_update_arp_entry+0x144>)
 800b16e:	f002 f841 	bl	800d1f4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d012      	beq.n	800b19e <etharp_update_arp_entry+0x52>
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00e      	beq.n	800b19e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68f9      	ldr	r1, [r7, #12]
 800b186:	4618      	mov	r0, r3
 800b188:	f001 f8da 	bl	800c340 <ip4_addr_isbroadcast_u32>
 800b18c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d105      	bne.n	800b19e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b19a:	2be0      	cmp	r3, #224	; 0xe0
 800b19c:	d102      	bne.n	800b1a4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b19e:	f06f 030f 	mvn.w	r3, #15
 800b1a2:	e06c      	b.n	800b27e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	68b8      	ldr	r0, [r7, #8]
 800b1ac:	f7ff fe84 	bl	800aeb8 <etharp_find_entry>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b1b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	da02      	bge.n	800b1c2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b1bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1c0:	e05d      	b.n	800b27e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b1c2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b1c6:	4933      	ldr	r1, [pc, #204]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	005b      	lsls	r3, r3, #1
 800b1cc:	4413      	add	r3, r2
 800b1ce:	00db      	lsls	r3, r3, #3
 800b1d0:	440b      	add	r3, r1
 800b1d2:	3314      	adds	r3, #20
 800b1d4:	2202      	movs	r2, #2
 800b1d6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b1d8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b1dc:	492d      	ldr	r1, [pc, #180]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b1de:	4613      	mov	r3, r2
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	4413      	add	r3, r2
 800b1e4:	00db      	lsls	r3, r3, #3
 800b1e6:	440b      	add	r3, r1
 800b1e8:	3308      	adds	r3, #8
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800b1ee:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b1f2:	4613      	mov	r3, r2
 800b1f4:	005b      	lsls	r3, r3, #1
 800b1f6:	4413      	add	r3, r2
 800b1f8:	00db      	lsls	r3, r3, #3
 800b1fa:	3308      	adds	r3, #8
 800b1fc:	4a25      	ldr	r2, [pc, #148]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b1fe:	4413      	add	r3, r2
 800b200:	3304      	adds	r3, #4
 800b202:	2206      	movs	r2, #6
 800b204:	6879      	ldr	r1, [r7, #4]
 800b206:	4618      	mov	r0, r3
 800b208:	f001 ffe1 	bl	800d1ce <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b20c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b210:	4920      	ldr	r1, [pc, #128]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b212:	4613      	mov	r3, r2
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	4413      	add	r3, r2
 800b218:	00db      	lsls	r3, r3, #3
 800b21a:	440b      	add	r3, r1
 800b21c:	3312      	adds	r3, #18
 800b21e:	2200      	movs	r2, #0
 800b220:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b222:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b226:	491b      	ldr	r1, [pc, #108]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b228:	4613      	mov	r3, r2
 800b22a:	005b      	lsls	r3, r3, #1
 800b22c:	4413      	add	r3, r2
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	440b      	add	r3, r1
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d021      	beq.n	800b27c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b238:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b23c:	4915      	ldr	r1, [pc, #84]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b23e:	4613      	mov	r3, r2
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	4413      	add	r3, r2
 800b244:	00db      	lsls	r3, r3, #3
 800b246:	440b      	add	r3, r1
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b24c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b250:	4910      	ldr	r1, [pc, #64]	; (800b294 <etharp_update_arp_entry+0x148>)
 800b252:	4613      	mov	r3, r2
 800b254:	005b      	lsls	r3, r3, #1
 800b256:	4413      	add	r3, r2
 800b258:	00db      	lsls	r3, r3, #3
 800b25a:	440b      	add	r3, r1
 800b25c:	2200      	movs	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 800b266:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6939      	ldr	r1, [r7, #16]
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f001 ff07 	bl	800d084 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b276:	6938      	ldr	r0, [r7, #16]
 800b278:	f7f9 fe30 	bl	8004edc <pbuf_free>
  }
  return ERR_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3718      	adds	r7, #24
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	0800f75c 	.word	0x0800f75c
 800b28c:	0800f854 	.word	0x0800f854
 800b290:	0800f7d4 	.word	0x0800f7d4
 800b294:	20000104 	.word	0x20000104

0800b298 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	73fb      	strb	r3, [r7, #15]
 800b2a4:	e01f      	b.n	800b2e6 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800b2a6:	7bfa      	ldrb	r2, [r7, #15]
 800b2a8:	4912      	ldr	r1, [pc, #72]	; (800b2f4 <etharp_cleanup_netif+0x5c>)
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	005b      	lsls	r3, r3, #1
 800b2ae:	4413      	add	r3, r2
 800b2b0:	00db      	lsls	r3, r3, #3
 800b2b2:	440b      	add	r3, r1
 800b2b4:	3314      	adds	r3, #20
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b2ba:	7bbb      	ldrb	r3, [r7, #14]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00f      	beq.n	800b2e0 <etharp_cleanup_netif+0x48>
 800b2c0:	7bfa      	ldrb	r2, [r7, #15]
 800b2c2:	490c      	ldr	r1, [pc, #48]	; (800b2f4 <etharp_cleanup_netif+0x5c>)
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	4413      	add	r3, r2
 800b2ca:	00db      	lsls	r3, r3, #3
 800b2cc:	440b      	add	r3, r1
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d103      	bne.n	800b2e0 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7ff fd12 	bl	800ad04 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	73fb      	strb	r3, [r7, #15]
 800b2e6:	7bfb      	ldrb	r3, [r7, #15]
 800b2e8:	2b09      	cmp	r3, #9
 800b2ea:	d9dc      	bls.n	800b2a6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b2ec:	bf00      	nop
 800b2ee:	3710      	adds	r7, #16
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	20000104 	.word	0x20000104

0800b2f8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b2f8:	b5b0      	push	{r4, r5, r7, lr}
 800b2fa:	b08a      	sub	sp, #40	; 0x28
 800b2fc:	af04      	add	r7, sp, #16
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d107      	bne.n	800b318 <etharp_input+0x20>
 800b308:	4b3d      	ldr	r3, [pc, #244]	; (800b400 <etharp_input+0x108>)
 800b30a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800b30e:	493d      	ldr	r1, [pc, #244]	; (800b404 <etharp_input+0x10c>)
 800b310:	483d      	ldr	r0, [pc, #244]	; (800b408 <etharp_input+0x110>)
 800b312:	f001 ff6f 	bl	800d1f4 <iprintf>
 800b316:	e06f      	b.n	800b3f8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	881b      	ldrh	r3, [r3, #0]
 800b322:	b29b      	uxth	r3, r3
 800b324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b328:	d10c      	bne.n	800b344 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800b32e:	2b06      	cmp	r3, #6
 800b330:	d108      	bne.n	800b344 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b336:	2b04      	cmp	r3, #4
 800b338:	d104      	bne.n	800b344 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	885b      	ldrh	r3, [r3, #2]
 800b33e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b340:	2b08      	cmp	r3, #8
 800b342:	d003      	beq.n	800b34c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7f9 fdc9 	bl	8004edc <pbuf_free>
    return;
 800b34a:	e055      	b.n	800b3f8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	330e      	adds	r3, #14
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	3318      	adds	r3, #24
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	3304      	adds	r3, #4
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d102      	bne.n	800b36c <etharp_input+0x74>
    for_us = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	75fb      	strb	r3, [r7, #23]
 800b36a:	e009      	b.n	800b380 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	3304      	adds	r3, #4
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	429a      	cmp	r2, r3
 800b376:	bf0c      	ite	eq
 800b378:	2301      	moveq	r3, #1
 800b37a:	2300      	movne	r3, #0
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f103 0208 	add.w	r2, r3, #8
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <etharp_input+0x98>
 800b38c:	2301      	movs	r3, #1
 800b38e:	e000      	b.n	800b392 <etharp_input+0x9a>
 800b390:	2302      	movs	r3, #2
 800b392:	f107 010c 	add.w	r1, r7, #12
 800b396:	6838      	ldr	r0, [r7, #0]
 800b398:	f7ff fed8 	bl	800b14c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	88db      	ldrh	r3, [r3, #6]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3a6:	d003      	beq.n	800b3b0 <etharp_input+0xb8>
 800b3a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ac:	d01e      	beq.n	800b3ec <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800b3ae:	e020      	b.n	800b3f2 <etharp_input+0xfa>
    if (for_us) {
 800b3b0:	7dfb      	ldrb	r3, [r7, #23]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d01c      	beq.n	800b3f0 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	f103 052d 	add.w	r5, r3, #45	; 0x2d
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	3208      	adds	r2, #8
      etharp_raw(netif,
 800b3d0:	2102      	movs	r1, #2
 800b3d2:	9103      	str	r1, [sp, #12]
 800b3d4:	f107 010c 	add.w	r1, r7, #12
 800b3d8:	9102      	str	r1, [sp, #8]
 800b3da:	9201      	str	r2, [sp, #4]
 800b3dc:	9300      	str	r3, [sp, #0]
 800b3de:	462b      	mov	r3, r5
 800b3e0:	4622      	mov	r2, r4
 800b3e2:	4601      	mov	r1, r0
 800b3e4:	6838      	ldr	r0, [r7, #0]
 800b3e6:	f000 fae3 	bl	800b9b0 <etharp_raw>
    break;
 800b3ea:	e001      	b.n	800b3f0 <etharp_input+0xf8>
    break;
 800b3ec:	bf00      	nop
 800b3ee:	e000      	b.n	800b3f2 <etharp_input+0xfa>
    break;
 800b3f0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f7f9 fd72 	bl	8004edc <pbuf_free>
}
 800b3f8:	3718      	adds	r7, #24
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bdb0      	pop	{r4, r5, r7, pc}
 800b3fe:	bf00      	nop
 800b400:	0800f75c 	.word	0x0800f75c
 800b404:	0800f8ac 	.word	0x0800f8ac
 800b408:	0800f7d4 	.word	0x0800f7d4

0800b40c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af02      	add	r7, sp, #8
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	4613      	mov	r3, r2
 800b418:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b41a:	79fa      	ldrb	r2, [r7, #7]
 800b41c:	4944      	ldr	r1, [pc, #272]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b41e:	4613      	mov	r3, r2
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	4413      	add	r3, r2
 800b424:	00db      	lsls	r3, r3, #3
 800b426:	440b      	add	r3, r1
 800b428:	3314      	adds	r3, #20
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d806      	bhi.n	800b43e <etharp_output_to_arp_index+0x32>
 800b430:	4b40      	ldr	r3, [pc, #256]	; (800b534 <etharp_output_to_arp_index+0x128>)
 800b432:	f240 22ed 	movw	r2, #749	; 0x2ed
 800b436:	4940      	ldr	r1, [pc, #256]	; (800b538 <etharp_output_to_arp_index+0x12c>)
 800b438:	4840      	ldr	r0, [pc, #256]	; (800b53c <etharp_output_to_arp_index+0x130>)
 800b43a:	f001 fedb 	bl	800d1f4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b43e:	79fa      	ldrb	r2, [r7, #7]
 800b440:	493b      	ldr	r1, [pc, #236]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b442:	4613      	mov	r3, r2
 800b444:	005b      	lsls	r3, r3, #1
 800b446:	4413      	add	r3, r2
 800b448:	00db      	lsls	r3, r3, #3
 800b44a:	440b      	add	r3, r1
 800b44c:	3314      	adds	r3, #20
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b02      	cmp	r3, #2
 800b452:	d153      	bne.n	800b4fc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b454:	79fa      	ldrb	r2, [r7, #7]
 800b456:	4936      	ldr	r1, [pc, #216]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b458:	4613      	mov	r3, r2
 800b45a:	005b      	lsls	r3, r3, #1
 800b45c:	4413      	add	r3, r2
 800b45e:	00db      	lsls	r3, r3, #3
 800b460:	440b      	add	r3, r1
 800b462:	3312      	adds	r3, #18
 800b464:	881b      	ldrh	r3, [r3, #0]
 800b466:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b46a:	d919      	bls.n	800b4a0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b46c:	79fa      	ldrb	r2, [r7, #7]
 800b46e:	4613      	mov	r3, r2
 800b470:	005b      	lsls	r3, r3, #1
 800b472:	4413      	add	r3, r2
 800b474:	00db      	lsls	r3, r3, #3
 800b476:	4a2e      	ldr	r2, [pc, #184]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b478:	4413      	add	r3, r2
 800b47a:	3304      	adds	r3, #4
 800b47c:	4619      	mov	r1, r3
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 fb44 	bl	800bb0c <etharp_request>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d138      	bne.n	800b4fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b48a:	79fa      	ldrb	r2, [r7, #7]
 800b48c:	4928      	ldr	r1, [pc, #160]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b48e:	4613      	mov	r3, r2
 800b490:	005b      	lsls	r3, r3, #1
 800b492:	4413      	add	r3, r2
 800b494:	00db      	lsls	r3, r3, #3
 800b496:	440b      	add	r3, r1
 800b498:	3314      	adds	r3, #20
 800b49a:	2203      	movs	r2, #3
 800b49c:	701a      	strb	r2, [r3, #0]
 800b49e:	e02d      	b.n	800b4fc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b4a0:	79fa      	ldrb	r2, [r7, #7]
 800b4a2:	4923      	ldr	r1, [pc, #140]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b4a4:	4613      	mov	r3, r2
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	4413      	add	r3, r2
 800b4aa:	00db      	lsls	r3, r3, #3
 800b4ac:	440b      	add	r3, r1
 800b4ae:	3312      	adds	r3, #18
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b4b6:	d321      	bcc.n	800b4fc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b4b8:	79fa      	ldrb	r2, [r7, #7]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	4413      	add	r3, r2
 800b4c0:	00db      	lsls	r3, r3, #3
 800b4c2:	4a1b      	ldr	r2, [pc, #108]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b4c4:	4413      	add	r3, r2
 800b4c6:	1d19      	adds	r1, r3, #4
 800b4c8:	79fa      	ldrb	r2, [r7, #7]
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	005b      	lsls	r3, r3, #1
 800b4ce:	4413      	add	r3, r2
 800b4d0:	00db      	lsls	r3, r3, #3
 800b4d2:	3308      	adds	r3, #8
 800b4d4:	4a16      	ldr	r2, [pc, #88]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b4d6:	4413      	add	r3, r2
 800b4d8:	3304      	adds	r3, #4
 800b4da:	461a      	mov	r2, r3
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 faf3 	bl	800bac8 <etharp_request_dst>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d109      	bne.n	800b4fc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b4e8:	79fa      	ldrb	r2, [r7, #7]
 800b4ea:	4911      	ldr	r1, [pc, #68]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	005b      	lsls	r3, r3, #1
 800b4f0:	4413      	add	r3, r2
 800b4f2:	00db      	lsls	r3, r3, #3
 800b4f4:	440b      	add	r3, r1
 800b4f6:	3314      	adds	r3, #20
 800b4f8:	2203      	movs	r2, #3
 800b4fa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 800b502:	79fa      	ldrb	r2, [r7, #7]
 800b504:	4613      	mov	r3, r2
 800b506:	005b      	lsls	r3, r3, #1
 800b508:	4413      	add	r3, r2
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	3308      	adds	r3, #8
 800b50e:	4a08      	ldr	r2, [pc, #32]	; (800b530 <etharp_output_to_arp_index+0x124>)
 800b510:	4413      	add	r3, r2
 800b512:	1d1a      	adds	r2, r3, #4
 800b514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	4613      	mov	r3, r2
 800b51c:	460a      	mov	r2, r1
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	68f8      	ldr	r0, [r7, #12]
 800b522:	f001 fdaf 	bl	800d084 <ethernet_output>
 800b526:	4603      	mov	r3, r0
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3710      	adds	r7, #16
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	20000104 	.word	0x20000104
 800b534:	0800f75c 	.word	0x0800f75c
 800b538:	0800f8cc 	.word	0x0800f8cc
 800b53c:	0800f7d4 	.word	0x0800f7d4

0800b540 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b08a      	sub	sp, #40	; 0x28
 800b544:	af02      	add	r7, sp, #8
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d106      	bne.n	800b564 <etharp_output+0x24>
 800b556:	4b69      	ldr	r3, [pc, #420]	; (800b6fc <etharp_output+0x1bc>)
 800b558:	f240 321b 	movw	r2, #795	; 0x31b
 800b55c:	4968      	ldr	r1, [pc, #416]	; (800b700 <etharp_output+0x1c0>)
 800b55e:	4869      	ldr	r0, [pc, #420]	; (800b704 <etharp_output+0x1c4>)
 800b560:	f001 fe48 	bl	800d1f4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d106      	bne.n	800b578 <etharp_output+0x38>
 800b56a:	4b64      	ldr	r3, [pc, #400]	; (800b6fc <etharp_output+0x1bc>)
 800b56c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b570:	4965      	ldr	r1, [pc, #404]	; (800b708 <etharp_output+0x1c8>)
 800b572:	4864      	ldr	r0, [pc, #400]	; (800b704 <etharp_output+0x1c4>)
 800b574:	f001 fe3e 	bl	800d1f4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <etharp_output+0x4c>
 800b57e:	4b5f      	ldr	r3, [pc, #380]	; (800b6fc <etharp_output+0x1bc>)
 800b580:	f240 321d 	movw	r2, #797	; 0x31d
 800b584:	4961      	ldr	r1, [pc, #388]	; (800b70c <etharp_output+0x1cc>)
 800b586:	485f      	ldr	r0, [pc, #380]	; (800b704 <etharp_output+0x1c4>)
 800b588:	f001 fe34 	bl	800d1f4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	68f9      	ldr	r1, [r7, #12]
 800b592:	4618      	mov	r0, r3
 800b594:	f000 fed4 	bl	800c340 <ip4_addr_isbroadcast_u32>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d002      	beq.n	800b5a4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800b59e:	4b5c      	ldr	r3, [pc, #368]	; (800b710 <etharp_output+0x1d0>)
 800b5a0:	61fb      	str	r3, [r7, #28]
 800b5a2:	e09b      	b.n	800b6dc <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5ac:	2be0      	cmp	r3, #224	; 0xe0
 800b5ae:	d118      	bne.n	800b5e2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800b5b8:	235e      	movs	r3, #94	; 0x5e
 800b5ba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	3301      	adds	r3, #1
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	3302      	adds	r3, #2
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	3303      	adds	r3, #3
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800b5da:	f107 0310 	add.w	r3, r7, #16
 800b5de:	61fb      	str	r3, [r7, #28]
 800b5e0:	e07c      	b.n	800b6dc <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	405a      	eors	r2, r3
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d012      	beq.n	800b620 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800b600:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800b604:	4293      	cmp	r3, r2
 800b606:	d00b      	beq.n	800b620 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	330c      	adds	r3, #12
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d003      	beq.n	800b61a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	330c      	adds	r3, #12
 800b616:	61bb      	str	r3, [r7, #24]
 800b618:	e002      	b.n	800b620 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800b61a:	f06f 0303 	mvn.w	r3, #3
 800b61e:	e069      	b.n	800b6f4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b620:	4b3c      	ldr	r3, [pc, #240]	; (800b714 <etharp_output+0x1d4>)
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	4619      	mov	r1, r3
 800b626:	4a3c      	ldr	r2, [pc, #240]	; (800b718 <etharp_output+0x1d8>)
 800b628:	460b      	mov	r3, r1
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	440b      	add	r3, r1
 800b62e:	00db      	lsls	r3, r3, #3
 800b630:	4413      	add	r3, r2
 800b632:	3314      	adds	r3, #20
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d917      	bls.n	800b66a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	4b35      	ldr	r3, [pc, #212]	; (800b714 <etharp_output+0x1d4>)
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	4618      	mov	r0, r3
 800b644:	4934      	ldr	r1, [pc, #208]	; (800b718 <etharp_output+0x1d8>)
 800b646:	4603      	mov	r3, r0
 800b648:	005b      	lsls	r3, r3, #1
 800b64a:	4403      	add	r3, r0
 800b64c:	00db      	lsls	r3, r3, #3
 800b64e:	440b      	add	r3, r1
 800b650:	3304      	adds	r3, #4
 800b652:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800b654:	429a      	cmp	r2, r3
 800b656:	d108      	bne.n	800b66a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800b658:	4b2e      	ldr	r3, [pc, #184]	; (800b714 <etharp_output+0x1d4>)
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	461a      	mov	r2, r3
 800b65e:	68b9      	ldr	r1, [r7, #8]
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f7ff fed3 	bl	800b40c <etharp_output_to_arp_index>
 800b666:	4603      	mov	r3, r0
 800b668:	e044      	b.n	800b6f4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b66a:	2300      	movs	r3, #0
 800b66c:	75fb      	strb	r3, [r7, #23]
 800b66e:	e02a      	b.n	800b6c6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b670:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b674:	4928      	ldr	r1, [pc, #160]	; (800b718 <etharp_output+0x1d8>)
 800b676:	4613      	mov	r3, r2
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	4413      	add	r3, r2
 800b67c:	00db      	lsls	r3, r3, #3
 800b67e:	440b      	add	r3, r1
 800b680:	3314      	adds	r3, #20
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d918      	bls.n	800b6ba <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	6819      	ldr	r1, [r3, #0]
 800b68c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b690:	4821      	ldr	r0, [pc, #132]	; (800b718 <etharp_output+0x1d8>)
 800b692:	4613      	mov	r3, r2
 800b694:	005b      	lsls	r3, r3, #1
 800b696:	4413      	add	r3, r2
 800b698:	00db      	lsls	r3, r3, #3
 800b69a:	4403      	add	r3, r0
 800b69c:	3304      	adds	r3, #4
 800b69e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800b6a0:	4299      	cmp	r1, r3
 800b6a2:	d10a      	bne.n	800b6ba <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800b6a4:	7dfa      	ldrb	r2, [r7, #23]
 800b6a6:	4b1b      	ldr	r3, [pc, #108]	; (800b714 <etharp_output+0x1d4>)
 800b6a8:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	68b9      	ldr	r1, [r7, #8]
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f7ff feab 	bl	800b40c <etharp_output_to_arp_index>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	e01c      	b.n	800b6f4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800b6ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	75fb      	strb	r3, [r7, #23]
 800b6c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6ca:	2b09      	cmp	r3, #9
 800b6cc:	ddd0      	ble.n	800b670 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	69b9      	ldr	r1, [r7, #24]
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f000 f822 	bl	800b71c <etharp_query>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	e00b      	b.n	800b6f4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 800b6e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6e6:	9300      	str	r3, [sp, #0]
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	68b9      	ldr	r1, [r7, #8]
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f001 fcc9 	bl	800d084 <ethernet_output>
 800b6f2:	4603      	mov	r3, r0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3720      	adds	r7, #32
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	0800f75c 	.word	0x0800f75c
 800b700:	0800f8ac 	.word	0x0800f8ac
 800b704:	0800f7d4 	.word	0x0800f7d4
 800b708:	0800f8fc 	.word	0x0800f8fc
 800b70c:	0800f89c 	.word	0x0800f89c
 800b710:	0800fec4 	.word	0x0800fec4
 800b714:	200001f4 	.word	0x200001f4
 800b718:	20000104 	.word	0x20000104

0800b71c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08c      	sub	sp, #48	; 0x30
 800b720:	af02      	add	r7, sp, #8
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	332d      	adds	r3, #45	; 0x2d
 800b72c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800b72e:	23ff      	movs	r3, #255	; 0xff
 800b730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800b734:	2300      	movs	r3, #0
 800b736:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	68f9      	ldr	r1, [r7, #12]
 800b73e:	4618      	mov	r0, r3
 800b740:	f000 fdfe 	bl	800c340 <ip4_addr_isbroadcast_u32>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10c      	bne.n	800b764 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800b752:	2be0      	cmp	r3, #224	; 0xe0
 800b754:	d006      	beq.n	800b764 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d003      	beq.n	800b764 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d102      	bne.n	800b76a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b764:	f06f 030f 	mvn.w	r3, #15
 800b768:	e10f      	b.n	800b98a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	2101      	movs	r1, #1
 800b76e:	68b8      	ldr	r0, [r7, #8]
 800b770:	f7ff fba2 	bl	800aeb8 <etharp_find_entry>
 800b774:	4603      	mov	r3, r0
 800b776:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800b778:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	da02      	bge.n	800b786 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800b780:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b784:	e101      	b.n	800b98a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800b786:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b78a:	4982      	ldr	r1, [pc, #520]	; (800b994 <etharp_query+0x278>)
 800b78c:	4613      	mov	r3, r2
 800b78e:	005b      	lsls	r3, r3, #1
 800b790:	4413      	add	r3, r2
 800b792:	00db      	lsls	r3, r3, #3
 800b794:	440b      	add	r3, r1
 800b796:	3314      	adds	r3, #20
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d117      	bne.n	800b7ce <etharp_query+0xb2>
    is_new_entry = 1;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800b7a2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b7a6:	497b      	ldr	r1, [pc, #492]	; (800b994 <etharp_query+0x278>)
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	4413      	add	r3, r2
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	440b      	add	r3, r1
 800b7b2:	3314      	adds	r3, #20
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800b7b8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b7bc:	4975      	ldr	r1, [pc, #468]	; (800b994 <etharp_query+0x278>)
 800b7be:	4613      	mov	r3, r2
 800b7c0:	005b      	lsls	r3, r3, #1
 800b7c2:	4413      	add	r3, r2
 800b7c4:	00db      	lsls	r3, r3, #3
 800b7c6:	440b      	add	r3, r1
 800b7c8:	3308      	adds	r3, #8
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800b7ce:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b7d2:	4970      	ldr	r1, [pc, #448]	; (800b994 <etharp_query+0x278>)
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	005b      	lsls	r3, r3, #1
 800b7d8:	4413      	add	r3, r2
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	440b      	add	r3, r1
 800b7de:	3314      	adds	r3, #20
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d012      	beq.n	800b80c <etharp_query+0xf0>
 800b7e6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b7ea:	496a      	ldr	r1, [pc, #424]	; (800b994 <etharp_query+0x278>)
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	4413      	add	r3, r2
 800b7f2:	00db      	lsls	r3, r3, #3
 800b7f4:	440b      	add	r3, r1
 800b7f6:	3314      	adds	r3, #20
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d806      	bhi.n	800b80c <etharp_query+0xf0>
 800b7fe:	4b66      	ldr	r3, [pc, #408]	; (800b998 <etharp_query+0x27c>)
 800b800:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b804:	4965      	ldr	r1, [pc, #404]	; (800b99c <etharp_query+0x280>)
 800b806:	4866      	ldr	r0, [pc, #408]	; (800b9a0 <etharp_query+0x284>)
 800b808:	f001 fcf4 	bl	800d1f4 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d102      	bne.n	800b818 <etharp_query+0xfc>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10c      	bne.n	800b832 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800b818:	68b9      	ldr	r1, [r7, #8]
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f000 f976 	bl	800bb0c <etharp_request>
 800b820:	4603      	mov	r3, r0
 800b822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d102      	bne.n	800b832 <etharp_query+0x116>
      return result;
 800b82c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b830:	e0ab      	b.n	800b98a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d106      	bne.n	800b846 <etharp_query+0x12a>
 800b838:	4b57      	ldr	r3, [pc, #348]	; (800b998 <etharp_query+0x27c>)
 800b83a:	f240 32db 	movw	r2, #987	; 0x3db
 800b83e:	4959      	ldr	r1, [pc, #356]	; (800b9a4 <etharp_query+0x288>)
 800b840:	4857      	ldr	r0, [pc, #348]	; (800b9a0 <etharp_query+0x284>)
 800b842:	f001 fcd7 	bl	800d1f4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800b846:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b84a:	4952      	ldr	r1, [pc, #328]	; (800b994 <etharp_query+0x278>)
 800b84c:	4613      	mov	r3, r2
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	4413      	add	r3, r2
 800b852:	00db      	lsls	r3, r3, #3
 800b854:	440b      	add	r3, r1
 800b856:	3314      	adds	r3, #20
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d919      	bls.n	800b892 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800b85e:	7cfa      	ldrb	r2, [r7, #19]
 800b860:	4b51      	ldr	r3, [pc, #324]	; (800b9a8 <etharp_query+0x28c>)
 800b862:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800b864:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b868:	4613      	mov	r3, r2
 800b86a:	005b      	lsls	r3, r3, #1
 800b86c:	4413      	add	r3, r2
 800b86e:	00db      	lsls	r3, r3, #3
 800b870:	3308      	adds	r3, #8
 800b872:	4a48      	ldr	r2, [pc, #288]	; (800b994 <etharp_query+0x278>)
 800b874:	4413      	add	r3, r2
 800b876:	1d1a      	adds	r2, r3, #4
 800b878:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	4613      	mov	r3, r2
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	6879      	ldr	r1, [r7, #4]
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f001 fbfd 	bl	800d084 <ethernet_output>
 800b88a:	4603      	mov	r3, r0
 800b88c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b890:	e079      	b.n	800b986 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b892:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b896:	493f      	ldr	r1, [pc, #252]	; (800b994 <etharp_query+0x278>)
 800b898:	4613      	mov	r3, r2
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	4413      	add	r3, r2
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	440b      	add	r3, r1
 800b8a2:	3314      	adds	r3, #20
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d16d      	bne.n	800b986 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b8b2:	e01a      	b.n	800b8ea <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	895a      	ldrh	r2, [r3, #10]
 800b8b8:	69fb      	ldr	r3, [r7, #28]
 800b8ba:	891b      	ldrh	r3, [r3, #8]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d10a      	bne.n	800b8d6 <etharp_query+0x1ba>
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d006      	beq.n	800b8d6 <etharp_query+0x1ba>
 800b8c8:	4b33      	ldr	r3, [pc, #204]	; (800b998 <etharp_query+0x27c>)
 800b8ca:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800b8ce:	4937      	ldr	r1, [pc, #220]	; (800b9ac <etharp_query+0x290>)
 800b8d0:	4833      	ldr	r0, [pc, #204]	; (800b9a0 <etharp_query+0x284>)
 800b8d2:	f001 fc8f 	bl	800d1f4 <iprintf>
      if (p->type != PBUF_ROM) {
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	7b1b      	ldrb	r3, [r3, #12]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d002      	beq.n	800b8e4 <etharp_query+0x1c8>
        copy_needed = 1;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	61bb      	str	r3, [r7, #24]
        break;
 800b8e2:	e005      	b.n	800b8f0 <etharp_query+0x1d4>
      }
      p = p->next;
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	61fb      	str	r3, [r7, #28]
    while (p) {
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d1e1      	bne.n	800b8b4 <etharp_query+0x198>
    }
    if (copy_needed) {
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d017      	beq.n	800b926 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	891b      	ldrh	r3, [r3, #8]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	2002      	movs	r0, #2
 800b900:	f7f8 ff78 	bl	80047f4 <pbuf_alloc>
 800b904:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d011      	beq.n	800b930 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800b90c:	6879      	ldr	r1, [r7, #4]
 800b90e:	69f8      	ldr	r0, [r7, #28]
 800b910:	f7f9 fc18 	bl	8005144 <pbuf_copy>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d00a      	beq.n	800b930 <etharp_query+0x214>
          pbuf_free(p);
 800b91a:	69f8      	ldr	r0, [r7, #28]
 800b91c:	f7f9 fade 	bl	8004edc <pbuf_free>
          p = NULL;
 800b920:	2300      	movs	r3, #0
 800b922:	61fb      	str	r3, [r7, #28]
 800b924:	e004      	b.n	800b930 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800b92a:	69f8      	ldr	r0, [r7, #28]
 800b92c:	f7f9 fb82 	bl	8005034 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d024      	beq.n	800b980 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800b936:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b93a:	4916      	ldr	r1, [pc, #88]	; (800b994 <etharp_query+0x278>)
 800b93c:	4613      	mov	r3, r2
 800b93e:	005b      	lsls	r3, r3, #1
 800b940:	4413      	add	r3, r2
 800b942:	00db      	lsls	r3, r3, #3
 800b944:	440b      	add	r3, r1
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00b      	beq.n	800b964 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800b94c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b950:	4910      	ldr	r1, [pc, #64]	; (800b994 <etharp_query+0x278>)
 800b952:	4613      	mov	r3, r2
 800b954:	005b      	lsls	r3, r3, #1
 800b956:	4413      	add	r3, r2
 800b958:	00db      	lsls	r3, r3, #3
 800b95a:	440b      	add	r3, r1
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4618      	mov	r0, r3
 800b960:	f7f9 fabc 	bl	8004edc <pbuf_free>
      }
      arp_table[i].q = p;
 800b964:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800b968:	490a      	ldr	r1, [pc, #40]	; (800b994 <etharp_query+0x278>)
 800b96a:	4613      	mov	r3, r2
 800b96c:	005b      	lsls	r3, r3, #1
 800b96e:	4413      	add	r3, r2
 800b970:	00db      	lsls	r3, r3, #3
 800b972:	440b      	add	r3, r1
 800b974:	69fa      	ldr	r2, [r7, #28]
 800b976:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b97e:	e002      	b.n	800b986 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800b980:	23ff      	movs	r3, #255	; 0xff
 800b982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800b986:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3728      	adds	r7, #40	; 0x28
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	20000104 	.word	0x20000104
 800b998:	0800f75c 	.word	0x0800f75c
 800b99c:	0800f908 	.word	0x0800f908
 800b9a0:	0800f7d4 	.word	0x0800f7d4
 800b9a4:	0800f8fc 	.word	0x0800f8fc
 800b9a8:	200001f4 	.word	0x200001f4
 800b9ac:	0800f930 	.word	0x0800f930

0800b9b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b08a      	sub	sp, #40	; 0x28
 800b9b4:	af02      	add	r7, sp, #8
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
 800b9bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d106      	bne.n	800b9d6 <etharp_raw+0x26>
 800b9c8:	4b3a      	ldr	r3, [pc, #232]	; (800bab4 <etharp_raw+0x104>)
 800b9ca:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800b9ce:	493a      	ldr	r1, [pc, #232]	; (800bab8 <etharp_raw+0x108>)
 800b9d0:	483a      	ldr	r0, [pc, #232]	; (800babc <etharp_raw+0x10c>)
 800b9d2:	f001 fc0f 	bl	800d1f4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	211c      	movs	r1, #28
 800b9da:	2002      	movs	r0, #2
 800b9dc:	f7f8 ff0a 	bl	80047f4 <pbuf_alloc>
 800b9e0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d102      	bne.n	800b9ee <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800b9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ec:	e05d      	b.n	800baaa <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	895b      	ldrh	r3, [r3, #10]
 800b9f2:	2b1b      	cmp	r3, #27
 800b9f4:	d806      	bhi.n	800ba04 <etharp_raw+0x54>
 800b9f6:	4b2f      	ldr	r3, [pc, #188]	; (800bab4 <etharp_raw+0x104>)
 800b9f8:	f240 4264 	movw	r2, #1124	; 0x464
 800b9fc:	4930      	ldr	r1, [pc, #192]	; (800bac0 <etharp_raw+0x110>)
 800b9fe:	482f      	ldr	r0, [pc, #188]	; (800babc <etharp_raw+0x10c>)
 800ba00:	f001 fbf8 	bl	800d1f4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800ba0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7f8 f908 	bl	8003c22 <lwip_htons>
 800ba12:	4603      	mov	r3, r0
 800ba14:	461a      	mov	r2, r3
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ba20:	2b06      	cmp	r3, #6
 800ba22:	d006      	beq.n	800ba32 <etharp_raw+0x82>
 800ba24:	4b23      	ldr	r3, [pc, #140]	; (800bab4 <etharp_raw+0x104>)
 800ba26:	f240 426b 	movw	r2, #1131	; 0x46b
 800ba2a:	4926      	ldr	r1, [pc, #152]	; (800bac4 <etharp_raw+0x114>)
 800ba2c:	4823      	ldr	r0, [pc, #140]	; (800babc <etharp_raw+0x10c>)
 800ba2e:	f001 fbe1 	bl	800d1f4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	3308      	adds	r3, #8
 800ba36:	2206      	movs	r2, #6
 800ba38:	6839      	ldr	r1, [r7, #0]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f001 fbc7 	bl	800d1ce <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	3312      	adds	r3, #18
 800ba44:	2206      	movs	r2, #6
 800ba46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f001 fbc0 	bl	800d1ce <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	330e      	adds	r3, #14
 800ba52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba54:	6812      	ldr	r2, [r2, #0]
 800ba56:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	3318      	adds	r3, #24
 800ba5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba5e:	6812      	ldr	r2, [r2, #0]
 800ba60:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	2200      	movs	r2, #0
 800ba66:	701a      	strb	r2, [r3, #0]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f042 0201 	orr.w	r2, r2, #1
 800ba6e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f042 0208 	orr.w	r2, r2, #8
 800ba78:	709a      	strb	r2, [r3, #2]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	2206      	movs	r2, #6
 800ba82:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	2204      	movs	r2, #4
 800ba88:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ba8a:	f640 0306 	movw	r3, #2054	; 0x806
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	69b9      	ldr	r1, [r7, #24]
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f001 faf4 	bl	800d084 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ba9c:	69b8      	ldr	r0, [r7, #24]
 800ba9e:	f7f9 fa1d 	bl	8004edc <pbuf_free>
  p = NULL;
 800baa2:	2300      	movs	r3, #0
 800baa4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800baa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3720      	adds	r7, #32
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	0800f75c 	.word	0x0800f75c
 800bab8:	0800f8ac 	.word	0x0800f8ac
 800babc:	0800f7d4 	.word	0x0800f7d4
 800bac0:	0800f94c 	.word	0x0800f94c
 800bac4:	0800f980 	.word	0x0800f980

0800bac8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b088      	sub	sp, #32
 800bacc:	af04      	add	r7, sp, #16
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f103 012d 	add.w	r1, r3, #45	; 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bae4:	2201      	movs	r2, #1
 800bae6:	9203      	str	r2, [sp, #12]
 800bae8:	68ba      	ldr	r2, [r7, #8]
 800baea:	9202      	str	r2, [sp, #8]
 800baec:	4a06      	ldr	r2, [pc, #24]	; (800bb08 <etharp_request_dst+0x40>)
 800baee:	9201      	str	r2, [sp, #4]
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	4603      	mov	r3, r0
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f7ff ff5a 	bl	800b9b0 <etharp_raw>
 800bafc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	0800fecc 	.word	0x0800fecc

0800bb0c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800bb16:	4a05      	ldr	r2, [pc, #20]	; (800bb2c <etharp_request+0x20>)
 800bb18:	6839      	ldr	r1, [r7, #0]
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7ff ffd4 	bl	800bac8 <etharp_request_dst>
 800bb20:	4603      	mov	r3, r0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop
 800bb2c:	0800fec4 	.word	0x0800fec4

0800bb30 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b08e      	sub	sp, #56	; 0x38
 800bb34:	af04      	add	r7, sp, #16
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800bb3a:	4b7a      	ldr	r3, [pc, #488]	; (800bd24 <icmp_input+0x1f4>)
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800bb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	f003 030f 	and.w	r3, r3, #15
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800bb50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb52:	2b13      	cmp	r3, #19
 800bb54:	f240 80d1 	bls.w	800bcfa <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	895b      	ldrh	r3, [r3, #10]
 800bb5c:	2b03      	cmp	r3, #3
 800bb5e:	f240 80ce 	bls.w	800bcfe <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800bb6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	f000 80bb 	beq.w	800bcec <icmp_input+0x1bc>
 800bb76:	2b08      	cmp	r3, #8
 800bb78:	f040 80bb 	bne.w	800bcf2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800bb7c:	4b6a      	ldr	r3, [pc, #424]	; (800bd28 <icmp_input+0x1f8>)
 800bb7e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bb80:	4b68      	ldr	r3, [pc, #416]	; (800bd24 <icmp_input+0x1f4>)
 800bb82:	695b      	ldr	r3, [r3, #20]
 800bb84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb88:	2be0      	cmp	r3, #224	; 0xe0
 800bb8a:	f000 80bf 	beq.w	800bd0c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800bb8e:	4b65      	ldr	r3, [pc, #404]	; (800bd24 <icmp_input+0x1f4>)
 800bb90:	695a      	ldr	r2, [r3, #20]
 800bb92:	4b64      	ldr	r3, [pc, #400]	; (800bd24 <icmp_input+0x1f4>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4619      	mov	r1, r3
 800bb98:	4610      	mov	r0, r2
 800bb9a:	f000 fbd1 	bl	800c340 <ip4_addr_isbroadcast_u32>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f040 80b5 	bne.w	800bd10 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	891b      	ldrh	r3, [r3, #8]
 800bbaa:	2b07      	cmp	r3, #7
 800bbac:	f240 80a9 	bls.w	800bd02 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800bbb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbb2:	330e      	adds	r3, #14
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	b21b      	sxth	r3, r3
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f7f9 f96a 	bl	8004e94 <pbuf_header>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d046      	beq.n	800bc54 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	891a      	ldrh	r2, [r3, #8]
 800bbca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbcc:	4413      	add	r3, r2
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	2002      	movs	r0, #2
 800bbd6:	f7f8 fe0d 	bl	80047f4 <pbuf_alloc>
 800bbda:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f000 8098 	beq.w	800bd14 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	895b      	ldrh	r3, [r3, #10]
 800bbe8:	461a      	mov	r2, r3
 800bbea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bbec:	3308      	adds	r3, #8
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d203      	bcs.n	800bbfa <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800bbf2:	69b8      	ldr	r0, [r7, #24]
 800bbf4:	f7f9 f972 	bl	8004edc <pbuf_free>
        goto icmperr;
 800bbf8:	e08d      	b.n	800bd16 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bc00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc02:	4618      	mov	r0, r3
 800bc04:	f001 fae3 	bl	800d1ce <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800bc08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc0a:	425b      	negs	r3, r3
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	b21b      	sxth	r3, r3
 800bc10:	4619      	mov	r1, r3
 800bc12:	69b8      	ldr	r0, [r7, #24]
 800bc14:	f7f9 f93e 	bl	8004e94 <pbuf_header>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d009      	beq.n	800bc32 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800bc1e:	4b43      	ldr	r3, [pc, #268]	; (800bd2c <icmp_input+0x1fc>)
 800bc20:	22af      	movs	r2, #175	; 0xaf
 800bc22:	4943      	ldr	r1, [pc, #268]	; (800bd30 <icmp_input+0x200>)
 800bc24:	4843      	ldr	r0, [pc, #268]	; (800bd34 <icmp_input+0x204>)
 800bc26:	f001 fae5 	bl	800d1f4 <iprintf>
        pbuf_free(r);
 800bc2a:	69b8      	ldr	r0, [r7, #24]
 800bc2c:	f7f9 f956 	bl	8004edc <pbuf_free>
        goto icmperr;
 800bc30:	e071      	b.n	800bd16 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	69b8      	ldr	r0, [r7, #24]
 800bc36:	f7f9 fa85 	bl	8005144 <pbuf_copy>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d003      	beq.n	800bc48 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800bc40:	69b8      	ldr	r0, [r7, #24]
 800bc42:	f7f9 f94b 	bl	8004edc <pbuf_free>
        goto icmperr;
 800bc46:	e066      	b.n	800bd16 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f7f9 f947 	bl	8004edc <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	607b      	str	r3, [r7, #4]
 800bc52:	e015      	b.n	800bc80 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800bc54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bc56:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800bc5a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800bc5e:	33f2      	adds	r3, #242	; 0xf2
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	b21b      	sxth	r3, r3
 800bc64:	4619      	mov	r1, r3
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f7f9 f914 	bl	8004e94 <pbuf_header>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d006      	beq.n	800bc80 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800bc72:	4b2e      	ldr	r3, [pc, #184]	; (800bd2c <icmp_input+0x1fc>)
 800bc74:	22c0      	movs	r2, #192	; 0xc0
 800bc76:	4930      	ldr	r1, [pc, #192]	; (800bd38 <icmp_input+0x208>)
 800bc78:	482e      	ldr	r0, [pc, #184]	; (800bd34 <icmp_input+0x204>)
 800bc7a:	f001 fabb 	bl	800d1f4 <iprintf>
        goto icmperr;
 800bc7e:	e04a      	b.n	800bd16 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800bc86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7f9 f901 	bl	8004e94 <pbuf_header>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d12b      	bne.n	800bcf0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800bca6:	4b1f      	ldr	r3, [pc, #124]	; (800bd24 <icmp_input+0x1f4>)
 800bca8:	691a      	ldr	r2, [r3, #16]
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	709a      	strb	r2, [r3, #2]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	22ff      	movs	r2, #255	; 0xff
 800bcc2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	729a      	strb	r2, [r3, #10]
 800bcca:	2200      	movs	r2, #0
 800bccc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	9302      	str	r3, [sp, #8]
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	9301      	str	r3, [sp, #4]
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	23ff      	movs	r3, #255	; 0xff
 800bcdc:	2200      	movs	r2, #0
 800bcde:	69f9      	ldr	r1, [r7, #28]
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 fa5b 	bl	800c19c <ip4_output_if>
 800bce6:	4603      	mov	r3, r0
 800bce8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800bcea:	e001      	b.n	800bcf0 <icmp_input+0x1c0>
    break;
 800bcec:	bf00      	nop
 800bcee:	e000      	b.n	800bcf2 <icmp_input+0x1c2>
    break;
 800bcf0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f7f9 f8f2 	bl	8004edc <pbuf_free>
  return;
 800bcf8:	e011      	b.n	800bd1e <icmp_input+0x1ee>
    goto lenerr;
 800bcfa:	bf00      	nop
 800bcfc:	e002      	b.n	800bd04 <icmp_input+0x1d4>
    goto lenerr;
 800bcfe:	bf00      	nop
 800bd00:	e000      	b.n	800bd04 <icmp_input+0x1d4>
      goto lenerr;
 800bd02:	bf00      	nop
lenerr:
  pbuf_free(p);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7f9 f8e9 	bl	8004edc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bd0a:	e008      	b.n	800bd1e <icmp_input+0x1ee>
      goto icmperr;
 800bd0c:	bf00      	nop
 800bd0e:	e002      	b.n	800bd16 <icmp_input+0x1e6>
      goto icmperr;
 800bd10:	bf00      	nop
 800bd12:	e000      	b.n	800bd16 <icmp_input+0x1e6>
        goto icmperr;
 800bd14:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7f9 f8e0 	bl	8004edc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800bd1c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800bd1e:	3728      	adds	r7, #40	; 0x28
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	200033f8 	.word	0x200033f8
 800bd28:	2000340c 	.word	0x2000340c
 800bd2c:	0800f9c4 	.word	0x0800f9c4
 800bd30:	0800f9fc 	.word	0x0800f9fc
 800bd34:	0800fa34 	.word	0x0800fa34
 800bd38:	0800fa5c 	.word	0x0800fa5c

0800bd3c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800bd48:	78fb      	ldrb	r3, [r7, #3]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	2103      	movs	r1, #3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f814 	bl	800bd7c <icmp_send_response>
}
 800bd54:	bf00      	nop
 800bd56:	3708      	adds	r7, #8
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b082      	sub	sp, #8
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800bd68:	78fb      	ldrb	r3, [r7, #3]
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	210b      	movs	r1, #11
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 f804 	bl	800bd7c <icmp_send_response>
}
 800bd74:	bf00      	nop
 800bd76:	3708      	adds	r7, #8
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b08c      	sub	sp, #48	; 0x30
 800bd80:	af04      	add	r7, sp, #16
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70fb      	strb	r3, [r7, #3]
 800bd88:	4613      	mov	r3, r2
 800bd8a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2124      	movs	r1, #36	; 0x24
 800bd90:	2001      	movs	r0, #1
 800bd92:	f7f8 fd2f 	bl	80047f4 <pbuf_alloc>
 800bd96:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d04c      	beq.n	800be38 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	895b      	ldrh	r3, [r3, #10]
 800bda2:	2b23      	cmp	r3, #35	; 0x23
 800bda4:	d806      	bhi.n	800bdb4 <icmp_send_response+0x38>
 800bda6:	4b26      	ldr	r3, [pc, #152]	; (800be40 <icmp_send_response+0xc4>)
 800bda8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800bdac:	4925      	ldr	r1, [pc, #148]	; (800be44 <icmp_send_response+0xc8>)
 800bdae:	4826      	ldr	r0, [pc, #152]	; (800be48 <icmp_send_response+0xcc>)
 800bdb0:	f001 fa20 	bl	800d1f4 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	78fa      	ldrb	r2, [r7, #3]
 800bdc4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	78ba      	ldrb	r2, [r7, #2]
 800bdca:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	711a      	strb	r2, [r3, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	719a      	strb	r2, [r3, #6]
 800bddc:	2200      	movs	r2, #0
 800bdde:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	f103 0008 	add.w	r0, r3, #8
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	221c      	movs	r2, #28
 800bdee:	4619      	mov	r1, r3
 800bdf0:	f001 f9ed 	bl	800d1ce <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800bdfa:	f107 030c 	add.w	r3, r7, #12
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 f824 	bl	800be4c <ip4_route>
 800be04:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d011      	beq.n	800be30 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	2200      	movs	r2, #0
 800be10:	709a      	strb	r2, [r3, #2]
 800be12:	2200      	movs	r2, #0
 800be14:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800be16:	f107 020c 	add.w	r2, r7, #12
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	9302      	str	r3, [sp, #8]
 800be1e:	2301      	movs	r3, #1
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	2300      	movs	r3, #0
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	23ff      	movs	r3, #255	; 0xff
 800be28:	2100      	movs	r1, #0
 800be2a:	69f8      	ldr	r0, [r7, #28]
 800be2c:	f000 f9b6 	bl	800c19c <ip4_output_if>
  }
  pbuf_free(q);
 800be30:	69f8      	ldr	r0, [r7, #28]
 800be32:	f7f9 f853 	bl	8004edc <pbuf_free>
 800be36:	e000      	b.n	800be3a <icmp_send_response+0xbe>
    return;
 800be38:	bf00      	nop
}
 800be3a:	3720      	adds	r7, #32
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	0800f9c4 	.word	0x0800f9c4
 800be44:	0800fa90 	.word	0x0800fa90
 800be48:	0800fa34 	.word	0x0800fa34

0800be4c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800be54:	4b30      	ldr	r3, [pc, #192]	; (800bf18 <ip4_route+0xcc>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	60fb      	str	r3, [r7, #12]
 800be5a:	e036      	b.n	800beca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800be62:	f003 0301 	and.w	r3, r3, #1
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d02b      	beq.n	800bec4 <ip4_route+0x78>
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800be72:	089b      	lsrs	r3, r3, #2
 800be74:	f003 0301 	and.w	r3, r3, #1
 800be78:	b2db      	uxtb	r3, r3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d022      	beq.n	800bec4 <ip4_route+0x78>
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	3304      	adds	r3, #4
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d01d      	beq.n	800bec4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	3304      	adds	r3, #4
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	405a      	eors	r2, r3
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	3308      	adds	r3, #8
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4013      	ands	r3, r2
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d101      	bne.n	800bea4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	e033      	b.n	800bf0c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800beaa:	f003 0302 	and.w	r3, r3, #2
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d108      	bne.n	800bec4 <ip4_route+0x78>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	330c      	adds	r3, #12
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d101      	bne.n	800bec4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	e023      	b.n	800bf0c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	60fb      	str	r3, [r7, #12]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1c5      	bne.n	800be5c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bed0:	4b12      	ldr	r3, [pc, #72]	; (800bf1c <ip4_route+0xd0>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d015      	beq.n	800bf04 <ip4_route+0xb8>
 800bed8:	4b10      	ldr	r3, [pc, #64]	; (800bf1c <ip4_route+0xd0>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800bee0:	f003 0301 	and.w	r3, r3, #1
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00d      	beq.n	800bf04 <ip4_route+0xb8>
 800bee8:	4b0c      	ldr	r3, [pc, #48]	; (800bf1c <ip4_route+0xd0>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800bef0:	f003 0304 	and.w	r3, r3, #4
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d005      	beq.n	800bf04 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800bef8:	4b08      	ldr	r3, [pc, #32]	; (800bf1c <ip4_route+0xd0>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3304      	adds	r3, #4
 800befe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d101      	bne.n	800bf08 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800bf04:	2300      	movs	r3, #0
 800bf06:	e001      	b.n	800bf0c <ip4_route+0xc0>
  }

  return netif_default;
 800bf08:	4b04      	ldr	r3, [pc, #16]	; (800bf1c <ip4_route+0xd0>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3714      	adds	r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr
 800bf18:	2000c6b8 	.word	0x2000c6b8
 800bf1c:	2000c6bc 	.word	0x2000c6bc

0800bf20 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	091b      	lsrs	r3, r3, #4
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b04      	cmp	r3, #4
 800bf3a:	d004      	beq.n	800bf46 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f7f8 ffcd 	bl	8004edc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	e122      	b.n	800c18c <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	f003 030f 	and.w	r3, r3, #15
 800bf50:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800bf52:	897b      	ldrh	r3, [r7, #10]
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	885b      	ldrh	r3, [r3, #2]
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7f7 fe5f 	bl	8003c22 <lwip_htons>
 800bf64:	4603      	mov	r3, r0
 800bf66:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	891b      	ldrh	r3, [r3, #8]
 800bf6c:	893a      	ldrh	r2, [r7, #8]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d204      	bcs.n	800bf7c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800bf72:	893b      	ldrh	r3, [r7, #8]
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7f8 fe3c 	bl	8004bf4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	895b      	ldrh	r3, [r3, #10]
 800bf80:	897a      	ldrh	r2, [r7, #10]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d807      	bhi.n	800bf96 <ip4_input+0x76>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	891b      	ldrh	r3, [r3, #8]
 800bf8a:	893a      	ldrh	r2, [r7, #8]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d802      	bhi.n	800bf96 <ip4_input+0x76>
 800bf90:	897b      	ldrh	r3, [r7, #10]
 800bf92:	2b13      	cmp	r3, #19
 800bf94:	d804      	bhi.n	800bfa0 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f7f8 ffa0 	bl	8004edc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	e0f5      	b.n	800c18c <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	4a7b      	ldr	r2, [pc, #492]	; (800c194 <ip4_input+0x274>)
 800bfa6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	4a79      	ldr	r2, [pc, #484]	; (800c194 <ip4_input+0x274>)
 800bfae:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800bfb0:	4b78      	ldr	r3, [pc, #480]	; (800c194 <ip4_input+0x274>)
 800bfb2:	695b      	ldr	r3, [r3, #20]
 800bfb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bfb8:	2be0      	cmp	r3, #224	; 0xe0
 800bfba:	d112      	bne.n	800bfe2 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d007      	beq.n	800bfdc <ip4_input+0xbc>
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <ip4_input+0xbc>
      netif = inp;
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	613b      	str	r3, [r7, #16]
 800bfda:	e041      	b.n	800c060 <ip4_input+0x140>
    } else {
      netif = NULL;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	613b      	str	r3, [r7, #16]
 800bfe0:	e03e      	b.n	800c060 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800bff0:	f003 0301 	and.w	r3, r3, #1
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d014      	beq.n	800c024 <ip4_input+0x104>
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	3304      	adds	r3, #4
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d00f      	beq.n	800c024 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c004:	4b63      	ldr	r3, [pc, #396]	; (800c194 <ip4_input+0x274>)
 800c006:	695a      	ldr	r2, [r3, #20]
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	3304      	adds	r3, #4
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d026      	beq.n	800c060 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c012:	4b60      	ldr	r3, [pc, #384]	; (800c194 <ip4_input+0x274>)
 800c014:	695b      	ldr	r3, [r3, #20]
 800c016:	6939      	ldr	r1, [r7, #16]
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 f991 	bl	800c340 <ip4_addr_isbroadcast_u32>
 800c01e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c020:	2b00      	cmp	r3, #0
 800c022:	d11d      	bne.n	800c060 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00d      	beq.n	800c046 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800c02a:	4b5a      	ldr	r3, [pc, #360]	; (800c194 <ip4_input+0x274>)
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	2b7f      	cmp	r3, #127	; 0x7f
 800c032:	d102      	bne.n	800c03a <ip4_input+0x11a>
          netif = NULL;
 800c034:	2300      	movs	r3, #0
 800c036:	613b      	str	r3, [r7, #16]
          break;
 800c038:	e012      	b.n	800c060 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800c03e:	4b56      	ldr	r3, [pc, #344]	; (800c198 <ip4_input+0x278>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	613b      	str	r3, [r7, #16]
 800c044:	e002      	b.n	800c04c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800c04c:	693a      	ldr	r2, [r7, #16]
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	429a      	cmp	r2, r3
 800c052:	d102      	bne.n	800c05a <ip4_input+0x13a>
        netif = netif->next;
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1c4      	bne.n	800bfea <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c060:	4b4c      	ldr	r3, [pc, #304]	; (800c194 <ip4_input+0x274>)
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	4618      	mov	r0, r3
 800c068:	f000 f96a 	bl	800c340 <ip4_addr_isbroadcast_u32>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d105      	bne.n	800c07e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c072:	4b48      	ldr	r3, [pc, #288]	; (800c194 <ip4_input+0x274>)
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c07a:	2be0      	cmp	r3, #224	; 0xe0
 800c07c:	d104      	bne.n	800c088 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7f8 ff2c 	bl	8004edc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	e081      	b.n	800c18c <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d104      	bne.n	800c098 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7f8 ff24 	bl	8004edc <pbuf_free>
    return ERR_OK;
 800c094:	2300      	movs	r3, #0
 800c096:	e079      	b.n	800c18c <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	88db      	ldrh	r3, [r3, #6]
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	461a      	mov	r2, r3
 800c0a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00b      	beq.n	800c0c2 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fc8e 	bl	800c9cc <ip4_reass>
 800c0b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d101      	bne.n	800c0bc <ip4_input+0x19c>
      return ERR_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	e067      	b.n	800c18c <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c0c2:	4a34      	ldr	r2, [pc, #208]	; (800c194 <ip4_input+0x274>)
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c0c8:	4a32      	ldr	r2, [pc, #200]	; (800c194 <ip4_input+0x274>)
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c0ce:	4a31      	ldr	r2, [pc, #196]	; (800c194 <ip4_input+0x274>)
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	f003 030f 	and.w	r3, r3, #15
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	b29a      	uxth	r2, r3
 800c0e4:	4b2b      	ldr	r3, [pc, #172]	; (800c194 <ip4_input+0x274>)
 800c0e6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800c0e8:	897b      	ldrh	r3, [r7, #10]
 800c0ea:	425b      	negs	r3, r3
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	b21b      	sxth	r3, r3
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7f8 fece 	bl	8004e94 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	7a5b      	ldrb	r3, [r3, #9]
 800c0fc:	2b06      	cmp	r3, #6
 800c0fe:	d009      	beq.n	800c114 <ip4_input+0x1f4>
 800c100:	2b11      	cmp	r3, #17
 800c102:	d002      	beq.n	800c10a <ip4_input+0x1ea>
 800c104:	2b01      	cmp	r3, #1
 800c106:	d00a      	beq.n	800c11e <ip4_input+0x1fe>
 800c108:	e00e      	b.n	800c128 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800c10a:	6839      	ldr	r1, [r7, #0]
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7fe fce3 	bl	800aad8 <udp_input>
      break;
 800c112:	e028      	b.n	800c166 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7fa fd86 	bl	8006c28 <tcp_input>
      break;
 800c11c:	e023      	b.n	800c166 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f7ff fd05 	bl	800bb30 <icmp_input>
      break;
 800c126:	e01e      	b.n	800c166 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c128:	4b1a      	ldr	r3, [pc, #104]	; (800c194 <ip4_input+0x274>)
 800c12a:	695b      	ldr	r3, [r3, #20]
 800c12c:	6939      	ldr	r1, [r7, #16]
 800c12e:	4618      	mov	r0, r3
 800c130:	f000 f906 	bl	800c340 <ip4_addr_isbroadcast_u32>
 800c134:	4603      	mov	r3, r0
 800c136:	2b00      	cmp	r3, #0
 800c138:	d112      	bne.n	800c160 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c13a:	4b16      	ldr	r3, [pc, #88]	; (800c194 <ip4_input+0x274>)
 800c13c:	695b      	ldr	r3, [r3, #20]
 800c13e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c142:	2be0      	cmp	r3, #224	; 0xe0
 800c144:	d00c      	beq.n	800c160 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800c146:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c14a:	4619      	mov	r1, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7f8 feb3 	bl	8004eb8 <pbuf_header_force>
        p->payload = iphdr;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	697a      	ldr	r2, [r7, #20]
 800c156:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c158:	2102      	movs	r1, #2
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7ff fdee 	bl	800bd3c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7f8 febb 	bl	8004edc <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c166:	4b0b      	ldr	r3, [pc, #44]	; (800c194 <ip4_input+0x274>)
 800c168:	2200      	movs	r2, #0
 800c16a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c16c:	4b09      	ldr	r3, [pc, #36]	; (800c194 <ip4_input+0x274>)
 800c16e:	2200      	movs	r2, #0
 800c170:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c172:	4b08      	ldr	r3, [pc, #32]	; (800c194 <ip4_input+0x274>)
 800c174:	2200      	movs	r2, #0
 800c176:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c178:	4b06      	ldr	r3, [pc, #24]	; (800c194 <ip4_input+0x274>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c17e:	4b05      	ldr	r3, [pc, #20]	; (800c194 <ip4_input+0x274>)
 800c180:	2200      	movs	r2, #0
 800c182:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c184:	4b03      	ldr	r3, [pc, #12]	; (800c194 <ip4_input+0x274>)
 800c186:	2200      	movs	r2, #0
 800c188:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3718      	adds	r7, #24
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	200033f8 	.word	0x200033f8
 800c198:	2000c6b8 	.word	0x2000c6b8

0800c19c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b08a      	sub	sp, #40	; 0x28
 800c1a0:	af04      	add	r7, sp, #16
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	607a      	str	r2, [r7, #4]
 800c1a8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d009      	beq.n	800c1c8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <ip4_output_if+0x26>
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d102      	bne.n	800c1c8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c1c8:	78fa      	ldrb	r2, [r7, #3]
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	9302      	str	r3, [sp, #8]
 800c1ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c1d2:	9301      	str	r3, [sp, #4]
 800c1d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	4613      	mov	r3, r2
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	6979      	ldr	r1, [r7, #20]
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f000 f805 	bl	800c1f0 <ip4_output_if_src>
 800c1e6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3718      	adds	r7, #24
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b088      	sub	sp, #32
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
 800c1fc:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	89db      	ldrh	r3, [r3, #14]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d006      	beq.n	800c214 <ip4_output_if_src+0x24>
 800c206:	4b48      	ldr	r3, [pc, #288]	; (800c328 <ip4_output_if_src+0x138>)
 800c208:	f240 3233 	movw	r2, #819	; 0x333
 800c20c:	4947      	ldr	r1, [pc, #284]	; (800c32c <ip4_output_if_src+0x13c>)
 800c20e:	4848      	ldr	r0, [pc, #288]	; (800c330 <ip4_output_if_src+0x140>)
 800c210:	f000 fff0 	bl	800d1f4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d060      	beq.n	800c2dc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c21a:	2314      	movs	r3, #20
 800c21c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800c21e:	2114      	movs	r1, #20
 800c220:	68f8      	ldr	r0, [r7, #12]
 800c222:	f7f8 fe37 	bl	8004e94 <pbuf_header>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d002      	beq.n	800c232 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c22c:	f06f 0301 	mvn.w	r3, #1
 800c230:	e075      	b.n	800c31e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	895b      	ldrh	r3, [r3, #10]
 800c23c:	2b13      	cmp	r3, #19
 800c23e:	d806      	bhi.n	800c24e <ip4_output_if_src+0x5e>
 800c240:	4b39      	ldr	r3, [pc, #228]	; (800c328 <ip4_output_if_src+0x138>)
 800c242:	f240 3261 	movw	r2, #865	; 0x361
 800c246:	493b      	ldr	r1, [pc, #236]	; (800c334 <ip4_output_if_src+0x144>)
 800c248:	4839      	ldr	r0, [pc, #228]	; (800c330 <ip4_output_if_src+0x140>)
 800c24a:	f000 ffd3 	bl	800d1f4 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	78fa      	ldrb	r2, [r7, #3]
 800c252:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c254:	69fb      	ldr	r3, [r7, #28]
 800c256:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c25a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c264:	8b7b      	ldrh	r3, [r7, #26]
 800c266:	089b      	lsrs	r3, r3, #2
 800c268:	b29b      	uxth	r3, r3
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c270:	b2da      	uxtb	r2, r3
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c276:	69fb      	ldr	r3, [r7, #28]
 800c278:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c27c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	891b      	ldrh	r3, [r3, #8]
 800c282:	4618      	mov	r0, r3
 800c284:	f7f7 fccd 	bl	8003c22 <lwip_htons>
 800c288:	4603      	mov	r3, r0
 800c28a:	461a      	mov	r2, r3
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	2200      	movs	r2, #0
 800c294:	719a      	strb	r2, [r3, #6]
 800c296:	2200      	movs	r2, #0
 800c298:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c29a:	4b27      	ldr	r3, [pc, #156]	; (800c338 <ip4_output_if_src+0x148>)
 800c29c:	881b      	ldrh	r3, [r3, #0]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f7f7 fcbf 	bl	8003c22 <lwip_htons>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c2ac:	4b22      	ldr	r3, [pc, #136]	; (800c338 <ip4_output_if_src+0x148>)
 800c2ae:	881b      	ldrh	r3, [r3, #0]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	4b20      	ldr	r3, [pc, #128]	; (800c338 <ip4_output_if_src+0x148>)
 800c2b6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d104      	bne.n	800c2c8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c2be:	4b1f      	ldr	r3, [pc, #124]	; (800c33c <ip4_output_if_src+0x14c>)
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	60da      	str	r2, [r3, #12]
 800c2c6:	e003      	b.n	800c2d0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	729a      	strb	r2, [r3, #10]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	72da      	strb	r2, [r3, #11]
 800c2da:	e008      	b.n	800c2ee <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	691b      	ldr	r3, [r3, #16]
 800c2e6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c2e8:	f107 0314 	add.w	r3, r7, #20
 800c2ec:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00c      	beq.n	800c310 <ip4_output_if_src+0x120>
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	891a      	ldrh	r2, [r3, #8]
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d906      	bls.n	800c310 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c306:	68f8      	ldr	r0, [r7, #12]
 800c308:	f000 fd0a 	bl	800cd20 <ip4_frag>
 800c30c:	4603      	mov	r3, r0
 800c30e:	e006      	b.n	800c31e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c312:	695b      	ldr	r3, [r3, #20]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	68f9      	ldr	r1, [r7, #12]
 800c318:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c31a:	4798      	blx	r3
 800c31c:	4603      	mov	r3, r0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3720      	adds	r7, #32
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	0800fabc 	.word	0x0800fabc
 800c32c:	0800faf0 	.word	0x0800faf0
 800c330:	0800fafc 	.word	0x0800fafc
 800c334:	0800fb24 	.word	0x0800fb24
 800c338:	200001f6 	.word	0x200001f6
 800c33c:	0800fec0 	.word	0x0800fec0

0800c340 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c354:	d002      	beq.n	800c35c <ip4_addr_isbroadcast_u32+0x1c>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d101      	bne.n	800c360 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c35c:	2301      	movs	r3, #1
 800c35e:	e02a      	b.n	800c3b6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800c366:	f003 0302 	and.w	r3, r3, #2
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d101      	bne.n	800c372 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c36e:	2300      	movs	r3, #0
 800c370:	e021      	b.n	800c3b6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	3304      	adds	r3, #4
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	429a      	cmp	r2, r3
 800c37c:	d101      	bne.n	800c382 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c37e:	2300      	movs	r3, #0
 800c380:	e019      	b.n	800c3b6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	3304      	adds	r3, #4
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	405a      	eors	r2, r3
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	3308      	adds	r3, #8
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	4013      	ands	r3, r2
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10d      	bne.n	800c3b4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	3308      	adds	r3, #8
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	43da      	mvns	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	3308      	adds	r3, #8
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d101      	bne.n	800c3b4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e000      	b.n	800c3b6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c3b4:	2300      	movs	r3, #0
  }
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
	...

0800c3c4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b084      	sub	sp, #16
 800c3c8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c3ce:	4b12      	ldr	r3, [pc, #72]	; (800c418 <ip_reass_tmr+0x54>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c3d4:	e018      	b.n	800c408 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	7fdb      	ldrb	r3, [r3, #31]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00b      	beq.n	800c3f6 <ip_reass_tmr+0x32>
      r->timer--;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	7fdb      	ldrb	r3, [r3, #31]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	b2da      	uxtb	r2, r3
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	e008      	b.n	800c408 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c400:	68b9      	ldr	r1, [r7, #8]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 f80a 	bl	800c41c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1e3      	bne.n	800c3d6 <ip_reass_tmr+0x12>
     }
   }
}
 800c40e:	bf00      	nop
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	200001f8 	.word	0x200001f8

0800c41c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b088      	sub	sp, #32
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c42a:	683a      	ldr	r2, [r7, #0]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d105      	bne.n	800c43e <ip_reass_free_complete_datagram+0x22>
 800c432:	4b45      	ldr	r3, [pc, #276]	; (800c548 <ip_reass_free_complete_datagram+0x12c>)
 800c434:	22ab      	movs	r2, #171	; 0xab
 800c436:	4945      	ldr	r1, [pc, #276]	; (800c54c <ip_reass_free_complete_datagram+0x130>)
 800c438:	4845      	ldr	r0, [pc, #276]	; (800c550 <ip_reass_free_complete_datagram+0x134>)
 800c43a:	f000 fedb 	bl	800d1f4 <iprintf>
  if (prev != NULL) {
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d00a      	beq.n	800c45a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d005      	beq.n	800c45a <ip_reass_free_complete_datagram+0x3e>
 800c44e:	4b3e      	ldr	r3, [pc, #248]	; (800c548 <ip_reass_free_complete_datagram+0x12c>)
 800c450:	22ad      	movs	r2, #173	; 0xad
 800c452:	4940      	ldr	r1, [pc, #256]	; (800c554 <ip_reass_free_complete_datagram+0x138>)
 800c454:	483e      	ldr	r0, [pc, #248]	; (800c550 <ip_reass_free_complete_datagram+0x134>)
 800c456:	f000 fecd 	bl	800d1f4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	889b      	ldrh	r3, [r3, #4]
 800c466:	b29b      	uxth	r3, r3
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d12a      	bne.n	800c4c2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	6858      	ldr	r0, [r3, #4]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	3308      	adds	r3, #8
 800c482:	2214      	movs	r2, #20
 800c484:	4619      	mov	r1, r3
 800c486:	f000 fea2 	bl	800d1ce <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c48a:	2101      	movs	r1, #1
 800c48c:	69b8      	ldr	r0, [r7, #24]
 800c48e:	f7ff fc65 	bl	800bd5c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c492:	69b8      	ldr	r0, [r7, #24]
 800c494:	f7f8 fdb6 	bl	8005004 <pbuf_clen>
 800c498:	4603      	mov	r3, r0
 800c49a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c49c:	8bfa      	ldrh	r2, [r7, #30]
 800c49e:	8a7b      	ldrh	r3, [r7, #18]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4a6:	db05      	blt.n	800c4b4 <ip_reass_free_complete_datagram+0x98>
 800c4a8:	4b27      	ldr	r3, [pc, #156]	; (800c548 <ip_reass_free_complete_datagram+0x12c>)
 800c4aa:	22bc      	movs	r2, #188	; 0xbc
 800c4ac:	492a      	ldr	r1, [pc, #168]	; (800c558 <ip_reass_free_complete_datagram+0x13c>)
 800c4ae:	4828      	ldr	r0, [pc, #160]	; (800c550 <ip_reass_free_complete_datagram+0x134>)
 800c4b0:	f000 fea0 	bl	800d1f4 <iprintf>
    pbufs_freed += clen;
 800c4b4:	8bfa      	ldrh	r2, [r7, #30]
 800c4b6:	8a7b      	ldrh	r3, [r7, #18]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c4bc:	69b8      	ldr	r0, [r7, #24]
 800c4be:	f7f8 fd0d 	bl	8004edc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800c4c8:	e01f      	b.n	800c50a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	617b      	str	r3, [r7, #20]
    pcur = p;
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f7f8 fd92 	bl	8005004 <pbuf_clen>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c4e4:	8bfa      	ldrh	r2, [r7, #30]
 800c4e6:	8a7b      	ldrh	r3, [r7, #18]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4ee:	db05      	blt.n	800c4fc <ip_reass_free_complete_datagram+0xe0>
 800c4f0:	4b15      	ldr	r3, [pc, #84]	; (800c548 <ip_reass_free_complete_datagram+0x12c>)
 800c4f2:	22cc      	movs	r2, #204	; 0xcc
 800c4f4:	4918      	ldr	r1, [pc, #96]	; (800c558 <ip_reass_free_complete_datagram+0x13c>)
 800c4f6:	4816      	ldr	r0, [pc, #88]	; (800c550 <ip_reass_free_complete_datagram+0x134>)
 800c4f8:	f000 fe7c 	bl	800d1f4 <iprintf>
    pbufs_freed += clen;
 800c4fc:	8bfa      	ldrh	r2, [r7, #30]
 800c4fe:	8a7b      	ldrh	r3, [r7, #18]
 800c500:	4413      	add	r3, r2
 800c502:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f7f8 fce9 	bl	8004edc <pbuf_free>
  while (p != NULL) {
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d1dc      	bne.n	800c4ca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 f8c2 	bl	800c69c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800c518:	4b10      	ldr	r3, [pc, #64]	; (800c55c <ip_reass_free_complete_datagram+0x140>)
 800c51a:	881b      	ldrh	r3, [r3, #0]
 800c51c:	8bfa      	ldrh	r2, [r7, #30]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d905      	bls.n	800c52e <ip_reass_free_complete_datagram+0x112>
 800c522:	4b09      	ldr	r3, [pc, #36]	; (800c548 <ip_reass_free_complete_datagram+0x12c>)
 800c524:	22d2      	movs	r2, #210	; 0xd2
 800c526:	490e      	ldr	r1, [pc, #56]	; (800c560 <ip_reass_free_complete_datagram+0x144>)
 800c528:	4809      	ldr	r0, [pc, #36]	; (800c550 <ip_reass_free_complete_datagram+0x134>)
 800c52a:	f000 fe63 	bl	800d1f4 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800c52e:	4b0b      	ldr	r3, [pc, #44]	; (800c55c <ip_reass_free_complete_datagram+0x140>)
 800c530:	881a      	ldrh	r2, [r3, #0]
 800c532:	8bfb      	ldrh	r3, [r7, #30]
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	b29a      	uxth	r2, r3
 800c538:	4b08      	ldr	r3, [pc, #32]	; (800c55c <ip_reass_free_complete_datagram+0x140>)
 800c53a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800c53c:	8bfb      	ldrh	r3, [r7, #30]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3720      	adds	r7, #32
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	0800fb54 	.word	0x0800fb54
 800c54c:	0800fb90 	.word	0x0800fb90
 800c550:	0800fb9c 	.word	0x0800fb9c
 800c554:	0800fbc4 	.word	0x0800fbc4
 800c558:	0800fbd8 	.word	0x0800fbd8
 800c55c:	200001fc 	.word	0x200001fc
 800c560:	0800fbf8 	.word	0x0800fbf8

0800c564 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b08a      	sub	sp, #40	; 0x28
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800c56e:	2300      	movs	r3, #0
 800c570:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800c572:	2300      	movs	r3, #0
 800c574:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800c576:	2300      	movs	r3, #0
 800c578:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800c582:	4b28      	ldr	r3, [pc, #160]	; (800c624 <ip_reass_remove_oldest_datagram+0xc0>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c588:	e030      	b.n	800c5ec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800c58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58c:	695a      	ldr	r2, [r3, #20]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	429a      	cmp	r2, r3
 800c594:	d10c      	bne.n	800c5b0 <ip_reass_remove_oldest_datagram+0x4c>
 800c596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c598:	699a      	ldr	r2, [r3, #24]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d106      	bne.n	800c5b0 <ip_reass_remove_oldest_datagram+0x4c>
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a4:	899a      	ldrh	r2, [r3, #12]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	889b      	ldrh	r3, [r3, #4]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d014      	beq.n	800c5da <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800c5b6:	6a3b      	ldr	r3, [r7, #32]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d104      	bne.n	800c5c6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800c5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5be:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	61bb      	str	r3, [r7, #24]
 800c5c4:	e009      	b.n	800c5da <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c8:	7fda      	ldrb	r2, [r3, #31]
 800c5ca:	6a3b      	ldr	r3, [r7, #32]
 800c5cc:	7fdb      	ldrb	r3, [r3, #31]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d803      	bhi.n	800c5da <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800c5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d001      	beq.n	800c5e6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1cb      	bne.n	800c58a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800c5f2:	6a3b      	ldr	r3, [r7, #32]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d008      	beq.n	800c60a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800c5f8:	69b9      	ldr	r1, [r7, #24]
 800c5fa:	6a38      	ldr	r0, [r7, #32]
 800c5fc:	f7ff ff0e 	bl	800c41c <ip_reass_free_complete_datagram>
 800c600:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	4413      	add	r3, r2
 800c608:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	429a      	cmp	r2, r3
 800c610:	da02      	bge.n	800c618 <ip_reass_remove_oldest_datagram+0xb4>
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	2b01      	cmp	r3, #1
 800c616:	dcac      	bgt.n	800c572 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800c618:	697b      	ldr	r3, [r7, #20]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3728      	adds	r7, #40	; 0x28
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	200001f8 	.word	0x200001f8

0800c628 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c632:	2004      	movs	r0, #4
 800c634:	f7f7 feaa 	bl	800438c <memp_malloc>
 800c638:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d110      	bne.n	800c662 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800c640:	6839      	ldr	r1, [r7, #0]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7ff ff8e 	bl	800c564 <ip_reass_remove_oldest_datagram>
 800c648:	4602      	mov	r2, r0
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	4293      	cmp	r3, r2
 800c64e:	dc03      	bgt.n	800c658 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800c650:	2004      	movs	r0, #4
 800c652:	f7f7 fe9b 	bl	800438c <memp_malloc>
 800c656:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800c65e:	2300      	movs	r3, #0
 800c660:	e016      	b.n	800c690 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800c662:	2220      	movs	r2, #32
 800c664:	2100      	movs	r1, #0
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	f000 fdbc 	bl	800d1e4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2203      	movs	r2, #3
 800c670:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800c672:	4b09      	ldr	r3, [pc, #36]	; (800c698 <ip_reass_enqueue_new_datagram+0x70>)
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800c67a:	4a07      	ldr	r2, [pc, #28]	; (800c698 <ip_reass_enqueue_new_datagram+0x70>)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	3308      	adds	r3, #8
 800c684:	2214      	movs	r2, #20
 800c686:	6879      	ldr	r1, [r7, #4]
 800c688:	4618      	mov	r0, r3
 800c68a:	f000 fda0 	bl	800d1ce <memcpy>
  return ipr;
 800c68e:	68fb      	ldr	r3, [r7, #12]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3710      	adds	r7, #16
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}
 800c698:	200001f8 	.word	0x200001f8

0800c69c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800c6a6:	4b10      	ldr	r3, [pc, #64]	; (800c6e8 <ip_reass_dequeue_datagram+0x4c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d104      	bne.n	800c6ba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a0c      	ldr	r2, [pc, #48]	; (800c6e8 <ip_reass_dequeue_datagram+0x4c>)
 800c6b6:	6013      	str	r3, [r2, #0]
 800c6b8:	e00d      	b.n	800c6d6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d106      	bne.n	800c6ce <ip_reass_dequeue_datagram+0x32>
 800c6c0:	4b0a      	ldr	r3, [pc, #40]	; (800c6ec <ip_reass_dequeue_datagram+0x50>)
 800c6c2:	f240 1245 	movw	r2, #325	; 0x145
 800c6c6:	490a      	ldr	r1, [pc, #40]	; (800c6f0 <ip_reass_dequeue_datagram+0x54>)
 800c6c8:	480a      	ldr	r0, [pc, #40]	; (800c6f4 <ip_reass_dequeue_datagram+0x58>)
 800c6ca:	f000 fd93 	bl	800d1f4 <iprintf>
    prev->next = ipr->next;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800c6d6:	6879      	ldr	r1, [r7, #4]
 800c6d8:	2004      	movs	r0, #4
 800c6da:	f7f7 fea3 	bl	8004424 <memp_free>
}
 800c6de:	bf00      	nop
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	200001f8 	.word	0x200001f8
 800c6ec:	0800fb54 	.word	0x0800fb54
 800c6f0:	0800fc14 	.word	0x0800fc14
 800c6f4:	0800fb9c 	.word	0x0800fb9c

0800c6f8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b08c      	sub	sp, #48	; 0x30
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800c704:	2300      	movs	r3, #0
 800c706:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800c708:	2301      	movs	r3, #1
 800c70a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	885b      	ldrh	r3, [r3, #2]
 800c716:	b29b      	uxth	r3, r3
 800c718:	4618      	mov	r0, r3
 800c71a:	f7f7 fa82 	bl	8003c22 <lwip_htons>
 800c71e:	4603      	mov	r3, r0
 800c720:	461a      	mov	r2, r3
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	b29b      	uxth	r3, r3
 800c728:	f003 030f 	and.w	r3, r3, #15
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	b29b      	uxth	r3, r3
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	88db      	ldrh	r3, [r3, #6]
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7f7 fa70 	bl	8003c22 <lwip_htons>
 800c742:	4603      	mov	r3, r0
 800c744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c748:	b29b      	uxth	r3, r3
 800c74a:	00db      	lsls	r3, r3, #3
 800c74c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	2200      	movs	r2, #0
 800c758:	701a      	strb	r2, [r3, #0]
 800c75a:	2200      	movs	r2, #0
 800c75c:	705a      	strb	r2, [r3, #1]
 800c75e:	2200      	movs	r2, #0
 800c760:	709a      	strb	r2, [r3, #2]
 800c762:	2200      	movs	r2, #0
 800c764:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800c766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c768:	8b3a      	ldrh	r2, [r7, #24]
 800c76a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800c76c:	8b3a      	ldrh	r2, [r7, #24]
 800c76e:	8b7b      	ldrh	r3, [r7, #26]
 800c770:	4413      	add	r3, r2
 800c772:	b29a      	uxth	r2, r3
 800c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c776:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	627b      	str	r3, [r7, #36]	; 0x24
 800c77e:	e061      	b.n	800c844 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800c786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c788:	889b      	ldrh	r3, [r3, #4]
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	889b      	ldrh	r3, [r3, #4]
 800c790:	b29b      	uxth	r3, r3
 800c792:	429a      	cmp	r2, r3
 800c794:	d232      	bcs.n	800c7fc <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800c796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c79a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d01f      	beq.n	800c7e2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800c7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a4:	889b      	ldrh	r3, [r3, #4]
 800c7a6:	b29a      	uxth	r2, r3
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	88db      	ldrh	r3, [r3, #6]
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	f0c0 80e3 	bcc.w	800c97a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800c7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b6:	88db      	ldrh	r3, [r3, #6]
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	889b      	ldrh	r3, [r3, #4]
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	429a      	cmp	r2, r3
 800c7c2:	f200 80da 	bhi.w	800c97a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800c7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c8:	68ba      	ldr	r2, [r7, #8]
 800c7ca:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800c7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ce:	88db      	ldrh	r3, [r3, #6]
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d4:	889b      	ldrh	r3, [r3, #4]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d037      	beq.n	800c84c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800c7e0:	e034      	b.n	800c84c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800c7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e4:	88db      	ldrh	r3, [r3, #6]
 800c7e6:	b29a      	uxth	r2, r3
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	889b      	ldrh	r3, [r3, #4]
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	f200 80c5 	bhi.w	800c97e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	605a      	str	r2, [r3, #4]
      break;
 800c7fa:	e027      	b.n	800c84c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fe:	889b      	ldrh	r3, [r3, #4]
 800c800:	b29a      	uxth	r2, r3
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	889b      	ldrh	r3, [r3, #4]
 800c806:	b29b      	uxth	r3, r3
 800c808:	429a      	cmp	r2, r3
 800c80a:	f000 80ba 	beq.w	800c982 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800c80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c810:	889b      	ldrh	r3, [r3, #4]
 800c812:	b29a      	uxth	r2, r3
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	88db      	ldrh	r3, [r3, #6]
 800c818:	b29b      	uxth	r3, r3
 800c81a:	429a      	cmp	r2, r3
 800c81c:	f0c0 80b3 	bcc.w	800c986 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800c820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c822:	2b00      	cmp	r3, #0
 800c824:	d009      	beq.n	800c83a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800c826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c828:	88db      	ldrh	r3, [r3, #6]
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	889b      	ldrh	r3, [r3, #4]
 800c830:	b29b      	uxth	r3, r3
 800c832:	429a      	cmp	r2, r3
 800c834:	d001      	beq.n	800c83a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800c836:	2300      	movs	r3, #0
 800c838:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	2b00      	cmp	r3, #0
 800c848:	d19a      	bne.n	800c780 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800c84a:	e000      	b.n	800c84e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800c84c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800c84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c850:	2b00      	cmp	r3, #0
 800c852:	d12d      	bne.n	800c8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c856:	2b00      	cmp	r3, #0
 800c858:	d01c      	beq.n	800c894 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800c85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85c:	88db      	ldrh	r3, [r3, #6]
 800c85e:	b29a      	uxth	r2, r3
 800c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c862:	889b      	ldrh	r3, [r3, #4]
 800c864:	b29b      	uxth	r3, r3
 800c866:	429a      	cmp	r2, r3
 800c868:	d906      	bls.n	800c878 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800c86a:	4b51      	ldr	r3, [pc, #324]	; (800c9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c86c:	f240 12ab 	movw	r2, #427	; 0x1ab
 800c870:	4950      	ldr	r1, [pc, #320]	; (800c9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800c872:	4851      	ldr	r0, [pc, #324]	; (800c9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c874:	f000 fcbe 	bl	800d1f4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800c878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800c87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c880:	88db      	ldrh	r3, [r3, #6]
 800c882:	b29a      	uxth	r2, r3
 800c884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c886:	889b      	ldrh	r3, [r3, #4]
 800c888:	b29b      	uxth	r3, r3
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d010      	beq.n	800c8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800c88e:	2300      	movs	r3, #0
 800c890:	623b      	str	r3, [r7, #32]
 800c892:	e00d      	b.n	800c8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d006      	beq.n	800c8aa <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800c89c:	4b44      	ldr	r3, [pc, #272]	; (800c9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c89e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800c8a2:	4946      	ldr	r1, [pc, #280]	; (800c9bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800c8a4:	4844      	ldr	r0, [pc, #272]	; (800c9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c8a6:	f000 fca5 	bl	800d1f4 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	68ba      	ldr	r2, [r7, #8]
 800c8ae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d105      	bne.n	800c8c2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	7f9b      	ldrb	r3, [r3, #30]
 800c8ba:	f003 0301 	and.w	r3, r3, #1
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d059      	beq.n	800c976 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800c8c2:	6a3b      	ldr	r3, [r7, #32]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d04f      	beq.n	800c968 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d006      	beq.n	800c8de <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	685b      	ldr	r3, [r3, #4]
 800c8d6:	889b      	ldrh	r3, [r3, #4]
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d002      	beq.n	800c8e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	623b      	str	r3, [r7, #32]
 800c8e2:	e041      	b.n	800c968 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800c8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800c8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c8ee:	e012      	b.n	800c916 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800c8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f8:	88db      	ldrh	r3, [r3, #6]
 800c8fa:	b29a      	uxth	r2, r3
 800c8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fe:	889b      	ldrh	r3, [r3, #4]
 800c900:	b29b      	uxth	r3, r3
 800c902:	429a      	cmp	r2, r3
 800c904:	d002      	beq.n	800c90c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	623b      	str	r3, [r7, #32]
            break;
 800c90a:	e007      	b.n	800c91c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800c90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800c910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800c916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1e9      	bne.n	800c8f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800c91c:	6a3b      	ldr	r3, [r7, #32]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d022      	beq.n	800c968 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d106      	bne.n	800c938 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800c92a:	4b21      	ldr	r3, [pc, #132]	; (800c9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c92c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800c930:	4923      	ldr	r1, [pc, #140]	; (800c9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c932:	4821      	ldr	r0, [pc, #132]	; (800c9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c934:	f000 fc5e 	bl	800d1f4 <iprintf>
          LWIP_ASSERT("sanity check",
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c940:	429a      	cmp	r2, r3
 800c942:	d106      	bne.n	800c952 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800c944:	4b1a      	ldr	r3, [pc, #104]	; (800c9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c946:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800c94a:	491d      	ldr	r1, [pc, #116]	; (800c9c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800c94c:	481a      	ldr	r0, [pc, #104]	; (800c9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c94e:	f000 fc51 	bl	800d1f4 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800c952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d006      	beq.n	800c968 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800c95a:	4b15      	ldr	r3, [pc, #84]	; (800c9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800c95c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800c960:	4918      	ldr	r1, [pc, #96]	; (800c9c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800c962:	4815      	ldr	r0, [pc, #84]	; (800c9b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800c964:	f000 fc46 	bl	800d1f4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800c968:	6a3b      	ldr	r3, [r7, #32]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	bf14      	ite	ne
 800c96e:	2301      	movne	r3, #1
 800c970:	2300      	moveq	r3, #0
 800c972:	b2db      	uxtb	r3, r3
 800c974:	e018      	b.n	800c9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800c976:	2300      	movs	r3, #0
 800c978:	e016      	b.n	800c9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800c97a:	bf00      	nop
 800c97c:	e004      	b.n	800c988 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800c97e:	bf00      	nop
 800c980:	e002      	b.n	800c988 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800c982:	bf00      	nop
 800c984:	e000      	b.n	800c988 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800c986:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800c988:	68b8      	ldr	r0, [r7, #8]
 800c98a:	f7f8 fb3b 	bl	8005004 <pbuf_clen>
 800c98e:	4603      	mov	r3, r0
 800c990:	461a      	mov	r2, r3
 800c992:	4b0d      	ldr	r3, [pc, #52]	; (800c9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c994:	881b      	ldrh	r3, [r3, #0]
 800c996:	1a9b      	subs	r3, r3, r2
 800c998:	b29a      	uxth	r2, r3
 800c99a:	4b0b      	ldr	r3, [pc, #44]	; (800c9c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800c99c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800c99e:	68b8      	ldr	r0, [r7, #8]
 800c9a0:	f7f8 fa9c 	bl	8004edc <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800c9a4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3730      	adds	r7, #48	; 0x30
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	0800fb54 	.word	0x0800fb54
 800c9b4:	0800fc30 	.word	0x0800fc30
 800c9b8:	0800fb9c 	.word	0x0800fb9c
 800c9bc:	0800fc50 	.word	0x0800fc50
 800c9c0:	0800fc88 	.word	0x0800fc88
 800c9c4:	0800fc98 	.word	0x0800fc98
 800c9c8:	200001fc 	.word	0x200001fc

0800c9cc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b08e      	sub	sp, #56	; 0x38
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800c9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	f003 030f 	and.w	r3, r3, #15
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	2b14      	cmp	r3, #20
 800c9e6:	f040 8131 	bne.w	800cc4c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800c9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ec:	88db      	ldrh	r3, [r3, #6]
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7f7 f916 	bl	8003c22 <lwip_htons>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	00db      	lsls	r3, r3, #3
 800ca00:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ca02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca04:	885b      	ldrh	r3, [r3, #2]
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7f7 f90a 	bl	8003c22 <lwip_htons>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	461a      	mov	r2, r3
 800ca12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	b29b      	uxth	r3, r3
 800ca18:	f003 030f 	and.w	r3, r3, #15
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	1ad3      	subs	r3, r2, r3
 800ca24:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7f8 faec 	bl	8005004 <pbuf_clen>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ca30:	4b8d      	ldr	r3, [pc, #564]	; (800cc68 <ip4_reass+0x29c>)
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	461a      	mov	r2, r3
 800ca36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca38:	4413      	add	r3, r2
 800ca3a:	2b0a      	cmp	r3, #10
 800ca3c:	dd10      	ble.n	800ca60 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ca3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca40:	4619      	mov	r1, r3
 800ca42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca44:	f7ff fd8e 	bl	800c564 <ip_reass_remove_oldest_datagram>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	f000 8100 	beq.w	800cc50 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ca50:	4b85      	ldr	r3, [pc, #532]	; (800cc68 <ip4_reass+0x29c>)
 800ca52:	881b      	ldrh	r3, [r3, #0]
 800ca54:	461a      	mov	r2, r3
 800ca56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca58:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ca5a:	2b0a      	cmp	r3, #10
 800ca5c:	f300 80f8 	bgt.w	800cc50 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ca60:	4b82      	ldr	r3, [pc, #520]	; (800cc6c <ip4_reass+0x2a0>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	633b      	str	r3, [r7, #48]	; 0x30
 800ca66:	e015      	b.n	800ca94 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	695a      	ldr	r2, [r3, #20]
 800ca6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d10c      	bne.n	800ca8e <ip4_reass+0xc2>
 800ca74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca76:	699a      	ldr	r2, [r3, #24]
 800ca78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d106      	bne.n	800ca8e <ip4_reass+0xc2>
 800ca80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca82:	899a      	ldrh	r2, [r3, #12]
 800ca84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca86:	889b      	ldrh	r3, [r3, #4]
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d006      	beq.n	800ca9c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	633b      	str	r3, [r7, #48]	; 0x30
 800ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d1e6      	bne.n	800ca68 <ip4_reass+0x9c>
 800ca9a:	e000      	b.n	800ca9e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ca9c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ca9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d109      	bne.n	800cab8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800caa4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caa6:	4619      	mov	r1, r3
 800caa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800caaa:	f7ff fdbd 	bl	800c628 <ip_reass_enqueue_new_datagram>
 800caae:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800cab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d11c      	bne.n	800caf0 <ip4_reass+0x124>
      goto nullreturn;
 800cab6:	e0ce      	b.n	800cc56 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caba:	88db      	ldrh	r3, [r3, #6]
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7f7 f8af 	bl	8003c22 <lwip_htons>
 800cac4:	4603      	mov	r3, r0
 800cac6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d110      	bne.n	800caf0 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800cace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad0:	89db      	ldrh	r3, [r3, #14]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7f7 f8a5 	bl	8003c22 <lwip_htons>
 800cad8:	4603      	mov	r3, r0
 800cada:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d006      	beq.n	800caf0 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800cae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae4:	3308      	adds	r3, #8
 800cae6:	2214      	movs	r2, #20
 800cae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800caea:	4618      	mov	r0, r3
 800caec:	f000 fb6f 	bl	800d1ce <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800caf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf2:	88db      	ldrh	r3, [r3, #6]
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	f003 0320 	and.w	r3, r3, #32
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	bf0c      	ite	eq
 800cafe:	2301      	moveq	r3, #1
 800cb00:	2300      	movne	r3, #0
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d00e      	beq.n	800cb2a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800cb0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb10:	4413      	add	r3, r2
 800cb12:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800cb14:	8b7a      	ldrh	r2, [r7, #26]
 800cb16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	f0c0 8099 	bcc.w	800cc50 <ip4_reass+0x284>
 800cb1e:	8b7b      	ldrh	r3, [r7, #26]
 800cb20:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800cb24:	4293      	cmp	r3, r2
 800cb26:	f200 8093 	bhi.w	800cc50 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800cb2a:	69fa      	ldr	r2, [r7, #28]
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb30:	f7ff fde2 	bl	800c6f8 <ip_reass_chain_frag_into_datagram_and_validate>
 800cb34:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb3c:	f000 808a 	beq.w	800cc54 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800cb40:	4b49      	ldr	r3, [pc, #292]	; (800cc68 <ip4_reass+0x29c>)
 800cb42:	881a      	ldrh	r2, [r3, #0]
 800cb44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb46:	4413      	add	r3, r2
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	4b47      	ldr	r3, [pc, #284]	; (800cc68 <ip4_reass+0x29c>)
 800cb4c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d00d      	beq.n	800cb70 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800cb54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb58:	4413      	add	r3, r2
 800cb5a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	8a7a      	ldrh	r2, [r7, #18]
 800cb60:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800cb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb64:	7f9b      	ldrb	r3, [r3, #30]
 800cb66:	f043 0301 	orr.w	r3, r3, #1
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d168      	bne.n	800cc48 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800cb76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb78:	8b9b      	ldrh	r3, [r3, #28]
 800cb7a:	3314      	adds	r3, #20
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb80:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800cb82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800cb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb96:	3308      	adds	r3, #8
 800cb98:	2214      	movs	r2, #20
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb9e:	f000 fb16 	bl	800d1ce <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800cba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba4:	8b9b      	ldrh	r3, [r3, #28]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7f7 f83b 	bl	8003c22 <lwip_htons>
 800cbac:	4603      	mov	r3, r0
 800cbae:	461a      	mov	r2, r3
 800cbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800cbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	719a      	strb	r2, [r3, #6]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800cbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	729a      	strb	r2, [r3, #10]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800cbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800cbce:	e00e      	b.n	800cbee <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800cbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800cbd6:	f06f 0113 	mvn.w	r1, #19
 800cbda:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cbdc:	f7f8 f95a 	bl	8004e94 <pbuf_header>
      pbuf_cat(p, r);
 800cbe0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cbe2:	6878      	ldr	r0, [r7, #4]
 800cbe4:	f7f8 fa48 	bl	8005078 <pbuf_cat>
      r = iprh->next_pbuf;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800cbee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1ed      	bne.n	800cbd0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800cbf4:	4b1d      	ldr	r3, [pc, #116]	; (800cc6c <ip4_reass+0x2a0>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	d102      	bne.n	800cc04 <ip4_reass+0x238>
      ipr_prev = NULL;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc02:	e010      	b.n	800cc26 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cc04:	4b19      	ldr	r3, [pc, #100]	; (800cc6c <ip4_reass+0x2a0>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc0a:	e007      	b.n	800cc1c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800cc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d006      	beq.n	800cc24 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1f4      	bne.n	800cc0c <ip4_reass+0x240>
 800cc22:	e000      	b.n	800cc26 <ip4_reass+0x25a>
          break;
 800cc24:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800cc26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc2a:	f7ff fd37 	bl	800c69c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7f8 f9e8 	bl	8005004 <pbuf_clen>
 800cc34:	4603      	mov	r3, r0
 800cc36:	461a      	mov	r2, r3
 800cc38:	4b0b      	ldr	r3, [pc, #44]	; (800cc68 <ip4_reass+0x29c>)
 800cc3a:	881b      	ldrh	r3, [r3, #0]
 800cc3c:	1a9b      	subs	r3, r3, r2
 800cc3e:	b29a      	uxth	r2, r3
 800cc40:	4b09      	ldr	r3, [pc, #36]	; (800cc68 <ip4_reass+0x29c>)
 800cc42:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	e00a      	b.n	800cc5e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	e008      	b.n	800cc5e <ip4_reass+0x292>
    goto nullreturn;
 800cc4c:	bf00      	nop
 800cc4e:	e002      	b.n	800cc56 <ip4_reass+0x28a>

nullreturn:
 800cc50:	bf00      	nop
 800cc52:	e000      	b.n	800cc56 <ip4_reass+0x28a>
    goto nullreturn;
 800cc54:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7f8 f940 	bl	8004edc <pbuf_free>
  return NULL;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3738      	adds	r7, #56	; 0x38
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	200001fc 	.word	0x200001fc
 800cc6c:	200001f8 	.word	0x200001f8

0800cc70 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800cc74:	2005      	movs	r0, #5
 800cc76:	f7f7 fb89 	bl	800438c <memp_malloc>
 800cc7a:	4603      	mov	r3, r0
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d106      	bne.n	800cc9c <ip_frag_free_pbuf_custom_ref+0x1c>
 800cc8e:	4b07      	ldr	r3, [pc, #28]	; (800ccac <ip_frag_free_pbuf_custom_ref+0x2c>)
 800cc90:	f240 22ae 	movw	r2, #686	; 0x2ae
 800cc94:	4906      	ldr	r1, [pc, #24]	; (800ccb0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800cc96:	4807      	ldr	r0, [pc, #28]	; (800ccb4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800cc98:	f000 faac 	bl	800d1f4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800cc9c:	6879      	ldr	r1, [r7, #4]
 800cc9e:	2005      	movs	r0, #5
 800cca0:	f7f7 fbc0 	bl	8004424 <memp_free>
}
 800cca4:	bf00      	nop
 800cca6:	3708      	adds	r7, #8
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	0800fb54 	.word	0x0800fb54
 800ccb0:	0800fcbc 	.word	0x0800fcbc
 800ccb4:	0800fb9c 	.word	0x0800fb9c

0800ccb8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d106      	bne.n	800ccd8 <ipfrag_free_pbuf_custom+0x20>
 800ccca:	4b11      	ldr	r3, [pc, #68]	; (800cd10 <ipfrag_free_pbuf_custom+0x58>)
 800cccc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800ccd0:	4910      	ldr	r1, [pc, #64]	; (800cd14 <ipfrag_free_pbuf_custom+0x5c>)
 800ccd2:	4811      	ldr	r0, [pc, #68]	; (800cd18 <ipfrag_free_pbuf_custom+0x60>)
 800ccd4:	f000 fa8e 	bl	800d1f4 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d006      	beq.n	800ccee <ipfrag_free_pbuf_custom+0x36>
 800cce0:	4b0b      	ldr	r3, [pc, #44]	; (800cd10 <ipfrag_free_pbuf_custom+0x58>)
 800cce2:	f240 22b9 	movw	r2, #697	; 0x2b9
 800cce6:	490d      	ldr	r1, [pc, #52]	; (800cd1c <ipfrag_free_pbuf_custom+0x64>)
 800cce8:	480b      	ldr	r0, [pc, #44]	; (800cd18 <ipfrag_free_pbuf_custom+0x60>)
 800ccea:	f000 fa83 	bl	800d1f4 <iprintf>
  if (pcr->original != NULL) {
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	695b      	ldr	r3, [r3, #20]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d004      	beq.n	800cd00 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	695b      	ldr	r3, [r3, #20]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7f8 f8ee 	bl	8004edc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800cd00:	68f8      	ldr	r0, [r7, #12]
 800cd02:	f7ff ffbd 	bl	800cc80 <ip_frag_free_pbuf_custom_ref>
}
 800cd06:	bf00      	nop
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	0800fb54 	.word	0x0800fb54
 800cd14:	0800fcc8 	.word	0x0800fcc8
 800cd18:	0800fb9c 	.word	0x0800fb9c
 800cd1c:	0800fcd4 	.word	0x0800fcd4

0800cd20 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b092      	sub	sp, #72	; 0x48
 800cd24:	af02      	add	r7, sp, #8
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd34:	3b14      	subs	r3, #20
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	da00      	bge.n	800cd3c <ip4_frag+0x1c>
 800cd3a:	3307      	adds	r3, #7
 800cd3c:	10db      	asrs	r3, r3, #3
 800cd3e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800cd40:	2314      	movs	r3, #20
 800cd42:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	f003 030f 	and.w	r3, r3, #15
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	2b14      	cmp	r3, #20
 800cd5a:	d009      	beq.n	800cd70 <ip4_frag+0x50>
 800cd5c:	4b79      	ldr	r3, [pc, #484]	; (800cf44 <ip4_frag+0x224>)
 800cd5e:	f240 22e1 	movw	r2, #737	; 0x2e1
 800cd62:	4979      	ldr	r1, [pc, #484]	; (800cf48 <ip4_frag+0x228>)
 800cd64:	4879      	ldr	r0, [pc, #484]	; (800cf4c <ip4_frag+0x22c>)
 800cd66:	f000 fa45 	bl	800d1f4 <iprintf>
 800cd6a:	f06f 0305 	mvn.w	r3, #5
 800cd6e:	e0e5      	b.n	800cf3c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800cd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd72:	88db      	ldrh	r3, [r3, #6]
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7f6 ff53 	bl	8003c22 <lwip_htons>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800cd80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cd82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd86:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800cd88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cd8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d009      	beq.n	800cda6 <ip4_frag+0x86>
 800cd92:	4b6c      	ldr	r3, [pc, #432]	; (800cf44 <ip4_frag+0x224>)
 800cd94:	f240 22e6 	movw	r2, #742	; 0x2e6
 800cd98:	496d      	ldr	r1, [pc, #436]	; (800cf50 <ip4_frag+0x230>)
 800cd9a:	486c      	ldr	r0, [pc, #432]	; (800cf4c <ip4_frag+0x22c>)
 800cd9c:	f000 fa2a 	bl	800d1f4 <iprintf>
 800cda0:	f06f 0305 	mvn.w	r3, #5
 800cda4:	e0ca      	b.n	800cf3c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	891b      	ldrh	r3, [r3, #8]
 800cdaa:	3b14      	subs	r3, #20
 800cdac:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800cdae:	e0bc      	b.n	800cf2a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800cdb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cdb2:	00da      	lsls	r2, r3, #3
 800cdb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	bfa8      	it	ge
 800cdba:	4613      	movge	r3, r2
 800cdbc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	2114      	movs	r1, #20
 800cdc2:	2002      	movs	r0, #2
 800cdc4:	f7f7 fd16 	bl	80047f4 <pbuf_alloc>
 800cdc8:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800cdca:	6a3b      	ldr	r3, [r7, #32]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f000 80b2 	beq.w	800cf36 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	895b      	ldrh	r3, [r3, #10]
 800cdd6:	2b13      	cmp	r3, #19
 800cdd8:	d806      	bhi.n	800cde8 <ip4_frag+0xc8>
 800cdda:	4b5a      	ldr	r3, [pc, #360]	; (800cf44 <ip4_frag+0x224>)
 800cddc:	f240 3209 	movw	r2, #777	; 0x309
 800cde0:	495c      	ldr	r1, [pc, #368]	; (800cf54 <ip4_frag+0x234>)
 800cde2:	485a      	ldr	r0, [pc, #360]	; (800cf4c <ip4_frag+0x22c>)
 800cde4:	f000 fa06 	bl	800d1f4 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800cde8:	6a3b      	ldr	r3, [r7, #32]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	2214      	movs	r2, #20
 800cdee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f000 f9ec 	bl	800d1ce <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800cdf6:	6a3b      	ldr	r3, [r7, #32]
 800cdf8:	685b      	ldr	r3, [r3, #4]
 800cdfa:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800cdfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cdfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800ce00:	e04f      	b.n	800cea2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	895a      	ldrh	r2, [r3, #10]
 800ce06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ce0c:	8b7a      	ldrh	r2, [r7, #26]
 800ce0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce10:	4293      	cmp	r3, r2
 800ce12:	bf28      	it	cs
 800ce14:	4613      	movcs	r3, r2
 800ce16:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ce18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d105      	bne.n	800ce2a <ip4_frag+0x10a>
        poff = 0;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	60fb      	str	r3, [r7, #12]
        continue;
 800ce28:	e03b      	b.n	800cea2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ce2a:	f7ff ff21 	bl	800cc70 <ip_frag_alloc_pbuf_custom_ref>
 800ce2e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d103      	bne.n	800ce3e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800ce36:	6a38      	ldr	r0, [r7, #32]
 800ce38:	f7f8 f850 	bl	8004edc <pbuf_free>
        goto memerr;
 800ce3c:	e07c      	b.n	800cf38 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ce3e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ce44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce46:	4413      	add	r3, r2
 800ce48:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800ce4a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ce4c:	9201      	str	r2, [sp, #4]
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	4603      	mov	r3, r0
 800ce52:	2202      	movs	r2, #2
 800ce54:	2004      	movs	r0, #4
 800ce56:	f7f7 fe63 	bl	8004b20 <pbuf_alloced_custom>
 800ce5a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d106      	bne.n	800ce70 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ce62:	6978      	ldr	r0, [r7, #20]
 800ce64:	f7ff ff0c 	bl	800cc80 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ce68:	6a38      	ldr	r0, [r7, #32]
 800ce6a:	f7f8 f837 	bl	8004edc <pbuf_free>
        goto memerr;
 800ce6e:	e063      	b.n	800cf38 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800ce70:	68f8      	ldr	r0, [r7, #12]
 800ce72:	f7f8 f8df 	bl	8005034 <pbuf_ref>
      pcr->original = p;
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	68fa      	ldr	r2, [r7, #12]
 800ce7a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	4a36      	ldr	r2, [pc, #216]	; (800cf58 <ip4_frag+0x238>)
 800ce80:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ce82:	6939      	ldr	r1, [r7, #16]
 800ce84:	6a38      	ldr	r0, [r7, #32]
 800ce86:	f7f8 f8f7 	bl	8005078 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800ce8a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800ce8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ce8e:	1ad3      	subs	r3, r2, r3
 800ce90:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800ce92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d004      	beq.n	800cea2 <ip4_frag+0x182>
        poff = 0;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800cea2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d1ac      	bne.n	800ce02 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800cea8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ceaa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ceac:	4413      	add	r3, r2
 800ceae:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ceb0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ceb6:	3b14      	subs	r3, #20
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	bfd4      	ite	le
 800cebc:	2301      	movle	r3, #1
 800cebe:	2300      	movgt	r3, #0
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800cec4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cec6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ceca:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d103      	bne.n	800ceda <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800ced2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ced4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ced8:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ceda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cedc:	4618      	mov	r0, r3
 800cede:	f7f6 fea0 	bl	8003c22 <lwip_htons>
 800cee2:	4603      	mov	r3, r0
 800cee4:	461a      	mov	r2, r3
 800cee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800ceea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ceec:	3314      	adds	r3, #20
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7f6 fe96 	bl	8003c22 <lwip_htons>
 800cef6:	4603      	mov	r3, r0
 800cef8:	461a      	mov	r2, r3
 800cefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800cefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf00:	2200      	movs	r2, #0
 800cf02:	729a      	strb	r2, [r3, #10]
 800cf04:	2200      	movs	r2, #0
 800cf06:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	695b      	ldr	r3, [r3, #20]
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	6a39      	ldr	r1, [r7, #32]
 800cf10:	68b8      	ldr	r0, [r7, #8]
 800cf12:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800cf14:	6a38      	ldr	r0, [r7, #32]
 800cf16:	f7f7 ffe1 	bl	8004edc <pbuf_free>
    left -= fragsize;
 800cf1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cf1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800cf22:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800cf24:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cf26:	4413      	add	r3, r2
 800cf28:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800cf2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f47f af3f 	bne.w	800cdb0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	e002      	b.n	800cf3c <ip4_frag+0x21c>
      goto memerr;
 800cf36:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800cf38:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3740      	adds	r7, #64	; 0x40
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	0800fb54 	.word	0x0800fb54
 800cf48:	0800fce0 	.word	0x0800fce0
 800cf4c:	0800fb9c 	.word	0x0800fb9c
 800cf50:	0800fd08 	.word	0x0800fd08
 800cf54:	0800fd24 	.word	0x0800fd24
 800cf58:	0800ccb9 	.word	0x0800ccb9

0800cf5c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800cf66:	230e      	movs	r3, #14
 800cf68:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	895b      	ldrh	r3, [r3, #10]
 800cf6e:	2b0e      	cmp	r3, #14
 800cf70:	d977      	bls.n	800d062 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	7b1a      	ldrb	r2, [r3, #12]
 800cf7c:	7b5b      	ldrb	r3, [r3, #13]
 800cf7e:	021b      	lsls	r3, r3, #8
 800cf80:	4313      	orrs	r3, r2
 800cf82:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	f003 0301 	and.w	r3, r3, #1
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d023      	beq.n	800cfd8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800cf90:	693b      	ldr	r3, [r7, #16]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d10f      	bne.n	800cfb8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	785b      	ldrb	r3, [r3, #1]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d11b      	bne.n	800cfd8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800cfa4:	2b5e      	cmp	r3, #94	; 0x5e
 800cfa6:	d117      	bne.n	800cfd8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	7b5b      	ldrb	r3, [r3, #13]
 800cfac:	f043 0310 	orr.w	r3, r3, #16
 800cfb0:	b2da      	uxtb	r2, r3
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	735a      	strb	r2, [r3, #13]
 800cfb6:	e00f      	b.n	800cfd8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	2206      	movs	r2, #6
 800cfbc:	4930      	ldr	r1, [pc, #192]	; (800d080 <ethernet_input+0x124>)
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f000 f8f6 	bl	800d1b0 <memcmp>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d106      	bne.n	800cfd8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	7b5b      	ldrb	r3, [r3, #13]
 800cfce:	f043 0308 	orr.w	r3, r3, #8
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800cfd8:	89fb      	ldrh	r3, [r7, #14]
 800cfda:	2b08      	cmp	r3, #8
 800cfdc:	d003      	beq.n	800cfe6 <ethernet_input+0x8a>
 800cfde:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800cfe2:	d01e      	beq.n	800d022 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800cfe4:	e044      	b.n	800d070 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800cfec:	f003 0308 	and.w	r3, r3, #8
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d038      	beq.n	800d066 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	895b      	ldrh	r3, [r3, #10]
 800cff8:	461a      	mov	r2, r3
 800cffa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cffe:	429a      	cmp	r2, r3
 800d000:	db33      	blt.n	800d06a <ethernet_input+0x10e>
 800d002:	8afb      	ldrh	r3, [r7, #22]
 800d004:	425b      	negs	r3, r3
 800d006:	b29b      	uxth	r3, r3
 800d008:	b21b      	sxth	r3, r3
 800d00a:	4619      	mov	r1, r3
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f7f7 ff41 	bl	8004e94 <pbuf_header>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d128      	bne.n	800d06a <ethernet_input+0x10e>
        ip4_input(p, netif);
 800d018:	6839      	ldr	r1, [r7, #0]
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f7fe ff80 	bl	800bf20 <ip4_input>
      break;
 800d020:	e01d      	b.n	800d05e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d028:	f003 0308 	and.w	r3, r3, #8
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d01e      	beq.n	800d06e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	895b      	ldrh	r3, [r3, #10]
 800d034:	461a      	mov	r2, r3
 800d036:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	db15      	blt.n	800d06a <ethernet_input+0x10e>
 800d03e:	8afb      	ldrh	r3, [r7, #22]
 800d040:	425b      	negs	r3, r3
 800d042:	b29b      	uxth	r3, r3
 800d044:	b21b      	sxth	r3, r3
 800d046:	4619      	mov	r1, r3
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7f7 ff23 	bl	8004e94 <pbuf_header>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d10a      	bne.n	800d06a <ethernet_input+0x10e>
        etharp_input(p, netif);
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f7fe f94e 	bl	800b2f8 <etharp_input>
      break;
 800d05c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d05e:	2300      	movs	r3, #0
 800d060:	e00a      	b.n	800d078 <ethernet_input+0x11c>
    goto free_and_return;
 800d062:	bf00      	nop
 800d064:	e004      	b.n	800d070 <ethernet_input+0x114>
        goto free_and_return;
 800d066:	bf00      	nop
 800d068:	e002      	b.n	800d070 <ethernet_input+0x114>

free_and_return:
 800d06a:	bf00      	nop
 800d06c:	e000      	b.n	800d070 <ethernet_input+0x114>
        goto free_and_return;
 800d06e:	bf00      	nop
  pbuf_free(p);
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7f7 ff33 	bl	8004edc <pbuf_free>
  return ERR_OK;
 800d076:	2300      	movs	r3, #0
}
 800d078:	4618      	mov	r0, r3
 800d07a:	3718      	adds	r7, #24
 800d07c:	46bd      	mov	sp, r7
 800d07e:	bd80      	pop	{r7, pc}
 800d080:	0800fec4 	.word	0x0800fec4

0800d084 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b086      	sub	sp, #24
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]
 800d090:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d092:	8c3b      	ldrh	r3, [r7, #32]
 800d094:	4618      	mov	r0, r3
 800d096:	f7f6 fdc4 	bl	8003c22 <lwip_htons>
 800d09a:	4603      	mov	r3, r0
 800d09c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800d09e:	210e      	movs	r1, #14
 800d0a0:	68b8      	ldr	r0, [r7, #8]
 800d0a2:	f7f7 fef7 	bl	8004e94 <pbuf_header>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d125      	bne.n	800d0f8 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	8afa      	ldrh	r2, [r7, #22]
 800d0b6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	2206      	movs	r2, #6
 800d0bc:	6839      	ldr	r1, [r7, #0]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f000 f885 	bl	800d1ce <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	3306      	adds	r3, #6
 800d0c8:	2206      	movs	r2, #6
 800d0ca:	6879      	ldr	r1, [r7, #4]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f000 f87e 	bl	800d1ce <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d0d8:	2b06      	cmp	r3, #6
 800d0da:	d006      	beq.n	800d0ea <ethernet_output+0x66>
 800d0dc:	4b0a      	ldr	r3, [pc, #40]	; (800d108 <ethernet_output+0x84>)
 800d0de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d0e2:	490a      	ldr	r1, [pc, #40]	; (800d10c <ethernet_output+0x88>)
 800d0e4:	480a      	ldr	r0, [pc, #40]	; (800d110 <ethernet_output+0x8c>)
 800d0e6:	f000 f885 	bl	800d1f4 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	699b      	ldr	r3, [r3, #24]
 800d0ee:	68b9      	ldr	r1, [r7, #8]
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	4798      	blx	r3
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	e002      	b.n	800d0fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d0f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d0fa:	f06f 0301 	mvn.w	r3, #1
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3718      	adds	r7, #24
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	0800fd44 	.word	0x0800fd44
 800d10c:	0800fd7c 	.word	0x0800fd7c
 800d110:	0800fdb0 	.word	0x0800fdb0

0800d114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d14c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d118:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d11a:	e003      	b.n	800d124 <LoopCopyDataInit>

0800d11c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d11c:	4b0c      	ldr	r3, [pc, #48]	; (800d150 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d11e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d120:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d122:	3104      	adds	r1, #4

0800d124 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d124:	480b      	ldr	r0, [pc, #44]	; (800d154 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d126:	4b0c      	ldr	r3, [pc, #48]	; (800d158 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d128:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d12a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d12c:	d3f6      	bcc.n	800d11c <CopyDataInit>
  ldr  r2, =_sbss
 800d12e:	4a0b      	ldr	r2, [pc, #44]	; (800d15c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d130:	e002      	b.n	800d138 <LoopFillZerobss>

0800d132 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d132:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d134:	f842 3b04 	str.w	r3, [r2], #4

0800d138 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d138:	4b09      	ldr	r3, [pc, #36]	; (800d160 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d13a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d13c:	d3f9      	bcc.n	800d132 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d13e:	f7f3 fc3b 	bl	80009b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d142:	f000 f811 	bl	800d168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d146:	f7f3 fadd 	bl	8000704 <main>
  bx  lr    
 800d14a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d14c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d150:	0800ff7c 	.word	0x0800ff7c
  ldr  r0, =_sdata
 800d154:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d158:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 800d15c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800d160:	2000c6e8 	.word	0x2000c6e8

0800d164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d164:	e7fe      	b.n	800d164 <ADC_IRQHandler>
	...

0800d168 <__libc_init_array>:
 800d168:	b570      	push	{r4, r5, r6, lr}
 800d16a:	4e0d      	ldr	r6, [pc, #52]	; (800d1a0 <__libc_init_array+0x38>)
 800d16c:	4c0d      	ldr	r4, [pc, #52]	; (800d1a4 <__libc_init_array+0x3c>)
 800d16e:	1ba4      	subs	r4, r4, r6
 800d170:	10a4      	asrs	r4, r4, #2
 800d172:	2500      	movs	r5, #0
 800d174:	42a5      	cmp	r5, r4
 800d176:	d109      	bne.n	800d18c <__libc_init_array+0x24>
 800d178:	4e0b      	ldr	r6, [pc, #44]	; (800d1a8 <__libc_init_array+0x40>)
 800d17a:	4c0c      	ldr	r4, [pc, #48]	; (800d1ac <__libc_init_array+0x44>)
 800d17c:	f000 ff72 	bl	800e064 <_init>
 800d180:	1ba4      	subs	r4, r4, r6
 800d182:	10a4      	asrs	r4, r4, #2
 800d184:	2500      	movs	r5, #0
 800d186:	42a5      	cmp	r5, r4
 800d188:	d105      	bne.n	800d196 <__libc_init_array+0x2e>
 800d18a:	bd70      	pop	{r4, r5, r6, pc}
 800d18c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d190:	4798      	blx	r3
 800d192:	3501      	adds	r5, #1
 800d194:	e7ee      	b.n	800d174 <__libc_init_array+0xc>
 800d196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d19a:	4798      	blx	r3
 800d19c:	3501      	adds	r5, #1
 800d19e:	e7f2      	b.n	800d186 <__libc_init_array+0x1e>
 800d1a0:	0800ff74 	.word	0x0800ff74
 800d1a4:	0800ff74 	.word	0x0800ff74
 800d1a8:	0800ff74 	.word	0x0800ff74
 800d1ac:	0800ff78 	.word	0x0800ff78

0800d1b0 <memcmp>:
 800d1b0:	b530      	push	{r4, r5, lr}
 800d1b2:	2400      	movs	r4, #0
 800d1b4:	42a2      	cmp	r2, r4
 800d1b6:	d101      	bne.n	800d1bc <memcmp+0xc>
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	e007      	b.n	800d1cc <memcmp+0x1c>
 800d1bc:	5d03      	ldrb	r3, [r0, r4]
 800d1be:	3401      	adds	r4, #1
 800d1c0:	190d      	adds	r5, r1, r4
 800d1c2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800d1c6:	42ab      	cmp	r3, r5
 800d1c8:	d0f4      	beq.n	800d1b4 <memcmp+0x4>
 800d1ca:	1b58      	subs	r0, r3, r5
 800d1cc:	bd30      	pop	{r4, r5, pc}

0800d1ce <memcpy>:
 800d1ce:	b510      	push	{r4, lr}
 800d1d0:	1e43      	subs	r3, r0, #1
 800d1d2:	440a      	add	r2, r1
 800d1d4:	4291      	cmp	r1, r2
 800d1d6:	d100      	bne.n	800d1da <memcpy+0xc>
 800d1d8:	bd10      	pop	{r4, pc}
 800d1da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1e2:	e7f7      	b.n	800d1d4 <memcpy+0x6>

0800d1e4 <memset>:
 800d1e4:	4402      	add	r2, r0
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d100      	bne.n	800d1ee <memset+0xa>
 800d1ec:	4770      	bx	lr
 800d1ee:	f803 1b01 	strb.w	r1, [r3], #1
 800d1f2:	e7f9      	b.n	800d1e8 <memset+0x4>

0800d1f4 <iprintf>:
 800d1f4:	b40f      	push	{r0, r1, r2, r3}
 800d1f6:	4b0a      	ldr	r3, [pc, #40]	; (800d220 <iprintf+0x2c>)
 800d1f8:	b513      	push	{r0, r1, r4, lr}
 800d1fa:	681c      	ldr	r4, [r3, #0]
 800d1fc:	b124      	cbz	r4, 800d208 <iprintf+0x14>
 800d1fe:	69a3      	ldr	r3, [r4, #24]
 800d200:	b913      	cbnz	r3, 800d208 <iprintf+0x14>
 800d202:	4620      	mov	r0, r4
 800d204:	f000 f864 	bl	800d2d0 <__sinit>
 800d208:	ab05      	add	r3, sp, #20
 800d20a:	9a04      	ldr	r2, [sp, #16]
 800d20c:	68a1      	ldr	r1, [r4, #8]
 800d20e:	9301      	str	r3, [sp, #4]
 800d210:	4620      	mov	r0, r4
 800d212:	f000 f96b 	bl	800d4ec <_vfiprintf_r>
 800d216:	b002      	add	sp, #8
 800d218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d21c:	b004      	add	sp, #16
 800d21e:	4770      	bx	lr
 800d220:	20000010 	.word	0x20000010

0800d224 <strncpy>:
 800d224:	b570      	push	{r4, r5, r6, lr}
 800d226:	3901      	subs	r1, #1
 800d228:	4604      	mov	r4, r0
 800d22a:	b902      	cbnz	r2, 800d22e <strncpy+0xa>
 800d22c:	bd70      	pop	{r4, r5, r6, pc}
 800d22e:	4623      	mov	r3, r4
 800d230:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800d234:	f803 5b01 	strb.w	r5, [r3], #1
 800d238:	1e56      	subs	r6, r2, #1
 800d23a:	b92d      	cbnz	r5, 800d248 <strncpy+0x24>
 800d23c:	4414      	add	r4, r2
 800d23e:	42a3      	cmp	r3, r4
 800d240:	d0f4      	beq.n	800d22c <strncpy+0x8>
 800d242:	f803 5b01 	strb.w	r5, [r3], #1
 800d246:	e7fa      	b.n	800d23e <strncpy+0x1a>
 800d248:	461c      	mov	r4, r3
 800d24a:	4632      	mov	r2, r6
 800d24c:	e7ed      	b.n	800d22a <strncpy+0x6>
	...

0800d250 <std>:
 800d250:	2300      	movs	r3, #0
 800d252:	b510      	push	{r4, lr}
 800d254:	4604      	mov	r4, r0
 800d256:	e9c0 3300 	strd	r3, r3, [r0]
 800d25a:	6083      	str	r3, [r0, #8]
 800d25c:	8181      	strh	r1, [r0, #12]
 800d25e:	6643      	str	r3, [r0, #100]	; 0x64
 800d260:	81c2      	strh	r2, [r0, #14]
 800d262:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d266:	6183      	str	r3, [r0, #24]
 800d268:	4619      	mov	r1, r3
 800d26a:	2208      	movs	r2, #8
 800d26c:	305c      	adds	r0, #92	; 0x5c
 800d26e:	f7ff ffb9 	bl	800d1e4 <memset>
 800d272:	4b05      	ldr	r3, [pc, #20]	; (800d288 <std+0x38>)
 800d274:	6263      	str	r3, [r4, #36]	; 0x24
 800d276:	4b05      	ldr	r3, [pc, #20]	; (800d28c <std+0x3c>)
 800d278:	62a3      	str	r3, [r4, #40]	; 0x28
 800d27a:	4b05      	ldr	r3, [pc, #20]	; (800d290 <std+0x40>)
 800d27c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d27e:	4b05      	ldr	r3, [pc, #20]	; (800d294 <std+0x44>)
 800d280:	6224      	str	r4, [r4, #32]
 800d282:	6323      	str	r3, [r4, #48]	; 0x30
 800d284:	bd10      	pop	{r4, pc}
 800d286:	bf00      	nop
 800d288:	0800da49 	.word	0x0800da49
 800d28c:	0800da6b 	.word	0x0800da6b
 800d290:	0800daa3 	.word	0x0800daa3
 800d294:	0800dac7 	.word	0x0800dac7

0800d298 <_cleanup_r>:
 800d298:	4901      	ldr	r1, [pc, #4]	; (800d2a0 <_cleanup_r+0x8>)
 800d29a:	f000 b885 	b.w	800d3a8 <_fwalk_reent>
 800d29e:	bf00      	nop
 800d2a0:	0800dda1 	.word	0x0800dda1

0800d2a4 <__sfmoreglue>:
 800d2a4:	b570      	push	{r4, r5, r6, lr}
 800d2a6:	1e4a      	subs	r2, r1, #1
 800d2a8:	2568      	movs	r5, #104	; 0x68
 800d2aa:	4355      	muls	r5, r2
 800d2ac:	460e      	mov	r6, r1
 800d2ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d2b2:	f000 f897 	bl	800d3e4 <_malloc_r>
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	b140      	cbz	r0, 800d2cc <__sfmoreglue+0x28>
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	e9c0 1600 	strd	r1, r6, [r0]
 800d2c0:	300c      	adds	r0, #12
 800d2c2:	60a0      	str	r0, [r4, #8]
 800d2c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d2c8:	f7ff ff8c 	bl	800d1e4 <memset>
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	bd70      	pop	{r4, r5, r6, pc}

0800d2d0 <__sinit>:
 800d2d0:	6983      	ldr	r3, [r0, #24]
 800d2d2:	b510      	push	{r4, lr}
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	bb33      	cbnz	r3, 800d326 <__sinit+0x56>
 800d2d8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d2dc:	6503      	str	r3, [r0, #80]	; 0x50
 800d2de:	4b12      	ldr	r3, [pc, #72]	; (800d328 <__sinit+0x58>)
 800d2e0:	4a12      	ldr	r2, [pc, #72]	; (800d32c <__sinit+0x5c>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	6282      	str	r2, [r0, #40]	; 0x28
 800d2e6:	4298      	cmp	r0, r3
 800d2e8:	bf04      	itt	eq
 800d2ea:	2301      	moveq	r3, #1
 800d2ec:	6183      	streq	r3, [r0, #24]
 800d2ee:	f000 f81f 	bl	800d330 <__sfp>
 800d2f2:	6060      	str	r0, [r4, #4]
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f000 f81b 	bl	800d330 <__sfp>
 800d2fa:	60a0      	str	r0, [r4, #8]
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f000 f817 	bl	800d330 <__sfp>
 800d302:	2200      	movs	r2, #0
 800d304:	60e0      	str	r0, [r4, #12]
 800d306:	2104      	movs	r1, #4
 800d308:	6860      	ldr	r0, [r4, #4]
 800d30a:	f7ff ffa1 	bl	800d250 <std>
 800d30e:	2201      	movs	r2, #1
 800d310:	2109      	movs	r1, #9
 800d312:	68a0      	ldr	r0, [r4, #8]
 800d314:	f7ff ff9c 	bl	800d250 <std>
 800d318:	2202      	movs	r2, #2
 800d31a:	2112      	movs	r1, #18
 800d31c:	68e0      	ldr	r0, [r4, #12]
 800d31e:	f7ff ff97 	bl	800d250 <std>
 800d322:	2301      	movs	r3, #1
 800d324:	61a3      	str	r3, [r4, #24]
 800d326:	bd10      	pop	{r4, pc}
 800d328:	0800fed4 	.word	0x0800fed4
 800d32c:	0800d299 	.word	0x0800d299

0800d330 <__sfp>:
 800d330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d332:	4b1b      	ldr	r3, [pc, #108]	; (800d3a0 <__sfp+0x70>)
 800d334:	681e      	ldr	r6, [r3, #0]
 800d336:	69b3      	ldr	r3, [r6, #24]
 800d338:	4607      	mov	r7, r0
 800d33a:	b913      	cbnz	r3, 800d342 <__sfp+0x12>
 800d33c:	4630      	mov	r0, r6
 800d33e:	f7ff ffc7 	bl	800d2d0 <__sinit>
 800d342:	3648      	adds	r6, #72	; 0x48
 800d344:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d348:	3b01      	subs	r3, #1
 800d34a:	d503      	bpl.n	800d354 <__sfp+0x24>
 800d34c:	6833      	ldr	r3, [r6, #0]
 800d34e:	b133      	cbz	r3, 800d35e <__sfp+0x2e>
 800d350:	6836      	ldr	r6, [r6, #0]
 800d352:	e7f7      	b.n	800d344 <__sfp+0x14>
 800d354:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d358:	b16d      	cbz	r5, 800d376 <__sfp+0x46>
 800d35a:	3468      	adds	r4, #104	; 0x68
 800d35c:	e7f4      	b.n	800d348 <__sfp+0x18>
 800d35e:	2104      	movs	r1, #4
 800d360:	4638      	mov	r0, r7
 800d362:	f7ff ff9f 	bl	800d2a4 <__sfmoreglue>
 800d366:	6030      	str	r0, [r6, #0]
 800d368:	2800      	cmp	r0, #0
 800d36a:	d1f1      	bne.n	800d350 <__sfp+0x20>
 800d36c:	230c      	movs	r3, #12
 800d36e:	603b      	str	r3, [r7, #0]
 800d370:	4604      	mov	r4, r0
 800d372:	4620      	mov	r0, r4
 800d374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d376:	4b0b      	ldr	r3, [pc, #44]	; (800d3a4 <__sfp+0x74>)
 800d378:	6665      	str	r5, [r4, #100]	; 0x64
 800d37a:	e9c4 5500 	strd	r5, r5, [r4]
 800d37e:	60a5      	str	r5, [r4, #8]
 800d380:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d384:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d388:	2208      	movs	r2, #8
 800d38a:	4629      	mov	r1, r5
 800d38c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d390:	f7ff ff28 	bl	800d1e4 <memset>
 800d394:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d398:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d39c:	e7e9      	b.n	800d372 <__sfp+0x42>
 800d39e:	bf00      	nop
 800d3a0:	0800fed4 	.word	0x0800fed4
 800d3a4:	ffff0001 	.word	0xffff0001

0800d3a8 <_fwalk_reent>:
 800d3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3ac:	4680      	mov	r8, r0
 800d3ae:	4689      	mov	r9, r1
 800d3b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d3b4:	2600      	movs	r6, #0
 800d3b6:	b914      	cbnz	r4, 800d3be <_fwalk_reent+0x16>
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3be:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d3c2:	3f01      	subs	r7, #1
 800d3c4:	d501      	bpl.n	800d3ca <_fwalk_reent+0x22>
 800d3c6:	6824      	ldr	r4, [r4, #0]
 800d3c8:	e7f5      	b.n	800d3b6 <_fwalk_reent+0xe>
 800d3ca:	89ab      	ldrh	r3, [r5, #12]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d907      	bls.n	800d3e0 <_fwalk_reent+0x38>
 800d3d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	d003      	beq.n	800d3e0 <_fwalk_reent+0x38>
 800d3d8:	4629      	mov	r1, r5
 800d3da:	4640      	mov	r0, r8
 800d3dc:	47c8      	blx	r9
 800d3de:	4306      	orrs	r6, r0
 800d3e0:	3568      	adds	r5, #104	; 0x68
 800d3e2:	e7ee      	b.n	800d3c2 <_fwalk_reent+0x1a>

0800d3e4 <_malloc_r>:
 800d3e4:	b570      	push	{r4, r5, r6, lr}
 800d3e6:	1ccd      	adds	r5, r1, #3
 800d3e8:	f025 0503 	bic.w	r5, r5, #3
 800d3ec:	3508      	adds	r5, #8
 800d3ee:	2d0c      	cmp	r5, #12
 800d3f0:	bf38      	it	cc
 800d3f2:	250c      	movcc	r5, #12
 800d3f4:	2d00      	cmp	r5, #0
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	db01      	blt.n	800d3fe <_malloc_r+0x1a>
 800d3fa:	42a9      	cmp	r1, r5
 800d3fc:	d903      	bls.n	800d406 <_malloc_r+0x22>
 800d3fe:	230c      	movs	r3, #12
 800d400:	6033      	str	r3, [r6, #0]
 800d402:	2000      	movs	r0, #0
 800d404:	bd70      	pop	{r4, r5, r6, pc}
 800d406:	f000 fd6b 	bl	800dee0 <__malloc_lock>
 800d40a:	4a21      	ldr	r2, [pc, #132]	; (800d490 <_malloc_r+0xac>)
 800d40c:	6814      	ldr	r4, [r2, #0]
 800d40e:	4621      	mov	r1, r4
 800d410:	b991      	cbnz	r1, 800d438 <_malloc_r+0x54>
 800d412:	4c20      	ldr	r4, [pc, #128]	; (800d494 <_malloc_r+0xb0>)
 800d414:	6823      	ldr	r3, [r4, #0]
 800d416:	b91b      	cbnz	r3, 800d420 <_malloc_r+0x3c>
 800d418:	4630      	mov	r0, r6
 800d41a:	f000 fb05 	bl	800da28 <_sbrk_r>
 800d41e:	6020      	str	r0, [r4, #0]
 800d420:	4629      	mov	r1, r5
 800d422:	4630      	mov	r0, r6
 800d424:	f000 fb00 	bl	800da28 <_sbrk_r>
 800d428:	1c43      	adds	r3, r0, #1
 800d42a:	d124      	bne.n	800d476 <_malloc_r+0x92>
 800d42c:	230c      	movs	r3, #12
 800d42e:	6033      	str	r3, [r6, #0]
 800d430:	4630      	mov	r0, r6
 800d432:	f000 fd56 	bl	800dee2 <__malloc_unlock>
 800d436:	e7e4      	b.n	800d402 <_malloc_r+0x1e>
 800d438:	680b      	ldr	r3, [r1, #0]
 800d43a:	1b5b      	subs	r3, r3, r5
 800d43c:	d418      	bmi.n	800d470 <_malloc_r+0x8c>
 800d43e:	2b0b      	cmp	r3, #11
 800d440:	d90f      	bls.n	800d462 <_malloc_r+0x7e>
 800d442:	600b      	str	r3, [r1, #0]
 800d444:	50cd      	str	r5, [r1, r3]
 800d446:	18cc      	adds	r4, r1, r3
 800d448:	4630      	mov	r0, r6
 800d44a:	f000 fd4a 	bl	800dee2 <__malloc_unlock>
 800d44e:	f104 000b 	add.w	r0, r4, #11
 800d452:	1d23      	adds	r3, r4, #4
 800d454:	f020 0007 	bic.w	r0, r0, #7
 800d458:	1ac3      	subs	r3, r0, r3
 800d45a:	d0d3      	beq.n	800d404 <_malloc_r+0x20>
 800d45c:	425a      	negs	r2, r3
 800d45e:	50e2      	str	r2, [r4, r3]
 800d460:	e7d0      	b.n	800d404 <_malloc_r+0x20>
 800d462:	428c      	cmp	r4, r1
 800d464:	684b      	ldr	r3, [r1, #4]
 800d466:	bf16      	itet	ne
 800d468:	6063      	strne	r3, [r4, #4]
 800d46a:	6013      	streq	r3, [r2, #0]
 800d46c:	460c      	movne	r4, r1
 800d46e:	e7eb      	b.n	800d448 <_malloc_r+0x64>
 800d470:	460c      	mov	r4, r1
 800d472:	6849      	ldr	r1, [r1, #4]
 800d474:	e7cc      	b.n	800d410 <_malloc_r+0x2c>
 800d476:	1cc4      	adds	r4, r0, #3
 800d478:	f024 0403 	bic.w	r4, r4, #3
 800d47c:	42a0      	cmp	r0, r4
 800d47e:	d005      	beq.n	800d48c <_malloc_r+0xa8>
 800d480:	1a21      	subs	r1, r4, r0
 800d482:	4630      	mov	r0, r6
 800d484:	f000 fad0 	bl	800da28 <_sbrk_r>
 800d488:	3001      	adds	r0, #1
 800d48a:	d0cf      	beq.n	800d42c <_malloc_r+0x48>
 800d48c:	6025      	str	r5, [r4, #0]
 800d48e:	e7db      	b.n	800d448 <_malloc_r+0x64>
 800d490:	20000200 	.word	0x20000200
 800d494:	20000204 	.word	0x20000204

0800d498 <__sfputc_r>:
 800d498:	6893      	ldr	r3, [r2, #8]
 800d49a:	3b01      	subs	r3, #1
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	b410      	push	{r4}
 800d4a0:	6093      	str	r3, [r2, #8]
 800d4a2:	da08      	bge.n	800d4b6 <__sfputc_r+0x1e>
 800d4a4:	6994      	ldr	r4, [r2, #24]
 800d4a6:	42a3      	cmp	r3, r4
 800d4a8:	db01      	blt.n	800d4ae <__sfputc_r+0x16>
 800d4aa:	290a      	cmp	r1, #10
 800d4ac:	d103      	bne.n	800d4b6 <__sfputc_r+0x1e>
 800d4ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4b2:	f000 bb0d 	b.w	800dad0 <__swbuf_r>
 800d4b6:	6813      	ldr	r3, [r2, #0]
 800d4b8:	1c58      	adds	r0, r3, #1
 800d4ba:	6010      	str	r0, [r2, #0]
 800d4bc:	7019      	strb	r1, [r3, #0]
 800d4be:	4608      	mov	r0, r1
 800d4c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <__sfputs_r>:
 800d4c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c8:	4606      	mov	r6, r0
 800d4ca:	460f      	mov	r7, r1
 800d4cc:	4614      	mov	r4, r2
 800d4ce:	18d5      	adds	r5, r2, r3
 800d4d0:	42ac      	cmp	r4, r5
 800d4d2:	d101      	bne.n	800d4d8 <__sfputs_r+0x12>
 800d4d4:	2000      	movs	r0, #0
 800d4d6:	e007      	b.n	800d4e8 <__sfputs_r+0x22>
 800d4d8:	463a      	mov	r2, r7
 800d4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4de:	4630      	mov	r0, r6
 800d4e0:	f7ff ffda 	bl	800d498 <__sfputc_r>
 800d4e4:	1c43      	adds	r3, r0, #1
 800d4e6:	d1f3      	bne.n	800d4d0 <__sfputs_r+0xa>
 800d4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d4ec <_vfiprintf_r>:
 800d4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f0:	460c      	mov	r4, r1
 800d4f2:	b09d      	sub	sp, #116	; 0x74
 800d4f4:	4617      	mov	r7, r2
 800d4f6:	461d      	mov	r5, r3
 800d4f8:	4606      	mov	r6, r0
 800d4fa:	b118      	cbz	r0, 800d504 <_vfiprintf_r+0x18>
 800d4fc:	6983      	ldr	r3, [r0, #24]
 800d4fe:	b90b      	cbnz	r3, 800d504 <_vfiprintf_r+0x18>
 800d500:	f7ff fee6 	bl	800d2d0 <__sinit>
 800d504:	4b7c      	ldr	r3, [pc, #496]	; (800d6f8 <_vfiprintf_r+0x20c>)
 800d506:	429c      	cmp	r4, r3
 800d508:	d158      	bne.n	800d5bc <_vfiprintf_r+0xd0>
 800d50a:	6874      	ldr	r4, [r6, #4]
 800d50c:	89a3      	ldrh	r3, [r4, #12]
 800d50e:	0718      	lsls	r0, r3, #28
 800d510:	d55e      	bpl.n	800d5d0 <_vfiprintf_r+0xe4>
 800d512:	6923      	ldr	r3, [r4, #16]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d05b      	beq.n	800d5d0 <_vfiprintf_r+0xe4>
 800d518:	2300      	movs	r3, #0
 800d51a:	9309      	str	r3, [sp, #36]	; 0x24
 800d51c:	2320      	movs	r3, #32
 800d51e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d522:	2330      	movs	r3, #48	; 0x30
 800d524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d528:	9503      	str	r5, [sp, #12]
 800d52a:	f04f 0b01 	mov.w	fp, #1
 800d52e:	46b8      	mov	r8, r7
 800d530:	4645      	mov	r5, r8
 800d532:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d536:	b10b      	cbz	r3, 800d53c <_vfiprintf_r+0x50>
 800d538:	2b25      	cmp	r3, #37	; 0x25
 800d53a:	d154      	bne.n	800d5e6 <_vfiprintf_r+0xfa>
 800d53c:	ebb8 0a07 	subs.w	sl, r8, r7
 800d540:	d00b      	beq.n	800d55a <_vfiprintf_r+0x6e>
 800d542:	4653      	mov	r3, sl
 800d544:	463a      	mov	r2, r7
 800d546:	4621      	mov	r1, r4
 800d548:	4630      	mov	r0, r6
 800d54a:	f7ff ffbc 	bl	800d4c6 <__sfputs_r>
 800d54e:	3001      	adds	r0, #1
 800d550:	f000 80c2 	beq.w	800d6d8 <_vfiprintf_r+0x1ec>
 800d554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d556:	4453      	add	r3, sl
 800d558:	9309      	str	r3, [sp, #36]	; 0x24
 800d55a:	f898 3000 	ldrb.w	r3, [r8]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f000 80ba 	beq.w	800d6d8 <_vfiprintf_r+0x1ec>
 800d564:	2300      	movs	r3, #0
 800d566:	f04f 32ff 	mov.w	r2, #4294967295
 800d56a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d56e:	9304      	str	r3, [sp, #16]
 800d570:	9307      	str	r3, [sp, #28]
 800d572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d576:	931a      	str	r3, [sp, #104]	; 0x68
 800d578:	46a8      	mov	r8, r5
 800d57a:	2205      	movs	r2, #5
 800d57c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d580:	485e      	ldr	r0, [pc, #376]	; (800d6fc <_vfiprintf_r+0x210>)
 800d582:	f7f2 fe35 	bl	80001f0 <memchr>
 800d586:	9b04      	ldr	r3, [sp, #16]
 800d588:	bb78      	cbnz	r0, 800d5ea <_vfiprintf_r+0xfe>
 800d58a:	06d9      	lsls	r1, r3, #27
 800d58c:	bf44      	itt	mi
 800d58e:	2220      	movmi	r2, #32
 800d590:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d594:	071a      	lsls	r2, r3, #28
 800d596:	bf44      	itt	mi
 800d598:	222b      	movmi	r2, #43	; 0x2b
 800d59a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d59e:	782a      	ldrb	r2, [r5, #0]
 800d5a0:	2a2a      	cmp	r2, #42	; 0x2a
 800d5a2:	d02a      	beq.n	800d5fa <_vfiprintf_r+0x10e>
 800d5a4:	9a07      	ldr	r2, [sp, #28]
 800d5a6:	46a8      	mov	r8, r5
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	250a      	movs	r5, #10
 800d5ac:	4641      	mov	r1, r8
 800d5ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5b2:	3b30      	subs	r3, #48	; 0x30
 800d5b4:	2b09      	cmp	r3, #9
 800d5b6:	d969      	bls.n	800d68c <_vfiprintf_r+0x1a0>
 800d5b8:	b360      	cbz	r0, 800d614 <_vfiprintf_r+0x128>
 800d5ba:	e024      	b.n	800d606 <_vfiprintf_r+0x11a>
 800d5bc:	4b50      	ldr	r3, [pc, #320]	; (800d700 <_vfiprintf_r+0x214>)
 800d5be:	429c      	cmp	r4, r3
 800d5c0:	d101      	bne.n	800d5c6 <_vfiprintf_r+0xda>
 800d5c2:	68b4      	ldr	r4, [r6, #8]
 800d5c4:	e7a2      	b.n	800d50c <_vfiprintf_r+0x20>
 800d5c6:	4b4f      	ldr	r3, [pc, #316]	; (800d704 <_vfiprintf_r+0x218>)
 800d5c8:	429c      	cmp	r4, r3
 800d5ca:	bf08      	it	eq
 800d5cc:	68f4      	ldreq	r4, [r6, #12]
 800d5ce:	e79d      	b.n	800d50c <_vfiprintf_r+0x20>
 800d5d0:	4621      	mov	r1, r4
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	f000 fae0 	bl	800db98 <__swsetup_r>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d09d      	beq.n	800d518 <_vfiprintf_r+0x2c>
 800d5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e0:	b01d      	add	sp, #116	; 0x74
 800d5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e6:	46a8      	mov	r8, r5
 800d5e8:	e7a2      	b.n	800d530 <_vfiprintf_r+0x44>
 800d5ea:	4a44      	ldr	r2, [pc, #272]	; (800d6fc <_vfiprintf_r+0x210>)
 800d5ec:	1a80      	subs	r0, r0, r2
 800d5ee:	fa0b f000 	lsl.w	r0, fp, r0
 800d5f2:	4318      	orrs	r0, r3
 800d5f4:	9004      	str	r0, [sp, #16]
 800d5f6:	4645      	mov	r5, r8
 800d5f8:	e7be      	b.n	800d578 <_vfiprintf_r+0x8c>
 800d5fa:	9a03      	ldr	r2, [sp, #12]
 800d5fc:	1d11      	adds	r1, r2, #4
 800d5fe:	6812      	ldr	r2, [r2, #0]
 800d600:	9103      	str	r1, [sp, #12]
 800d602:	2a00      	cmp	r2, #0
 800d604:	db01      	blt.n	800d60a <_vfiprintf_r+0x11e>
 800d606:	9207      	str	r2, [sp, #28]
 800d608:	e004      	b.n	800d614 <_vfiprintf_r+0x128>
 800d60a:	4252      	negs	r2, r2
 800d60c:	f043 0302 	orr.w	r3, r3, #2
 800d610:	9207      	str	r2, [sp, #28]
 800d612:	9304      	str	r3, [sp, #16]
 800d614:	f898 3000 	ldrb.w	r3, [r8]
 800d618:	2b2e      	cmp	r3, #46	; 0x2e
 800d61a:	d10e      	bne.n	800d63a <_vfiprintf_r+0x14e>
 800d61c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800d620:	2b2a      	cmp	r3, #42	; 0x2a
 800d622:	d138      	bne.n	800d696 <_vfiprintf_r+0x1aa>
 800d624:	9b03      	ldr	r3, [sp, #12]
 800d626:	1d1a      	adds	r2, r3, #4
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	9203      	str	r2, [sp, #12]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	bfb8      	it	lt
 800d630:	f04f 33ff 	movlt.w	r3, #4294967295
 800d634:	f108 0802 	add.w	r8, r8, #2
 800d638:	9305      	str	r3, [sp, #20]
 800d63a:	4d33      	ldr	r5, [pc, #204]	; (800d708 <_vfiprintf_r+0x21c>)
 800d63c:	f898 1000 	ldrb.w	r1, [r8]
 800d640:	2203      	movs	r2, #3
 800d642:	4628      	mov	r0, r5
 800d644:	f7f2 fdd4 	bl	80001f0 <memchr>
 800d648:	b140      	cbz	r0, 800d65c <_vfiprintf_r+0x170>
 800d64a:	2340      	movs	r3, #64	; 0x40
 800d64c:	1b40      	subs	r0, r0, r5
 800d64e:	fa03 f000 	lsl.w	r0, r3, r0
 800d652:	9b04      	ldr	r3, [sp, #16]
 800d654:	4303      	orrs	r3, r0
 800d656:	f108 0801 	add.w	r8, r8, #1
 800d65a:	9304      	str	r3, [sp, #16]
 800d65c:	f898 1000 	ldrb.w	r1, [r8]
 800d660:	482a      	ldr	r0, [pc, #168]	; (800d70c <_vfiprintf_r+0x220>)
 800d662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d666:	2206      	movs	r2, #6
 800d668:	f108 0701 	add.w	r7, r8, #1
 800d66c:	f7f2 fdc0 	bl	80001f0 <memchr>
 800d670:	2800      	cmp	r0, #0
 800d672:	d037      	beq.n	800d6e4 <_vfiprintf_r+0x1f8>
 800d674:	4b26      	ldr	r3, [pc, #152]	; (800d710 <_vfiprintf_r+0x224>)
 800d676:	bb1b      	cbnz	r3, 800d6c0 <_vfiprintf_r+0x1d4>
 800d678:	9b03      	ldr	r3, [sp, #12]
 800d67a:	3307      	adds	r3, #7
 800d67c:	f023 0307 	bic.w	r3, r3, #7
 800d680:	3308      	adds	r3, #8
 800d682:	9303      	str	r3, [sp, #12]
 800d684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d686:	444b      	add	r3, r9
 800d688:	9309      	str	r3, [sp, #36]	; 0x24
 800d68a:	e750      	b.n	800d52e <_vfiprintf_r+0x42>
 800d68c:	fb05 3202 	mla	r2, r5, r2, r3
 800d690:	2001      	movs	r0, #1
 800d692:	4688      	mov	r8, r1
 800d694:	e78a      	b.n	800d5ac <_vfiprintf_r+0xc0>
 800d696:	2300      	movs	r3, #0
 800d698:	f108 0801 	add.w	r8, r8, #1
 800d69c:	9305      	str	r3, [sp, #20]
 800d69e:	4619      	mov	r1, r3
 800d6a0:	250a      	movs	r5, #10
 800d6a2:	4640      	mov	r0, r8
 800d6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6a8:	3a30      	subs	r2, #48	; 0x30
 800d6aa:	2a09      	cmp	r2, #9
 800d6ac:	d903      	bls.n	800d6b6 <_vfiprintf_r+0x1ca>
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d0c3      	beq.n	800d63a <_vfiprintf_r+0x14e>
 800d6b2:	9105      	str	r1, [sp, #20]
 800d6b4:	e7c1      	b.n	800d63a <_vfiprintf_r+0x14e>
 800d6b6:	fb05 2101 	mla	r1, r5, r1, r2
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	4680      	mov	r8, r0
 800d6be:	e7f0      	b.n	800d6a2 <_vfiprintf_r+0x1b6>
 800d6c0:	ab03      	add	r3, sp, #12
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	4622      	mov	r2, r4
 800d6c6:	4b13      	ldr	r3, [pc, #76]	; (800d714 <_vfiprintf_r+0x228>)
 800d6c8:	a904      	add	r1, sp, #16
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	f3af 8000 	nop.w
 800d6d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d6d4:	4681      	mov	r9, r0
 800d6d6:	d1d5      	bne.n	800d684 <_vfiprintf_r+0x198>
 800d6d8:	89a3      	ldrh	r3, [r4, #12]
 800d6da:	065b      	lsls	r3, r3, #25
 800d6dc:	f53f af7e 	bmi.w	800d5dc <_vfiprintf_r+0xf0>
 800d6e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d6e2:	e77d      	b.n	800d5e0 <_vfiprintf_r+0xf4>
 800d6e4:	ab03      	add	r3, sp, #12
 800d6e6:	9300      	str	r3, [sp, #0]
 800d6e8:	4622      	mov	r2, r4
 800d6ea:	4b0a      	ldr	r3, [pc, #40]	; (800d714 <_vfiprintf_r+0x228>)
 800d6ec:	a904      	add	r1, sp, #16
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f000 f888 	bl	800d804 <_printf_i>
 800d6f4:	e7ec      	b.n	800d6d0 <_vfiprintf_r+0x1e4>
 800d6f6:	bf00      	nop
 800d6f8:	0800fef8 	.word	0x0800fef8
 800d6fc:	0800ff38 	.word	0x0800ff38
 800d700:	0800ff18 	.word	0x0800ff18
 800d704:	0800fed8 	.word	0x0800fed8
 800d708:	0800ff3e 	.word	0x0800ff3e
 800d70c:	0800ff42 	.word	0x0800ff42
 800d710:	00000000 	.word	0x00000000
 800d714:	0800d4c7 	.word	0x0800d4c7

0800d718 <_printf_common>:
 800d718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d71c:	4691      	mov	r9, r2
 800d71e:	461f      	mov	r7, r3
 800d720:	688a      	ldr	r2, [r1, #8]
 800d722:	690b      	ldr	r3, [r1, #16]
 800d724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d728:	4293      	cmp	r3, r2
 800d72a:	bfb8      	it	lt
 800d72c:	4613      	movlt	r3, r2
 800d72e:	f8c9 3000 	str.w	r3, [r9]
 800d732:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d736:	4606      	mov	r6, r0
 800d738:	460c      	mov	r4, r1
 800d73a:	b112      	cbz	r2, 800d742 <_printf_common+0x2a>
 800d73c:	3301      	adds	r3, #1
 800d73e:	f8c9 3000 	str.w	r3, [r9]
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	0699      	lsls	r1, r3, #26
 800d746:	bf42      	ittt	mi
 800d748:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d74c:	3302      	addmi	r3, #2
 800d74e:	f8c9 3000 	strmi.w	r3, [r9]
 800d752:	6825      	ldr	r5, [r4, #0]
 800d754:	f015 0506 	ands.w	r5, r5, #6
 800d758:	d107      	bne.n	800d76a <_printf_common+0x52>
 800d75a:	f104 0a19 	add.w	sl, r4, #25
 800d75e:	68e3      	ldr	r3, [r4, #12]
 800d760:	f8d9 2000 	ldr.w	r2, [r9]
 800d764:	1a9b      	subs	r3, r3, r2
 800d766:	42ab      	cmp	r3, r5
 800d768:	dc28      	bgt.n	800d7bc <_printf_common+0xa4>
 800d76a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d76e:	6822      	ldr	r2, [r4, #0]
 800d770:	3300      	adds	r3, #0
 800d772:	bf18      	it	ne
 800d774:	2301      	movne	r3, #1
 800d776:	0692      	lsls	r2, r2, #26
 800d778:	d42d      	bmi.n	800d7d6 <_printf_common+0xbe>
 800d77a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d77e:	4639      	mov	r1, r7
 800d780:	4630      	mov	r0, r6
 800d782:	47c0      	blx	r8
 800d784:	3001      	adds	r0, #1
 800d786:	d020      	beq.n	800d7ca <_printf_common+0xb2>
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	68e5      	ldr	r5, [r4, #12]
 800d78c:	f8d9 2000 	ldr.w	r2, [r9]
 800d790:	f003 0306 	and.w	r3, r3, #6
 800d794:	2b04      	cmp	r3, #4
 800d796:	bf08      	it	eq
 800d798:	1aad      	subeq	r5, r5, r2
 800d79a:	68a3      	ldr	r3, [r4, #8]
 800d79c:	6922      	ldr	r2, [r4, #16]
 800d79e:	bf0c      	ite	eq
 800d7a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7a4:	2500      	movne	r5, #0
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	bfc4      	itt	gt
 800d7aa:	1a9b      	subgt	r3, r3, r2
 800d7ac:	18ed      	addgt	r5, r5, r3
 800d7ae:	f04f 0900 	mov.w	r9, #0
 800d7b2:	341a      	adds	r4, #26
 800d7b4:	454d      	cmp	r5, r9
 800d7b6:	d11a      	bne.n	800d7ee <_printf_common+0xd6>
 800d7b8:	2000      	movs	r0, #0
 800d7ba:	e008      	b.n	800d7ce <_printf_common+0xb6>
 800d7bc:	2301      	movs	r3, #1
 800d7be:	4652      	mov	r2, sl
 800d7c0:	4639      	mov	r1, r7
 800d7c2:	4630      	mov	r0, r6
 800d7c4:	47c0      	blx	r8
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	d103      	bne.n	800d7d2 <_printf_common+0xba>
 800d7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7d2:	3501      	adds	r5, #1
 800d7d4:	e7c3      	b.n	800d75e <_printf_common+0x46>
 800d7d6:	18e1      	adds	r1, r4, r3
 800d7d8:	1c5a      	adds	r2, r3, #1
 800d7da:	2030      	movs	r0, #48	; 0x30
 800d7dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7e0:	4422      	add	r2, r4
 800d7e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7ea:	3302      	adds	r3, #2
 800d7ec:	e7c5      	b.n	800d77a <_printf_common+0x62>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	4639      	mov	r1, r7
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	47c0      	blx	r8
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	d0e6      	beq.n	800d7ca <_printf_common+0xb2>
 800d7fc:	f109 0901 	add.w	r9, r9, #1
 800d800:	e7d8      	b.n	800d7b4 <_printf_common+0x9c>
	...

0800d804 <_printf_i>:
 800d804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d808:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d80c:	460c      	mov	r4, r1
 800d80e:	7e09      	ldrb	r1, [r1, #24]
 800d810:	b085      	sub	sp, #20
 800d812:	296e      	cmp	r1, #110	; 0x6e
 800d814:	4617      	mov	r7, r2
 800d816:	4606      	mov	r6, r0
 800d818:	4698      	mov	r8, r3
 800d81a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d81c:	f000 80b3 	beq.w	800d986 <_printf_i+0x182>
 800d820:	d822      	bhi.n	800d868 <_printf_i+0x64>
 800d822:	2963      	cmp	r1, #99	; 0x63
 800d824:	d036      	beq.n	800d894 <_printf_i+0x90>
 800d826:	d80a      	bhi.n	800d83e <_printf_i+0x3a>
 800d828:	2900      	cmp	r1, #0
 800d82a:	f000 80b9 	beq.w	800d9a0 <_printf_i+0x19c>
 800d82e:	2958      	cmp	r1, #88	; 0x58
 800d830:	f000 8083 	beq.w	800d93a <_printf_i+0x136>
 800d834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d838:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d83c:	e032      	b.n	800d8a4 <_printf_i+0xa0>
 800d83e:	2964      	cmp	r1, #100	; 0x64
 800d840:	d001      	beq.n	800d846 <_printf_i+0x42>
 800d842:	2969      	cmp	r1, #105	; 0x69
 800d844:	d1f6      	bne.n	800d834 <_printf_i+0x30>
 800d846:	6820      	ldr	r0, [r4, #0]
 800d848:	6813      	ldr	r3, [r2, #0]
 800d84a:	0605      	lsls	r5, r0, #24
 800d84c:	f103 0104 	add.w	r1, r3, #4
 800d850:	d52a      	bpl.n	800d8a8 <_printf_i+0xa4>
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	6011      	str	r1, [r2, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	da03      	bge.n	800d862 <_printf_i+0x5e>
 800d85a:	222d      	movs	r2, #45	; 0x2d
 800d85c:	425b      	negs	r3, r3
 800d85e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d862:	486f      	ldr	r0, [pc, #444]	; (800da20 <_printf_i+0x21c>)
 800d864:	220a      	movs	r2, #10
 800d866:	e039      	b.n	800d8dc <_printf_i+0xd8>
 800d868:	2973      	cmp	r1, #115	; 0x73
 800d86a:	f000 809d 	beq.w	800d9a8 <_printf_i+0x1a4>
 800d86e:	d808      	bhi.n	800d882 <_printf_i+0x7e>
 800d870:	296f      	cmp	r1, #111	; 0x6f
 800d872:	d020      	beq.n	800d8b6 <_printf_i+0xb2>
 800d874:	2970      	cmp	r1, #112	; 0x70
 800d876:	d1dd      	bne.n	800d834 <_printf_i+0x30>
 800d878:	6823      	ldr	r3, [r4, #0]
 800d87a:	f043 0320 	orr.w	r3, r3, #32
 800d87e:	6023      	str	r3, [r4, #0]
 800d880:	e003      	b.n	800d88a <_printf_i+0x86>
 800d882:	2975      	cmp	r1, #117	; 0x75
 800d884:	d017      	beq.n	800d8b6 <_printf_i+0xb2>
 800d886:	2978      	cmp	r1, #120	; 0x78
 800d888:	d1d4      	bne.n	800d834 <_printf_i+0x30>
 800d88a:	2378      	movs	r3, #120	; 0x78
 800d88c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d890:	4864      	ldr	r0, [pc, #400]	; (800da24 <_printf_i+0x220>)
 800d892:	e055      	b.n	800d940 <_printf_i+0x13c>
 800d894:	6813      	ldr	r3, [r2, #0]
 800d896:	1d19      	adds	r1, r3, #4
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	6011      	str	r1, [r2, #0]
 800d89c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	e08c      	b.n	800d9c2 <_printf_i+0x1be>
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	6011      	str	r1, [r2, #0]
 800d8ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d8b0:	bf18      	it	ne
 800d8b2:	b21b      	sxthne	r3, r3
 800d8b4:	e7cf      	b.n	800d856 <_printf_i+0x52>
 800d8b6:	6813      	ldr	r3, [r2, #0]
 800d8b8:	6825      	ldr	r5, [r4, #0]
 800d8ba:	1d18      	adds	r0, r3, #4
 800d8bc:	6010      	str	r0, [r2, #0]
 800d8be:	0628      	lsls	r0, r5, #24
 800d8c0:	d501      	bpl.n	800d8c6 <_printf_i+0xc2>
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	e002      	b.n	800d8cc <_printf_i+0xc8>
 800d8c6:	0668      	lsls	r0, r5, #25
 800d8c8:	d5fb      	bpl.n	800d8c2 <_printf_i+0xbe>
 800d8ca:	881b      	ldrh	r3, [r3, #0]
 800d8cc:	4854      	ldr	r0, [pc, #336]	; (800da20 <_printf_i+0x21c>)
 800d8ce:	296f      	cmp	r1, #111	; 0x6f
 800d8d0:	bf14      	ite	ne
 800d8d2:	220a      	movne	r2, #10
 800d8d4:	2208      	moveq	r2, #8
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8dc:	6865      	ldr	r5, [r4, #4]
 800d8de:	60a5      	str	r5, [r4, #8]
 800d8e0:	2d00      	cmp	r5, #0
 800d8e2:	f2c0 8095 	blt.w	800da10 <_printf_i+0x20c>
 800d8e6:	6821      	ldr	r1, [r4, #0]
 800d8e8:	f021 0104 	bic.w	r1, r1, #4
 800d8ec:	6021      	str	r1, [r4, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d13d      	bne.n	800d96e <_printf_i+0x16a>
 800d8f2:	2d00      	cmp	r5, #0
 800d8f4:	f040 808e 	bne.w	800da14 <_printf_i+0x210>
 800d8f8:	4665      	mov	r5, ip
 800d8fa:	2a08      	cmp	r2, #8
 800d8fc:	d10b      	bne.n	800d916 <_printf_i+0x112>
 800d8fe:	6823      	ldr	r3, [r4, #0]
 800d900:	07db      	lsls	r3, r3, #31
 800d902:	d508      	bpl.n	800d916 <_printf_i+0x112>
 800d904:	6923      	ldr	r3, [r4, #16]
 800d906:	6862      	ldr	r2, [r4, #4]
 800d908:	429a      	cmp	r2, r3
 800d90a:	bfde      	ittt	le
 800d90c:	2330      	movle	r3, #48	; 0x30
 800d90e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d912:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d916:	ebac 0305 	sub.w	r3, ip, r5
 800d91a:	6123      	str	r3, [r4, #16]
 800d91c:	f8cd 8000 	str.w	r8, [sp]
 800d920:	463b      	mov	r3, r7
 800d922:	aa03      	add	r2, sp, #12
 800d924:	4621      	mov	r1, r4
 800d926:	4630      	mov	r0, r6
 800d928:	f7ff fef6 	bl	800d718 <_printf_common>
 800d92c:	3001      	adds	r0, #1
 800d92e:	d14d      	bne.n	800d9cc <_printf_i+0x1c8>
 800d930:	f04f 30ff 	mov.w	r0, #4294967295
 800d934:	b005      	add	sp, #20
 800d936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d93a:	4839      	ldr	r0, [pc, #228]	; (800da20 <_printf_i+0x21c>)
 800d93c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d940:	6813      	ldr	r3, [r2, #0]
 800d942:	6821      	ldr	r1, [r4, #0]
 800d944:	1d1d      	adds	r5, r3, #4
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6015      	str	r5, [r2, #0]
 800d94a:	060a      	lsls	r2, r1, #24
 800d94c:	d50b      	bpl.n	800d966 <_printf_i+0x162>
 800d94e:	07ca      	lsls	r2, r1, #31
 800d950:	bf44      	itt	mi
 800d952:	f041 0120 	orrmi.w	r1, r1, #32
 800d956:	6021      	strmi	r1, [r4, #0]
 800d958:	b91b      	cbnz	r3, 800d962 <_printf_i+0x15e>
 800d95a:	6822      	ldr	r2, [r4, #0]
 800d95c:	f022 0220 	bic.w	r2, r2, #32
 800d960:	6022      	str	r2, [r4, #0]
 800d962:	2210      	movs	r2, #16
 800d964:	e7b7      	b.n	800d8d6 <_printf_i+0xd2>
 800d966:	064d      	lsls	r5, r1, #25
 800d968:	bf48      	it	mi
 800d96a:	b29b      	uxthmi	r3, r3
 800d96c:	e7ef      	b.n	800d94e <_printf_i+0x14a>
 800d96e:	4665      	mov	r5, ip
 800d970:	fbb3 f1f2 	udiv	r1, r3, r2
 800d974:	fb02 3311 	mls	r3, r2, r1, r3
 800d978:	5cc3      	ldrb	r3, [r0, r3]
 800d97a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d97e:	460b      	mov	r3, r1
 800d980:	2900      	cmp	r1, #0
 800d982:	d1f5      	bne.n	800d970 <_printf_i+0x16c>
 800d984:	e7b9      	b.n	800d8fa <_printf_i+0xf6>
 800d986:	6813      	ldr	r3, [r2, #0]
 800d988:	6825      	ldr	r5, [r4, #0]
 800d98a:	6961      	ldr	r1, [r4, #20]
 800d98c:	1d18      	adds	r0, r3, #4
 800d98e:	6010      	str	r0, [r2, #0]
 800d990:	0628      	lsls	r0, r5, #24
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	d501      	bpl.n	800d99a <_printf_i+0x196>
 800d996:	6019      	str	r1, [r3, #0]
 800d998:	e002      	b.n	800d9a0 <_printf_i+0x19c>
 800d99a:	066a      	lsls	r2, r5, #25
 800d99c:	d5fb      	bpl.n	800d996 <_printf_i+0x192>
 800d99e:	8019      	strh	r1, [r3, #0]
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	6123      	str	r3, [r4, #16]
 800d9a4:	4665      	mov	r5, ip
 800d9a6:	e7b9      	b.n	800d91c <_printf_i+0x118>
 800d9a8:	6813      	ldr	r3, [r2, #0]
 800d9aa:	1d19      	adds	r1, r3, #4
 800d9ac:	6011      	str	r1, [r2, #0]
 800d9ae:	681d      	ldr	r5, [r3, #0]
 800d9b0:	6862      	ldr	r2, [r4, #4]
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	f7f2 fc1b 	bl	80001f0 <memchr>
 800d9ba:	b108      	cbz	r0, 800d9c0 <_printf_i+0x1bc>
 800d9bc:	1b40      	subs	r0, r0, r5
 800d9be:	6060      	str	r0, [r4, #4]
 800d9c0:	6863      	ldr	r3, [r4, #4]
 800d9c2:	6123      	str	r3, [r4, #16]
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9ca:	e7a7      	b.n	800d91c <_printf_i+0x118>
 800d9cc:	6923      	ldr	r3, [r4, #16]
 800d9ce:	462a      	mov	r2, r5
 800d9d0:	4639      	mov	r1, r7
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	47c0      	blx	r8
 800d9d6:	3001      	adds	r0, #1
 800d9d8:	d0aa      	beq.n	800d930 <_printf_i+0x12c>
 800d9da:	6823      	ldr	r3, [r4, #0]
 800d9dc:	079b      	lsls	r3, r3, #30
 800d9de:	d413      	bmi.n	800da08 <_printf_i+0x204>
 800d9e0:	68e0      	ldr	r0, [r4, #12]
 800d9e2:	9b03      	ldr	r3, [sp, #12]
 800d9e4:	4298      	cmp	r0, r3
 800d9e6:	bfb8      	it	lt
 800d9e8:	4618      	movlt	r0, r3
 800d9ea:	e7a3      	b.n	800d934 <_printf_i+0x130>
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	464a      	mov	r2, r9
 800d9f0:	4639      	mov	r1, r7
 800d9f2:	4630      	mov	r0, r6
 800d9f4:	47c0      	blx	r8
 800d9f6:	3001      	adds	r0, #1
 800d9f8:	d09a      	beq.n	800d930 <_printf_i+0x12c>
 800d9fa:	3501      	adds	r5, #1
 800d9fc:	68e3      	ldr	r3, [r4, #12]
 800d9fe:	9a03      	ldr	r2, [sp, #12]
 800da00:	1a9b      	subs	r3, r3, r2
 800da02:	42ab      	cmp	r3, r5
 800da04:	dcf2      	bgt.n	800d9ec <_printf_i+0x1e8>
 800da06:	e7eb      	b.n	800d9e0 <_printf_i+0x1dc>
 800da08:	2500      	movs	r5, #0
 800da0a:	f104 0919 	add.w	r9, r4, #25
 800da0e:	e7f5      	b.n	800d9fc <_printf_i+0x1f8>
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1ac      	bne.n	800d96e <_printf_i+0x16a>
 800da14:	7803      	ldrb	r3, [r0, #0]
 800da16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da1e:	e76c      	b.n	800d8fa <_printf_i+0xf6>
 800da20:	0800ff49 	.word	0x0800ff49
 800da24:	0800ff5a 	.word	0x0800ff5a

0800da28 <_sbrk_r>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	4c06      	ldr	r4, [pc, #24]	; (800da44 <_sbrk_r+0x1c>)
 800da2c:	2300      	movs	r3, #0
 800da2e:	4605      	mov	r5, r0
 800da30:	4608      	mov	r0, r1
 800da32:	6023      	str	r3, [r4, #0]
 800da34:	f000 fb00 	bl	800e038 <_sbrk>
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	d102      	bne.n	800da42 <_sbrk_r+0x1a>
 800da3c:	6823      	ldr	r3, [r4, #0]
 800da3e:	b103      	cbz	r3, 800da42 <_sbrk_r+0x1a>
 800da40:	602b      	str	r3, [r5, #0]
 800da42:	bd38      	pop	{r3, r4, r5, pc}
 800da44:	2000c6e4 	.word	0x2000c6e4

0800da48 <__sread>:
 800da48:	b510      	push	{r4, lr}
 800da4a:	460c      	mov	r4, r1
 800da4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da50:	f000 fa96 	bl	800df80 <_read_r>
 800da54:	2800      	cmp	r0, #0
 800da56:	bfab      	itete	ge
 800da58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da5a:	89a3      	ldrhlt	r3, [r4, #12]
 800da5c:	181b      	addge	r3, r3, r0
 800da5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da62:	bfac      	ite	ge
 800da64:	6563      	strge	r3, [r4, #84]	; 0x54
 800da66:	81a3      	strhlt	r3, [r4, #12]
 800da68:	bd10      	pop	{r4, pc}

0800da6a <__swrite>:
 800da6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6e:	461f      	mov	r7, r3
 800da70:	898b      	ldrh	r3, [r1, #12]
 800da72:	05db      	lsls	r3, r3, #23
 800da74:	4605      	mov	r5, r0
 800da76:	460c      	mov	r4, r1
 800da78:	4616      	mov	r6, r2
 800da7a:	d505      	bpl.n	800da88 <__swrite+0x1e>
 800da7c:	2302      	movs	r3, #2
 800da7e:	2200      	movs	r2, #0
 800da80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da84:	f000 f9b6 	bl	800ddf4 <_lseek_r>
 800da88:	89a3      	ldrh	r3, [r4, #12]
 800da8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da92:	81a3      	strh	r3, [r4, #12]
 800da94:	4632      	mov	r2, r6
 800da96:	463b      	mov	r3, r7
 800da98:	4628      	mov	r0, r5
 800da9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da9e:	f000 b869 	b.w	800db74 <_write_r>

0800daa2 <__sseek>:
 800daa2:	b510      	push	{r4, lr}
 800daa4:	460c      	mov	r4, r1
 800daa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daaa:	f000 f9a3 	bl	800ddf4 <_lseek_r>
 800daae:	1c43      	adds	r3, r0, #1
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	bf15      	itete	ne
 800dab4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800daba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dabe:	81a3      	strheq	r3, [r4, #12]
 800dac0:	bf18      	it	ne
 800dac2:	81a3      	strhne	r3, [r4, #12]
 800dac4:	bd10      	pop	{r4, pc}

0800dac6 <__sclose>:
 800dac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daca:	f000 b8d3 	b.w	800dc74 <_close_r>
	...

0800dad0 <__swbuf_r>:
 800dad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad2:	460e      	mov	r6, r1
 800dad4:	4614      	mov	r4, r2
 800dad6:	4605      	mov	r5, r0
 800dad8:	b118      	cbz	r0, 800dae2 <__swbuf_r+0x12>
 800dada:	6983      	ldr	r3, [r0, #24]
 800dadc:	b90b      	cbnz	r3, 800dae2 <__swbuf_r+0x12>
 800dade:	f7ff fbf7 	bl	800d2d0 <__sinit>
 800dae2:	4b21      	ldr	r3, [pc, #132]	; (800db68 <__swbuf_r+0x98>)
 800dae4:	429c      	cmp	r4, r3
 800dae6:	d12a      	bne.n	800db3e <__swbuf_r+0x6e>
 800dae8:	686c      	ldr	r4, [r5, #4]
 800daea:	69a3      	ldr	r3, [r4, #24]
 800daec:	60a3      	str	r3, [r4, #8]
 800daee:	89a3      	ldrh	r3, [r4, #12]
 800daf0:	071a      	lsls	r2, r3, #28
 800daf2:	d52e      	bpl.n	800db52 <__swbuf_r+0x82>
 800daf4:	6923      	ldr	r3, [r4, #16]
 800daf6:	b363      	cbz	r3, 800db52 <__swbuf_r+0x82>
 800daf8:	6923      	ldr	r3, [r4, #16]
 800dafa:	6820      	ldr	r0, [r4, #0]
 800dafc:	1ac0      	subs	r0, r0, r3
 800dafe:	6963      	ldr	r3, [r4, #20]
 800db00:	b2f6      	uxtb	r6, r6
 800db02:	4283      	cmp	r3, r0
 800db04:	4637      	mov	r7, r6
 800db06:	dc04      	bgt.n	800db12 <__swbuf_r+0x42>
 800db08:	4621      	mov	r1, r4
 800db0a:	4628      	mov	r0, r5
 800db0c:	f000 f948 	bl	800dda0 <_fflush_r>
 800db10:	bb28      	cbnz	r0, 800db5e <__swbuf_r+0x8e>
 800db12:	68a3      	ldr	r3, [r4, #8]
 800db14:	3b01      	subs	r3, #1
 800db16:	60a3      	str	r3, [r4, #8]
 800db18:	6823      	ldr	r3, [r4, #0]
 800db1a:	1c5a      	adds	r2, r3, #1
 800db1c:	6022      	str	r2, [r4, #0]
 800db1e:	701e      	strb	r6, [r3, #0]
 800db20:	6963      	ldr	r3, [r4, #20]
 800db22:	3001      	adds	r0, #1
 800db24:	4283      	cmp	r3, r0
 800db26:	d004      	beq.n	800db32 <__swbuf_r+0x62>
 800db28:	89a3      	ldrh	r3, [r4, #12]
 800db2a:	07db      	lsls	r3, r3, #31
 800db2c:	d519      	bpl.n	800db62 <__swbuf_r+0x92>
 800db2e:	2e0a      	cmp	r6, #10
 800db30:	d117      	bne.n	800db62 <__swbuf_r+0x92>
 800db32:	4621      	mov	r1, r4
 800db34:	4628      	mov	r0, r5
 800db36:	f000 f933 	bl	800dda0 <_fflush_r>
 800db3a:	b190      	cbz	r0, 800db62 <__swbuf_r+0x92>
 800db3c:	e00f      	b.n	800db5e <__swbuf_r+0x8e>
 800db3e:	4b0b      	ldr	r3, [pc, #44]	; (800db6c <__swbuf_r+0x9c>)
 800db40:	429c      	cmp	r4, r3
 800db42:	d101      	bne.n	800db48 <__swbuf_r+0x78>
 800db44:	68ac      	ldr	r4, [r5, #8]
 800db46:	e7d0      	b.n	800daea <__swbuf_r+0x1a>
 800db48:	4b09      	ldr	r3, [pc, #36]	; (800db70 <__swbuf_r+0xa0>)
 800db4a:	429c      	cmp	r4, r3
 800db4c:	bf08      	it	eq
 800db4e:	68ec      	ldreq	r4, [r5, #12]
 800db50:	e7cb      	b.n	800daea <__swbuf_r+0x1a>
 800db52:	4621      	mov	r1, r4
 800db54:	4628      	mov	r0, r5
 800db56:	f000 f81f 	bl	800db98 <__swsetup_r>
 800db5a:	2800      	cmp	r0, #0
 800db5c:	d0cc      	beq.n	800daf8 <__swbuf_r+0x28>
 800db5e:	f04f 37ff 	mov.w	r7, #4294967295
 800db62:	4638      	mov	r0, r7
 800db64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db66:	bf00      	nop
 800db68:	0800fef8 	.word	0x0800fef8
 800db6c:	0800ff18 	.word	0x0800ff18
 800db70:	0800fed8 	.word	0x0800fed8

0800db74 <_write_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	4c07      	ldr	r4, [pc, #28]	; (800db94 <_write_r+0x20>)
 800db78:	4605      	mov	r5, r0
 800db7a:	4608      	mov	r0, r1
 800db7c:	4611      	mov	r1, r2
 800db7e:	2200      	movs	r2, #0
 800db80:	6022      	str	r2, [r4, #0]
 800db82:	461a      	mov	r2, r3
 800db84:	f000 fa66 	bl	800e054 <_write>
 800db88:	1c43      	adds	r3, r0, #1
 800db8a:	d102      	bne.n	800db92 <_write_r+0x1e>
 800db8c:	6823      	ldr	r3, [r4, #0]
 800db8e:	b103      	cbz	r3, 800db92 <_write_r+0x1e>
 800db90:	602b      	str	r3, [r5, #0]
 800db92:	bd38      	pop	{r3, r4, r5, pc}
 800db94:	2000c6e4 	.word	0x2000c6e4

0800db98 <__swsetup_r>:
 800db98:	4b32      	ldr	r3, [pc, #200]	; (800dc64 <__swsetup_r+0xcc>)
 800db9a:	b570      	push	{r4, r5, r6, lr}
 800db9c:	681d      	ldr	r5, [r3, #0]
 800db9e:	4606      	mov	r6, r0
 800dba0:	460c      	mov	r4, r1
 800dba2:	b125      	cbz	r5, 800dbae <__swsetup_r+0x16>
 800dba4:	69ab      	ldr	r3, [r5, #24]
 800dba6:	b913      	cbnz	r3, 800dbae <__swsetup_r+0x16>
 800dba8:	4628      	mov	r0, r5
 800dbaa:	f7ff fb91 	bl	800d2d0 <__sinit>
 800dbae:	4b2e      	ldr	r3, [pc, #184]	; (800dc68 <__swsetup_r+0xd0>)
 800dbb0:	429c      	cmp	r4, r3
 800dbb2:	d10f      	bne.n	800dbd4 <__swsetup_r+0x3c>
 800dbb4:	686c      	ldr	r4, [r5, #4]
 800dbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	0715      	lsls	r5, r2, #28
 800dbbe:	d42c      	bmi.n	800dc1a <__swsetup_r+0x82>
 800dbc0:	06d0      	lsls	r0, r2, #27
 800dbc2:	d411      	bmi.n	800dbe8 <__swsetup_r+0x50>
 800dbc4:	2209      	movs	r2, #9
 800dbc6:	6032      	str	r2, [r6, #0]
 800dbc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbcc:	81a3      	strh	r3, [r4, #12]
 800dbce:	f04f 30ff 	mov.w	r0, #4294967295
 800dbd2:	e03e      	b.n	800dc52 <__swsetup_r+0xba>
 800dbd4:	4b25      	ldr	r3, [pc, #148]	; (800dc6c <__swsetup_r+0xd4>)
 800dbd6:	429c      	cmp	r4, r3
 800dbd8:	d101      	bne.n	800dbde <__swsetup_r+0x46>
 800dbda:	68ac      	ldr	r4, [r5, #8]
 800dbdc:	e7eb      	b.n	800dbb6 <__swsetup_r+0x1e>
 800dbde:	4b24      	ldr	r3, [pc, #144]	; (800dc70 <__swsetup_r+0xd8>)
 800dbe0:	429c      	cmp	r4, r3
 800dbe2:	bf08      	it	eq
 800dbe4:	68ec      	ldreq	r4, [r5, #12]
 800dbe6:	e7e6      	b.n	800dbb6 <__swsetup_r+0x1e>
 800dbe8:	0751      	lsls	r1, r2, #29
 800dbea:	d512      	bpl.n	800dc12 <__swsetup_r+0x7a>
 800dbec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbee:	b141      	cbz	r1, 800dc02 <__swsetup_r+0x6a>
 800dbf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbf4:	4299      	cmp	r1, r3
 800dbf6:	d002      	beq.n	800dbfe <__swsetup_r+0x66>
 800dbf8:	4630      	mov	r0, r6
 800dbfa:	f000 f973 	bl	800dee4 <_free_r>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	6363      	str	r3, [r4, #52]	; 0x34
 800dc02:	89a3      	ldrh	r3, [r4, #12]
 800dc04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc08:	81a3      	strh	r3, [r4, #12]
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	6063      	str	r3, [r4, #4]
 800dc0e:	6923      	ldr	r3, [r4, #16]
 800dc10:	6023      	str	r3, [r4, #0]
 800dc12:	89a3      	ldrh	r3, [r4, #12]
 800dc14:	f043 0308 	orr.w	r3, r3, #8
 800dc18:	81a3      	strh	r3, [r4, #12]
 800dc1a:	6923      	ldr	r3, [r4, #16]
 800dc1c:	b94b      	cbnz	r3, 800dc32 <__swsetup_r+0x9a>
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc28:	d003      	beq.n	800dc32 <__swsetup_r+0x9a>
 800dc2a:	4621      	mov	r1, r4
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	f000 f917 	bl	800de60 <__smakebuf_r>
 800dc32:	89a2      	ldrh	r2, [r4, #12]
 800dc34:	f012 0301 	ands.w	r3, r2, #1
 800dc38:	d00c      	beq.n	800dc54 <__swsetup_r+0xbc>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	60a3      	str	r3, [r4, #8]
 800dc3e:	6963      	ldr	r3, [r4, #20]
 800dc40:	425b      	negs	r3, r3
 800dc42:	61a3      	str	r3, [r4, #24]
 800dc44:	6923      	ldr	r3, [r4, #16]
 800dc46:	b953      	cbnz	r3, 800dc5e <__swsetup_r+0xc6>
 800dc48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc4c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800dc50:	d1ba      	bne.n	800dbc8 <__swsetup_r+0x30>
 800dc52:	bd70      	pop	{r4, r5, r6, pc}
 800dc54:	0792      	lsls	r2, r2, #30
 800dc56:	bf58      	it	pl
 800dc58:	6963      	ldrpl	r3, [r4, #20]
 800dc5a:	60a3      	str	r3, [r4, #8]
 800dc5c:	e7f2      	b.n	800dc44 <__swsetup_r+0xac>
 800dc5e:	2000      	movs	r0, #0
 800dc60:	e7f7      	b.n	800dc52 <__swsetup_r+0xba>
 800dc62:	bf00      	nop
 800dc64:	20000010 	.word	0x20000010
 800dc68:	0800fef8 	.word	0x0800fef8
 800dc6c:	0800ff18 	.word	0x0800ff18
 800dc70:	0800fed8 	.word	0x0800fed8

0800dc74 <_close_r>:
 800dc74:	b538      	push	{r3, r4, r5, lr}
 800dc76:	4c06      	ldr	r4, [pc, #24]	; (800dc90 <_close_r+0x1c>)
 800dc78:	2300      	movs	r3, #0
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	4608      	mov	r0, r1
 800dc7e:	6023      	str	r3, [r4, #0]
 800dc80:	f000 f9b2 	bl	800dfe8 <_close>
 800dc84:	1c43      	adds	r3, r0, #1
 800dc86:	d102      	bne.n	800dc8e <_close_r+0x1a>
 800dc88:	6823      	ldr	r3, [r4, #0]
 800dc8a:	b103      	cbz	r3, 800dc8e <_close_r+0x1a>
 800dc8c:	602b      	str	r3, [r5, #0]
 800dc8e:	bd38      	pop	{r3, r4, r5, pc}
 800dc90:	2000c6e4 	.word	0x2000c6e4

0800dc94 <__sflush_r>:
 800dc94:	898a      	ldrh	r2, [r1, #12]
 800dc96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	0710      	lsls	r0, r2, #28
 800dc9e:	460c      	mov	r4, r1
 800dca0:	d458      	bmi.n	800dd54 <__sflush_r+0xc0>
 800dca2:	684b      	ldr	r3, [r1, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	dc05      	bgt.n	800dcb4 <__sflush_r+0x20>
 800dca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	dc02      	bgt.n	800dcb4 <__sflush_r+0x20>
 800dcae:	2000      	movs	r0, #0
 800dcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcb6:	2e00      	cmp	r6, #0
 800dcb8:	d0f9      	beq.n	800dcae <__sflush_r+0x1a>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dcc0:	682f      	ldr	r7, [r5, #0]
 800dcc2:	6a21      	ldr	r1, [r4, #32]
 800dcc4:	602b      	str	r3, [r5, #0]
 800dcc6:	d032      	beq.n	800dd2e <__sflush_r+0x9a>
 800dcc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dcca:	89a3      	ldrh	r3, [r4, #12]
 800dccc:	075a      	lsls	r2, r3, #29
 800dcce:	d505      	bpl.n	800dcdc <__sflush_r+0x48>
 800dcd0:	6863      	ldr	r3, [r4, #4]
 800dcd2:	1ac0      	subs	r0, r0, r3
 800dcd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcd6:	b10b      	cbz	r3, 800dcdc <__sflush_r+0x48>
 800dcd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcda:	1ac0      	subs	r0, r0, r3
 800dcdc:	2300      	movs	r3, #0
 800dcde:	4602      	mov	r2, r0
 800dce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dce2:	6a21      	ldr	r1, [r4, #32]
 800dce4:	4628      	mov	r0, r5
 800dce6:	47b0      	blx	r6
 800dce8:	1c43      	adds	r3, r0, #1
 800dcea:	89a3      	ldrh	r3, [r4, #12]
 800dcec:	d106      	bne.n	800dcfc <__sflush_r+0x68>
 800dcee:	6829      	ldr	r1, [r5, #0]
 800dcf0:	291d      	cmp	r1, #29
 800dcf2:	d848      	bhi.n	800dd86 <__sflush_r+0xf2>
 800dcf4:	4a29      	ldr	r2, [pc, #164]	; (800dd9c <__sflush_r+0x108>)
 800dcf6:	40ca      	lsrs	r2, r1
 800dcf8:	07d6      	lsls	r6, r2, #31
 800dcfa:	d544      	bpl.n	800dd86 <__sflush_r+0xf2>
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	6062      	str	r2, [r4, #4]
 800dd00:	04d9      	lsls	r1, r3, #19
 800dd02:	6922      	ldr	r2, [r4, #16]
 800dd04:	6022      	str	r2, [r4, #0]
 800dd06:	d504      	bpl.n	800dd12 <__sflush_r+0x7e>
 800dd08:	1c42      	adds	r2, r0, #1
 800dd0a:	d101      	bne.n	800dd10 <__sflush_r+0x7c>
 800dd0c:	682b      	ldr	r3, [r5, #0]
 800dd0e:	b903      	cbnz	r3, 800dd12 <__sflush_r+0x7e>
 800dd10:	6560      	str	r0, [r4, #84]	; 0x54
 800dd12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd14:	602f      	str	r7, [r5, #0]
 800dd16:	2900      	cmp	r1, #0
 800dd18:	d0c9      	beq.n	800dcae <__sflush_r+0x1a>
 800dd1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd1e:	4299      	cmp	r1, r3
 800dd20:	d002      	beq.n	800dd28 <__sflush_r+0x94>
 800dd22:	4628      	mov	r0, r5
 800dd24:	f000 f8de 	bl	800dee4 <_free_r>
 800dd28:	2000      	movs	r0, #0
 800dd2a:	6360      	str	r0, [r4, #52]	; 0x34
 800dd2c:	e7c0      	b.n	800dcb0 <__sflush_r+0x1c>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	4628      	mov	r0, r5
 800dd32:	47b0      	blx	r6
 800dd34:	1c41      	adds	r1, r0, #1
 800dd36:	d1c8      	bne.n	800dcca <__sflush_r+0x36>
 800dd38:	682b      	ldr	r3, [r5, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d0c5      	beq.n	800dcca <__sflush_r+0x36>
 800dd3e:	2b1d      	cmp	r3, #29
 800dd40:	d001      	beq.n	800dd46 <__sflush_r+0xb2>
 800dd42:	2b16      	cmp	r3, #22
 800dd44:	d101      	bne.n	800dd4a <__sflush_r+0xb6>
 800dd46:	602f      	str	r7, [r5, #0]
 800dd48:	e7b1      	b.n	800dcae <__sflush_r+0x1a>
 800dd4a:	89a3      	ldrh	r3, [r4, #12]
 800dd4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd50:	81a3      	strh	r3, [r4, #12]
 800dd52:	e7ad      	b.n	800dcb0 <__sflush_r+0x1c>
 800dd54:	690f      	ldr	r7, [r1, #16]
 800dd56:	2f00      	cmp	r7, #0
 800dd58:	d0a9      	beq.n	800dcae <__sflush_r+0x1a>
 800dd5a:	0793      	lsls	r3, r2, #30
 800dd5c:	680e      	ldr	r6, [r1, #0]
 800dd5e:	bf08      	it	eq
 800dd60:	694b      	ldreq	r3, [r1, #20]
 800dd62:	600f      	str	r7, [r1, #0]
 800dd64:	bf18      	it	ne
 800dd66:	2300      	movne	r3, #0
 800dd68:	eba6 0807 	sub.w	r8, r6, r7
 800dd6c:	608b      	str	r3, [r1, #8]
 800dd6e:	f1b8 0f00 	cmp.w	r8, #0
 800dd72:	dd9c      	ble.n	800dcae <__sflush_r+0x1a>
 800dd74:	4643      	mov	r3, r8
 800dd76:	463a      	mov	r2, r7
 800dd78:	6a21      	ldr	r1, [r4, #32]
 800dd7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	47b0      	blx	r6
 800dd80:	2800      	cmp	r0, #0
 800dd82:	dc06      	bgt.n	800dd92 <__sflush_r+0xfe>
 800dd84:	89a3      	ldrh	r3, [r4, #12]
 800dd86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd8a:	81a3      	strh	r3, [r4, #12]
 800dd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd90:	e78e      	b.n	800dcb0 <__sflush_r+0x1c>
 800dd92:	4407      	add	r7, r0
 800dd94:	eba8 0800 	sub.w	r8, r8, r0
 800dd98:	e7e9      	b.n	800dd6e <__sflush_r+0xda>
 800dd9a:	bf00      	nop
 800dd9c:	20400001 	.word	0x20400001

0800dda0 <_fflush_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	690b      	ldr	r3, [r1, #16]
 800dda4:	4605      	mov	r5, r0
 800dda6:	460c      	mov	r4, r1
 800dda8:	b1db      	cbz	r3, 800dde2 <_fflush_r+0x42>
 800ddaa:	b118      	cbz	r0, 800ddb4 <_fflush_r+0x14>
 800ddac:	6983      	ldr	r3, [r0, #24]
 800ddae:	b90b      	cbnz	r3, 800ddb4 <_fflush_r+0x14>
 800ddb0:	f7ff fa8e 	bl	800d2d0 <__sinit>
 800ddb4:	4b0c      	ldr	r3, [pc, #48]	; (800dde8 <_fflush_r+0x48>)
 800ddb6:	429c      	cmp	r4, r3
 800ddb8:	d109      	bne.n	800ddce <_fflush_r+0x2e>
 800ddba:	686c      	ldr	r4, [r5, #4]
 800ddbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddc0:	b17b      	cbz	r3, 800dde2 <_fflush_r+0x42>
 800ddc2:	4621      	mov	r1, r4
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddca:	f7ff bf63 	b.w	800dc94 <__sflush_r>
 800ddce:	4b07      	ldr	r3, [pc, #28]	; (800ddec <_fflush_r+0x4c>)
 800ddd0:	429c      	cmp	r4, r3
 800ddd2:	d101      	bne.n	800ddd8 <_fflush_r+0x38>
 800ddd4:	68ac      	ldr	r4, [r5, #8]
 800ddd6:	e7f1      	b.n	800ddbc <_fflush_r+0x1c>
 800ddd8:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <_fflush_r+0x50>)
 800ddda:	429c      	cmp	r4, r3
 800dddc:	bf08      	it	eq
 800ddde:	68ec      	ldreq	r4, [r5, #12]
 800dde0:	e7ec      	b.n	800ddbc <_fflush_r+0x1c>
 800dde2:	2000      	movs	r0, #0
 800dde4:	bd38      	pop	{r3, r4, r5, pc}
 800dde6:	bf00      	nop
 800dde8:	0800fef8 	.word	0x0800fef8
 800ddec:	0800ff18 	.word	0x0800ff18
 800ddf0:	0800fed8 	.word	0x0800fed8

0800ddf4 <_lseek_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	4c07      	ldr	r4, [pc, #28]	; (800de14 <_lseek_r+0x20>)
 800ddf8:	4605      	mov	r5, r0
 800ddfa:	4608      	mov	r0, r1
 800ddfc:	4611      	mov	r1, r2
 800ddfe:	2200      	movs	r2, #0
 800de00:	6022      	str	r2, [r4, #0]
 800de02:	461a      	mov	r2, r3
 800de04:	f000 f908 	bl	800e018 <_lseek>
 800de08:	1c43      	adds	r3, r0, #1
 800de0a:	d102      	bne.n	800de12 <_lseek_r+0x1e>
 800de0c:	6823      	ldr	r3, [r4, #0]
 800de0e:	b103      	cbz	r3, 800de12 <_lseek_r+0x1e>
 800de10:	602b      	str	r3, [r5, #0]
 800de12:	bd38      	pop	{r3, r4, r5, pc}
 800de14:	2000c6e4 	.word	0x2000c6e4

0800de18 <__swhatbuf_r>:
 800de18:	b570      	push	{r4, r5, r6, lr}
 800de1a:	460e      	mov	r6, r1
 800de1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de20:	2900      	cmp	r1, #0
 800de22:	b096      	sub	sp, #88	; 0x58
 800de24:	4614      	mov	r4, r2
 800de26:	461d      	mov	r5, r3
 800de28:	da07      	bge.n	800de3a <__swhatbuf_r+0x22>
 800de2a:	2300      	movs	r3, #0
 800de2c:	602b      	str	r3, [r5, #0]
 800de2e:	89b3      	ldrh	r3, [r6, #12]
 800de30:	061a      	lsls	r2, r3, #24
 800de32:	d410      	bmi.n	800de56 <__swhatbuf_r+0x3e>
 800de34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de38:	e00e      	b.n	800de58 <__swhatbuf_r+0x40>
 800de3a:	466a      	mov	r2, sp
 800de3c:	f000 f8b2 	bl	800dfa4 <_fstat_r>
 800de40:	2800      	cmp	r0, #0
 800de42:	dbf2      	blt.n	800de2a <__swhatbuf_r+0x12>
 800de44:	9a01      	ldr	r2, [sp, #4]
 800de46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800de4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800de4e:	425a      	negs	r2, r3
 800de50:	415a      	adcs	r2, r3
 800de52:	602a      	str	r2, [r5, #0]
 800de54:	e7ee      	b.n	800de34 <__swhatbuf_r+0x1c>
 800de56:	2340      	movs	r3, #64	; 0x40
 800de58:	2000      	movs	r0, #0
 800de5a:	6023      	str	r3, [r4, #0]
 800de5c:	b016      	add	sp, #88	; 0x58
 800de5e:	bd70      	pop	{r4, r5, r6, pc}

0800de60 <__smakebuf_r>:
 800de60:	898b      	ldrh	r3, [r1, #12]
 800de62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de64:	079d      	lsls	r5, r3, #30
 800de66:	4606      	mov	r6, r0
 800de68:	460c      	mov	r4, r1
 800de6a:	d507      	bpl.n	800de7c <__smakebuf_r+0x1c>
 800de6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de70:	6023      	str	r3, [r4, #0]
 800de72:	6123      	str	r3, [r4, #16]
 800de74:	2301      	movs	r3, #1
 800de76:	6163      	str	r3, [r4, #20]
 800de78:	b002      	add	sp, #8
 800de7a:	bd70      	pop	{r4, r5, r6, pc}
 800de7c:	ab01      	add	r3, sp, #4
 800de7e:	466a      	mov	r2, sp
 800de80:	f7ff ffca 	bl	800de18 <__swhatbuf_r>
 800de84:	9900      	ldr	r1, [sp, #0]
 800de86:	4605      	mov	r5, r0
 800de88:	4630      	mov	r0, r6
 800de8a:	f7ff faab 	bl	800d3e4 <_malloc_r>
 800de8e:	b948      	cbnz	r0, 800dea4 <__smakebuf_r+0x44>
 800de90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de94:	059a      	lsls	r2, r3, #22
 800de96:	d4ef      	bmi.n	800de78 <__smakebuf_r+0x18>
 800de98:	f023 0303 	bic.w	r3, r3, #3
 800de9c:	f043 0302 	orr.w	r3, r3, #2
 800dea0:	81a3      	strh	r3, [r4, #12]
 800dea2:	e7e3      	b.n	800de6c <__smakebuf_r+0xc>
 800dea4:	4b0d      	ldr	r3, [pc, #52]	; (800dedc <__smakebuf_r+0x7c>)
 800dea6:	62b3      	str	r3, [r6, #40]	; 0x28
 800dea8:	89a3      	ldrh	r3, [r4, #12]
 800deaa:	6020      	str	r0, [r4, #0]
 800deac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800deb0:	81a3      	strh	r3, [r4, #12]
 800deb2:	9b00      	ldr	r3, [sp, #0]
 800deb4:	6163      	str	r3, [r4, #20]
 800deb6:	9b01      	ldr	r3, [sp, #4]
 800deb8:	6120      	str	r0, [r4, #16]
 800deba:	b15b      	cbz	r3, 800ded4 <__smakebuf_r+0x74>
 800debc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dec0:	4630      	mov	r0, r6
 800dec2:	f000 f881 	bl	800dfc8 <_isatty_r>
 800dec6:	b128      	cbz	r0, 800ded4 <__smakebuf_r+0x74>
 800dec8:	89a3      	ldrh	r3, [r4, #12]
 800deca:	f023 0303 	bic.w	r3, r3, #3
 800dece:	f043 0301 	orr.w	r3, r3, #1
 800ded2:	81a3      	strh	r3, [r4, #12]
 800ded4:	89a3      	ldrh	r3, [r4, #12]
 800ded6:	431d      	orrs	r5, r3
 800ded8:	81a5      	strh	r5, [r4, #12]
 800deda:	e7cd      	b.n	800de78 <__smakebuf_r+0x18>
 800dedc:	0800d299 	.word	0x0800d299

0800dee0 <__malloc_lock>:
 800dee0:	4770      	bx	lr

0800dee2 <__malloc_unlock>:
 800dee2:	4770      	bx	lr

0800dee4 <_free_r>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	4605      	mov	r5, r0
 800dee8:	2900      	cmp	r1, #0
 800deea:	d045      	beq.n	800df78 <_free_r+0x94>
 800deec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800def0:	1f0c      	subs	r4, r1, #4
 800def2:	2b00      	cmp	r3, #0
 800def4:	bfb8      	it	lt
 800def6:	18e4      	addlt	r4, r4, r3
 800def8:	f7ff fff2 	bl	800dee0 <__malloc_lock>
 800defc:	4a1f      	ldr	r2, [pc, #124]	; (800df7c <_free_r+0x98>)
 800defe:	6813      	ldr	r3, [r2, #0]
 800df00:	4610      	mov	r0, r2
 800df02:	b933      	cbnz	r3, 800df12 <_free_r+0x2e>
 800df04:	6063      	str	r3, [r4, #4]
 800df06:	6014      	str	r4, [r2, #0]
 800df08:	4628      	mov	r0, r5
 800df0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df0e:	f7ff bfe8 	b.w	800dee2 <__malloc_unlock>
 800df12:	42a3      	cmp	r3, r4
 800df14:	d90c      	bls.n	800df30 <_free_r+0x4c>
 800df16:	6821      	ldr	r1, [r4, #0]
 800df18:	1862      	adds	r2, r4, r1
 800df1a:	4293      	cmp	r3, r2
 800df1c:	bf04      	itt	eq
 800df1e:	681a      	ldreq	r2, [r3, #0]
 800df20:	685b      	ldreq	r3, [r3, #4]
 800df22:	6063      	str	r3, [r4, #4]
 800df24:	bf04      	itt	eq
 800df26:	1852      	addeq	r2, r2, r1
 800df28:	6022      	streq	r2, [r4, #0]
 800df2a:	6004      	str	r4, [r0, #0]
 800df2c:	e7ec      	b.n	800df08 <_free_r+0x24>
 800df2e:	4613      	mov	r3, r2
 800df30:	685a      	ldr	r2, [r3, #4]
 800df32:	b10a      	cbz	r2, 800df38 <_free_r+0x54>
 800df34:	42a2      	cmp	r2, r4
 800df36:	d9fa      	bls.n	800df2e <_free_r+0x4a>
 800df38:	6819      	ldr	r1, [r3, #0]
 800df3a:	1858      	adds	r0, r3, r1
 800df3c:	42a0      	cmp	r0, r4
 800df3e:	d10b      	bne.n	800df58 <_free_r+0x74>
 800df40:	6820      	ldr	r0, [r4, #0]
 800df42:	4401      	add	r1, r0
 800df44:	1858      	adds	r0, r3, r1
 800df46:	4282      	cmp	r2, r0
 800df48:	6019      	str	r1, [r3, #0]
 800df4a:	d1dd      	bne.n	800df08 <_free_r+0x24>
 800df4c:	6810      	ldr	r0, [r2, #0]
 800df4e:	6852      	ldr	r2, [r2, #4]
 800df50:	605a      	str	r2, [r3, #4]
 800df52:	4401      	add	r1, r0
 800df54:	6019      	str	r1, [r3, #0]
 800df56:	e7d7      	b.n	800df08 <_free_r+0x24>
 800df58:	d902      	bls.n	800df60 <_free_r+0x7c>
 800df5a:	230c      	movs	r3, #12
 800df5c:	602b      	str	r3, [r5, #0]
 800df5e:	e7d3      	b.n	800df08 <_free_r+0x24>
 800df60:	6820      	ldr	r0, [r4, #0]
 800df62:	1821      	adds	r1, r4, r0
 800df64:	428a      	cmp	r2, r1
 800df66:	bf04      	itt	eq
 800df68:	6811      	ldreq	r1, [r2, #0]
 800df6a:	6852      	ldreq	r2, [r2, #4]
 800df6c:	6062      	str	r2, [r4, #4]
 800df6e:	bf04      	itt	eq
 800df70:	1809      	addeq	r1, r1, r0
 800df72:	6021      	streq	r1, [r4, #0]
 800df74:	605c      	str	r4, [r3, #4]
 800df76:	e7c7      	b.n	800df08 <_free_r+0x24>
 800df78:	bd38      	pop	{r3, r4, r5, pc}
 800df7a:	bf00      	nop
 800df7c:	20000200 	.word	0x20000200

0800df80 <_read_r>:
 800df80:	b538      	push	{r3, r4, r5, lr}
 800df82:	4c07      	ldr	r4, [pc, #28]	; (800dfa0 <_read_r+0x20>)
 800df84:	4605      	mov	r5, r0
 800df86:	4608      	mov	r0, r1
 800df88:	4611      	mov	r1, r2
 800df8a:	2200      	movs	r2, #0
 800df8c:	6022      	str	r2, [r4, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	f000 f84a 	bl	800e028 <_read>
 800df94:	1c43      	adds	r3, r0, #1
 800df96:	d102      	bne.n	800df9e <_read_r+0x1e>
 800df98:	6823      	ldr	r3, [r4, #0]
 800df9a:	b103      	cbz	r3, 800df9e <_read_r+0x1e>
 800df9c:	602b      	str	r3, [r5, #0]
 800df9e:	bd38      	pop	{r3, r4, r5, pc}
 800dfa0:	2000c6e4 	.word	0x2000c6e4

0800dfa4 <_fstat_r>:
 800dfa4:	b538      	push	{r3, r4, r5, lr}
 800dfa6:	4c07      	ldr	r4, [pc, #28]	; (800dfc4 <_fstat_r+0x20>)
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	4605      	mov	r5, r0
 800dfac:	4608      	mov	r0, r1
 800dfae:	4611      	mov	r1, r2
 800dfb0:	6023      	str	r3, [r4, #0]
 800dfb2:	f000 f821 	bl	800dff8 <_fstat>
 800dfb6:	1c43      	adds	r3, r0, #1
 800dfb8:	d102      	bne.n	800dfc0 <_fstat_r+0x1c>
 800dfba:	6823      	ldr	r3, [r4, #0]
 800dfbc:	b103      	cbz	r3, 800dfc0 <_fstat_r+0x1c>
 800dfbe:	602b      	str	r3, [r5, #0]
 800dfc0:	bd38      	pop	{r3, r4, r5, pc}
 800dfc2:	bf00      	nop
 800dfc4:	2000c6e4 	.word	0x2000c6e4

0800dfc8 <_isatty_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4c06      	ldr	r4, [pc, #24]	; (800dfe4 <_isatty_r+0x1c>)
 800dfcc:	2300      	movs	r3, #0
 800dfce:	4605      	mov	r5, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	6023      	str	r3, [r4, #0]
 800dfd4:	f000 f818 	bl	800e008 <_isatty>
 800dfd8:	1c43      	adds	r3, r0, #1
 800dfda:	d102      	bne.n	800dfe2 <_isatty_r+0x1a>
 800dfdc:	6823      	ldr	r3, [r4, #0]
 800dfde:	b103      	cbz	r3, 800dfe2 <_isatty_r+0x1a>
 800dfe0:	602b      	str	r3, [r5, #0]
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}
 800dfe4:	2000c6e4 	.word	0x2000c6e4

0800dfe8 <_close>:
 800dfe8:	4b02      	ldr	r3, [pc, #8]	; (800dff4 <_close+0xc>)
 800dfea:	2258      	movs	r2, #88	; 0x58
 800dfec:	601a      	str	r2, [r3, #0]
 800dfee:	f04f 30ff 	mov.w	r0, #4294967295
 800dff2:	4770      	bx	lr
 800dff4:	2000c6e4 	.word	0x2000c6e4

0800dff8 <_fstat>:
 800dff8:	4b02      	ldr	r3, [pc, #8]	; (800e004 <_fstat+0xc>)
 800dffa:	2258      	movs	r2, #88	; 0x58
 800dffc:	601a      	str	r2, [r3, #0]
 800dffe:	f04f 30ff 	mov.w	r0, #4294967295
 800e002:	4770      	bx	lr
 800e004:	2000c6e4 	.word	0x2000c6e4

0800e008 <_isatty>:
 800e008:	4b02      	ldr	r3, [pc, #8]	; (800e014 <_isatty+0xc>)
 800e00a:	2258      	movs	r2, #88	; 0x58
 800e00c:	601a      	str	r2, [r3, #0]
 800e00e:	2000      	movs	r0, #0
 800e010:	4770      	bx	lr
 800e012:	bf00      	nop
 800e014:	2000c6e4 	.word	0x2000c6e4

0800e018 <_lseek>:
 800e018:	4b02      	ldr	r3, [pc, #8]	; (800e024 <_lseek+0xc>)
 800e01a:	2258      	movs	r2, #88	; 0x58
 800e01c:	601a      	str	r2, [r3, #0]
 800e01e:	f04f 30ff 	mov.w	r0, #4294967295
 800e022:	4770      	bx	lr
 800e024:	2000c6e4 	.word	0x2000c6e4

0800e028 <_read>:
 800e028:	4b02      	ldr	r3, [pc, #8]	; (800e034 <_read+0xc>)
 800e02a:	2258      	movs	r2, #88	; 0x58
 800e02c:	601a      	str	r2, [r3, #0]
 800e02e:	f04f 30ff 	mov.w	r0, #4294967295
 800e032:	4770      	bx	lr
 800e034:	2000c6e4 	.word	0x2000c6e4

0800e038 <_sbrk>:
 800e038:	4b04      	ldr	r3, [pc, #16]	; (800e04c <_sbrk+0x14>)
 800e03a:	6819      	ldr	r1, [r3, #0]
 800e03c:	4602      	mov	r2, r0
 800e03e:	b909      	cbnz	r1, 800e044 <_sbrk+0xc>
 800e040:	4903      	ldr	r1, [pc, #12]	; (800e050 <_sbrk+0x18>)
 800e042:	6019      	str	r1, [r3, #0]
 800e044:	6818      	ldr	r0, [r3, #0]
 800e046:	4402      	add	r2, r0
 800e048:	601a      	str	r2, [r3, #0]
 800e04a:	4770      	bx	lr
 800e04c:	20000208 	.word	0x20000208
 800e050:	2000c6e8 	.word	0x2000c6e8

0800e054 <_write>:
 800e054:	4b02      	ldr	r3, [pc, #8]	; (800e060 <_write+0xc>)
 800e056:	2258      	movs	r2, #88	; 0x58
 800e058:	601a      	str	r2, [r3, #0]
 800e05a:	f04f 30ff 	mov.w	r0, #4294967295
 800e05e:	4770      	bx	lr
 800e060:	2000c6e4 	.word	0x2000c6e4

0800e064 <_init>:
 800e064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e066:	bf00      	nop
 800e068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e06a:	bc08      	pop	{r3}
 800e06c:	469e      	mov	lr, r3
 800e06e:	4770      	bx	lr

0800e070 <_fini>:
 800e070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e072:	bf00      	nop
 800e074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e076:	bc08      	pop	{r3}
 800e078:	469e      	mov	lr, r3
 800e07a:	4770      	bx	lr
